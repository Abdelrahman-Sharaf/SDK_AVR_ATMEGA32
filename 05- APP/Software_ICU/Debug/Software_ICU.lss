
Software_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  00003c5c  00003cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008001c2  008001c2  00003e52  2**0
                  ALLOC
  3 .stab         00003528  00000000  00000000  00003e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f80  00000000  00000000  0000737c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000092fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000947c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000964f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000b65e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000c7ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d7d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d970  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000dc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e4df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_1>
       8:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__vector_2>
       c:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__vector_6>
      1c:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__vector_7>
      20:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__vector_8>
      24:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__vector_9>
      28:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__vector_10>
      2c:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3e       	cpi	r26, 0xE1	; 225
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 95 1c 	call	0x392a	; 0x392a <main>
      8a:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 1e 	jmp	0x3c22	; 0x3c22 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 1e 	jmp	0x3c22	; 0x3c22 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 05 1e 	jmp	0x3c0a	; 0x3c0a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ee 57       	subi	r30, 0x7E	; 126
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <DIO_voidSetPinDirection>:

/******************************************************************************
**************************** Function Implementation **************************
******************************************************************************/

void DIO_voidSetPinDirection(uint8 Copy_u8Pin, uint8 Copy_u8Mode){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <DIO_voidSetPinDirection+0x6>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	6a 83       	std	Y+2, r22	; 0x02

	if(DIO_OUTPUT == Copy_u8Mode){
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	09 f0       	breq	.+2      	; 0xcec <DIO_voidSetPinDirection+0x16>
     cea:	70 c0       	rjmp	.+224    	; 0xdcc <DIO_voidSetPinDirection+0xf6>
	
		if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	88 30       	cpi	r24, 0x08	; 8
     cf0:	a0 f4       	brcc	.+40     	; 0xd1a <DIO_voidSetPinDirection+0x44>

			SET_BIT(DDRA, Copy_u8Pin);
     cf2:	aa e3       	ldi	r26, 0x3A	; 58
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ea e3       	ldi	r30, 0x3A	; 58
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_voidSetPinDirection+0x3a>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_voidSetPinDirection+0x36>
     d14:	84 2b       	or	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	ce c0       	rjmp	.+412    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}

		else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	88 30       	cpi	r24, 0x08	; 8
     d1e:	d0 f0       	brcs	.+52     	; 0xd54 <DIO_voidSetPinDirection+0x7e>
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	80 31       	cpi	r24, 0x10	; 16
     d24:	b8 f4       	brcc	.+46     	; 0xd54 <DIO_voidSetPinDirection+0x7e>

			SET_BIT(DDRB, (Copy_u8Pin-8));
     d26:	a7 e3       	ldi	r26, 0x37	; 55
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e3       	ldi	r30, 0x37	; 55
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	9c 01       	movw	r18, r24
     d3a:	28 50       	subi	r18, 0x08	; 8
     d3c:	30 40       	sbci	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_voidSetPinDirection+0x74>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <DIO_voidSetPinDirection+0x70>
     d4e:	84 2b       	or	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	b1 c0       	rjmp	.+354    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}

		else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	80 31       	cpi	r24, 0x10	; 16
     d58:	d0 f0       	brcs	.+52     	; 0xd8e <DIO_voidSetPinDirection+0xb8>
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	88 31       	cpi	r24, 0x18	; 24
     d5e:	b8 f4       	brcc	.+46     	; 0xd8e <DIO_voidSetPinDirection+0xb8>

			SET_BIT(DDRC, (Copy_u8Pin-16));
     d60:	a4 e3       	ldi	r26, 0x34	; 52
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e4 e3       	ldi	r30, 0x34	; 52
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9c 01       	movw	r18, r24
     d74:	20 51       	subi	r18, 0x10	; 16
     d76:	30 40       	sbci	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_voidSetPinDirection+0xae>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_voidSetPinDirection+0xaa>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	94 c0       	rjmp	.+296    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}
		
		else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	88 31       	cpi	r24, 0x18	; 24
     d92:	08 f4       	brcc	.+2      	; 0xd96 <DIO_voidSetPinDirection+0xc0>
     d94:	90 c0       	rjmp	.+288    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	80 32       	cpi	r24, 0x20	; 32
     d9a:	08 f0       	brcs	.+2      	; 0xd9e <DIO_voidSetPinDirection+0xc8>
     d9c:	8c c0       	rjmp	.+280    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>

			SET_BIT(DDRD, (Copy_u8Pin-24));
     d9e:	a1 e3       	ldi	r26, 0x31	; 49
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e1 e3       	ldi	r30, 0x31	; 49
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9c 01       	movw	r18, r24
     db2:	28 51       	subi	r18, 0x18	; 24
     db4:	30 40       	sbci	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_voidSetPinDirection+0xec>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_voidSetPinDirection+0xe8>
     dc6:	84 2b       	or	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	75 c0       	rjmp	.+234    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>

		else{    /* return error  */   }

	}
	
	else if(DIO_INPUT == Copy_u8Mode){
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	88 23       	and	r24, r24
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <DIO_voidSetPinDirection+0xfe>
     dd2:	71 c0       	rjmp	.+226    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
	
		if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	88 30       	cpi	r24, 0x08	; 8
     dd8:	a8 f4       	brcc	.+42     	; 0xe04 <DIO_voidSetPinDirection+0x12e>

			CLR_BIT(DDRA, Copy_u8Pin);
     dda:	aa e3       	ldi	r26, 0x3A	; 58
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ea e3       	ldi	r30, 0x3A	; 58
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_voidSetPinDirection+0x122>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_voidSetPinDirection+0x11e>
     dfc:	80 95       	com	r24
     dfe:	84 23       	and	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	59 c0       	rjmp	.+178    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}

		else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	88 30       	cpi	r24, 0x08	; 8
     e08:	d8 f0       	brcs	.+54     	; 0xe40 <DIO_voidSetPinDirection+0x16a>
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	80 31       	cpi	r24, 0x10	; 16
     e0e:	c0 f4       	brcc	.+48     	; 0xe40 <DIO_voidSetPinDirection+0x16a>

			CLR_BIT(DDRB, (Copy_u8Pin-8));
     e10:	a7 e3       	ldi	r26, 0x37	; 55
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e3       	ldi	r30, 0x37	; 55
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9c 01       	movw	r18, r24
     e24:	28 50       	subi	r18, 0x08	; 8
     e26:	30 40       	sbci	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_voidSetPinDirection+0x15e>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_voidSetPinDirection+0x15a>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	3b c0       	rjmp	.+118    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}

		else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	80 31       	cpi	r24, 0x10	; 16
     e44:	d8 f0       	brcs	.+54     	; 0xe7c <DIO_voidSetPinDirection+0x1a6>
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 31       	cpi	r24, 0x18	; 24
     e4a:	c0 f4       	brcc	.+48     	; 0xe7c <DIO_voidSetPinDirection+0x1a6>

			CLR_BIT(DDRC, (Copy_u8Pin-16));
     e4c:	a4 e3       	ldi	r26, 0x34	; 52
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e4 e3       	ldi	r30, 0x34	; 52
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9c 01       	movw	r18, r24
     e60:	20 51       	subi	r18, 0x10	; 16
     e62:	30 40       	sbci	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_voidSetPinDirection+0x19a>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_voidSetPinDirection+0x196>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	1d c0       	rjmp	.+58     	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}
		
		else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	88 31       	cpi	r24, 0x18	; 24
     e80:	d0 f0       	brcs	.+52     	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	80 32       	cpi	r24, 0x20	; 32
     e86:	b8 f4       	brcc	.+46     	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>

			CLR_BIT(DDRD, (Copy_u8Pin-24));
     e88:	a1 e3       	ldi	r26, 0x31	; 49
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e1 e3       	ldi	r30, 0x31	; 49
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	9c 01       	movw	r18, r24
     e9c:	28 51       	subi	r18, 0x18	; 24
     e9e:	30 40       	sbci	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_voidSetPinDirection+0x1d6>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_voidSetPinDirection+0x1d2>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
		else{    /* return error  */   }
	}
	
	else{    /* return error  */   }

}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(uint8 Copy_u8Pin, uint8 Copy_u8Value){
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <DIO_voidSetPinValue+0x6>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	6a 83       	std	Y+2, r22	; 0x02

	if(DIO_HIGH == Copy_u8Value){
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	09 f0       	breq	.+2      	; 0xed6 <DIO_voidSetPinValue+0x16>
     ed4:	70 c0       	rjmp	.+224    	; 0xfb6 <DIO_voidSetPinValue+0xf6>
	
		if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	88 30       	cpi	r24, 0x08	; 8
     eda:	a0 f4       	brcc	.+40     	; 0xf04 <DIO_voidSetPinValue+0x44>

			SET_BIT(PORTA, Copy_u8Pin);
     edc:	ab e3       	ldi	r26, 0x3B	; 59
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	eb e3       	ldi	r30, 0x3B	; 59
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_voidSetPinValue+0x3a>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_voidSetPinValue+0x36>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	ce c0       	rjmp	.+412    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}

		else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	d0 f0       	brcs	.+52     	; 0xf3e <DIO_voidSetPinValue+0x7e>
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	80 31       	cpi	r24, 0x10	; 16
     f0e:	b8 f4       	brcc	.+46     	; 0xf3e <DIO_voidSetPinValue+0x7e>

			SET_BIT(PORTB, (Copy_u8Pin-8));
     f10:	a8 e3       	ldi	r26, 0x38	; 56
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e8 e3       	ldi	r30, 0x38	; 56
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9c 01       	movw	r18, r24
     f24:	28 50       	subi	r18, 0x08	; 8
     f26:	30 40       	sbci	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetPinValue+0x74>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetPinValue+0x70>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	b1 c0       	rjmp	.+354    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}

		else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	80 31       	cpi	r24, 0x10	; 16
     f42:	d0 f0       	brcs	.+52     	; 0xf78 <DIO_voidSetPinValue+0xb8>
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	88 31       	cpi	r24, 0x18	; 24
     f48:	b8 f4       	brcc	.+46     	; 0xf78 <DIO_voidSetPinValue+0xb8>

			SET_BIT(PORTC, (Copy_u8Pin-16));
     f4a:	a5 e3       	ldi	r26, 0x35	; 53
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e5 e3       	ldi	r30, 0x35	; 53
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	9c 01       	movw	r18, r24
     f5e:	20 51       	subi	r18, 0x10	; 16
     f60:	30 40       	sbci	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_voidSetPinValue+0xae>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_voidSetPinValue+0xaa>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	94 c0       	rjmp	.+296    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}
		
		else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	88 31       	cpi	r24, 0x18	; 24
     f7c:	08 f4       	brcc	.+2      	; 0xf80 <DIO_voidSetPinValue+0xc0>
     f7e:	90 c0       	rjmp	.+288    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	80 32       	cpi	r24, 0x20	; 32
     f84:	08 f0       	brcs	.+2      	; 0xf88 <DIO_voidSetPinValue+0xc8>
     f86:	8c c0       	rjmp	.+280    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>

			SET_BIT(PORTD, (Copy_u8Pin-24));
     f88:	a2 e3       	ldi	r26, 0x32	; 50
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e2 e3       	ldi	r30, 0x32	; 50
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9c 01       	movw	r18, r24
     f9c:	28 51       	subi	r18, 0x18	; 24
     f9e:	30 40       	sbci	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_voidSetPinValue+0xec>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_voidSetPinValue+0xe8>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	75 c0       	rjmp	.+234    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}

		else{    /* return error  */   }
	}
	
	else if(DIO_LOW == Copy_u8Value){
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	88 23       	and	r24, r24
     fba:	09 f0       	breq	.+2      	; 0xfbe <DIO_voidSetPinValue+0xfe>
     fbc:	71 c0       	rjmp	.+226    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>

		if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	88 30       	cpi	r24, 0x08	; 8
     fc2:	a8 f4       	brcc	.+42     	; 0xfee <DIO_voidSetPinValue+0x12e>

			CLR_BIT(PORTA, Copy_u8Pin);
     fc4:	ab e3       	ldi	r26, 0x3B	; 59
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	eb e3       	ldi	r30, 0x3B	; 59
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_voidSetPinValue+0x122>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_voidSetPinValue+0x11e>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	59 c0       	rjmp	.+178    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}

		else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	88 30       	cpi	r24, 0x08	; 8
     ff2:	d8 f0       	brcs	.+54     	; 0x102a <DIO_voidSetPinValue+0x16a>
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	80 31       	cpi	r24, 0x10	; 16
     ff8:	c0 f4       	brcc	.+48     	; 0x102a <DIO_voidSetPinValue+0x16a>

			CLR_BIT(PORTB, (Copy_u8Pin-8));
     ffa:	a8 e3       	ldi	r26, 0x38	; 56
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e8 e3       	ldi	r30, 0x38	; 56
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9c 01       	movw	r18, r24
    100e:	28 50       	subi	r18, 0x08	; 8
    1010:	30 40       	sbci	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_voidSetPinValue+0x15e>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_voidSetPinValue+0x15a>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	3b c0       	rjmp	.+118    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}

		else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	80 31       	cpi	r24, 0x10	; 16
    102e:	d8 f0       	brcs	.+54     	; 0x1066 <DIO_voidSetPinValue+0x1a6>
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	88 31       	cpi	r24, 0x18	; 24
    1034:	c0 f4       	brcc	.+48     	; 0x1066 <DIO_voidSetPinValue+0x1a6>

			CLR_BIT(PORTC, (Copy_u8Pin-16));
    1036:	a5 e3       	ldi	r26, 0x35	; 53
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e3       	ldi	r30, 0x35	; 53
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9c 01       	movw	r18, r24
    104a:	20 51       	subi	r18, 0x10	; 16
    104c:	30 40       	sbci	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_voidSetPinValue+0x19a>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_voidSetPinValue+0x196>
    105e:	80 95       	com	r24
    1060:	84 23       	and	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	1d c0       	rjmp	.+58     	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}
		
		else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	88 31       	cpi	r24, 0x18	; 24
    106a:	d0 f0       	brcs	.+52     	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	80 32       	cpi	r24, 0x20	; 32
    1070:	b8 f4       	brcc	.+46     	; 0x10a0 <DIO_voidSetPinValue+0x1e0>

			CLR_BIT(PORTD, (Copy_u8Pin-24));
    1072:	a2 e3       	ldi	r26, 0x32	; 50
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e2 e3       	ldi	r30, 0x32	; 50
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9c 01       	movw	r18, r24
    1086:	28 51       	subi	r18, 0x18	; 24
    1088:	30 40       	sbci	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_voidSetPinValue+0x1d6>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_voidSetPinValue+0x1d2>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24

	}
	
	else{    /* return error  */   }

}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <DIO_u8GetPinValue>:


uint8 DIO_u8GetPinValue(uint8 Copy_u8Pin){
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <DIO_u8GetPinValue+0x6>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Result = 0; 
    10b6:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	88 30       	cpi	r24, 0x08	; 8
    10bc:	90 f4       	brcc	.+36     	; 0x10e2 <DIO_u8GetPinValue+0x38>

		Local_u8Result = GET_BIT(PINA, Copy_u8Pin);
    10be:	e9 e3       	ldi	r30, 0x39	; 57
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a9 01       	movw	r20, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_u8GetPinValue+0x2c>
    10d2:	55 95       	asr	r21
    10d4:	47 95       	ror	r20
    10d6:	8a 95       	dec	r24
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_u8GetPinValue+0x28>
    10da:	ca 01       	movw	r24, r20
    10dc:	81 70       	andi	r24, 0x01	; 1
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	47 c0       	rjmp	.+142    	; 0x1170 <DIO_u8GetPinValue+0xc6>
	}
	else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	88 30       	cpi	r24, 0x08	; 8
    10e6:	a8 f0       	brcs	.+42     	; 0x1112 <DIO_u8GetPinValue+0x68>
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	80 31       	cpi	r24, 0x10	; 16
    10ec:	90 f4       	brcc	.+36     	; 0x1112 <DIO_u8GetPinValue+0x68>

		Local_u8Result = GET_BIT(PINB, Copy_u8Pin);
    10ee:	e6 e3       	ldi	r30, 0x36	; 54
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a9 01       	movw	r20, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_u8GetPinValue+0x5c>
    1102:	55 95       	asr	r21
    1104:	47 95       	ror	r20
    1106:	8a 95       	dec	r24
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_u8GetPinValue+0x58>
    110a:	ca 01       	movw	r24, r20
    110c:	81 70       	andi	r24, 0x01	; 1
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	2f c0       	rjmp	.+94     	; 0x1170 <DIO_u8GetPinValue+0xc6>
	}
	else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 31       	cpi	r24, 0x10	; 16
    1116:	a8 f0       	brcs	.+42     	; 0x1142 <DIO_u8GetPinValue+0x98>
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	88 31       	cpi	r24, 0x18	; 24
    111c:	90 f4       	brcc	.+36     	; 0x1142 <DIO_u8GetPinValue+0x98>

		Local_u8Result = GET_BIT(PINC, Copy_u8Pin);
    111e:	e3 e3       	ldi	r30, 0x33	; 51
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a9 01       	movw	r20, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_u8GetPinValue+0x8c>
    1132:	55 95       	asr	r21
    1134:	47 95       	ror	r20
    1136:	8a 95       	dec	r24
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_u8GetPinValue+0x88>
    113a:	ca 01       	movw	r24, r20
    113c:	81 70       	andi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	17 c0       	rjmp	.+46     	; 0x1170 <DIO_u8GetPinValue+0xc6>
	}
	else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	88 31       	cpi	r24, 0x18	; 24
    1146:	a0 f0       	brcs	.+40     	; 0x1170 <DIO_u8GetPinValue+0xc6>
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	80 32       	cpi	r24, 0x20	; 32
    114c:	88 f4       	brcc	.+34     	; 0x1170 <DIO_u8GetPinValue+0xc6>
		
		Local_u8Result = GET_BIT(PIND, Copy_u8Pin);
    114e:	e0 e3       	ldi	r30, 0x30	; 48
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_u8GetPinValue+0xbc>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_u8GetPinValue+0xb8>
    116a:	ca 01       	movw	r24, r20
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Result;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Mode){
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <DIO_voidSetPortDirection+0x6>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <DIO_voidSetPortDirection+0x8>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_u8Port){ 
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3c 83       	std	Y+4, r19	; 0x04
    1194:	2b 83       	std	Y+3, r18	; 0x03
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	d1 f0       	breq	.+52     	; 0x11d4 <DIO_voidSetPortDirection+0x58>
    11a0:	2b 81       	ldd	r18, Y+3	; 0x03
    11a2:	3c 81       	ldd	r19, Y+4	; 0x04
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <DIO_voidSetPortDirection+0x38>
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	61 f0       	breq	.+24     	; 0x11ca <DIO_voidSetPortDirection+0x4e>
    11b2:	1e c0       	rjmp	.+60     	; 0x11f0 <DIO_voidSetPortDirection+0x74>
    11b4:	2b 81       	ldd	r18, Y+3	; 0x03
    11b6:	3c 81       	ldd	r19, Y+4	; 0x04
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	81 f0       	breq	.+32     	; 0x11de <DIO_voidSetPortDirection+0x62>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	83 30       	cpi	r24, 0x03	; 3
    11c4:	91 05       	cpc	r25, r1
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <DIO_voidSetPortDirection+0x6c>
    11c8:	13 c0       	rjmp	.+38     	; 0x11f0 <DIO_voidSetPortDirection+0x74>
	
		case DIO_PORTA:		DDRA = Copy_u8Mode;		break;
    11ca:	ea e3       	ldi	r30, 0x3A	; 58
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	80 83       	st	Z, r24
    11d2:	0e c0       	rjmp	.+28     	; 0x11f0 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB:		DDRB = Copy_u8Mode;		break;
    11d4:	e7 e3       	ldi	r30, 0x37	; 55
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	80 83       	st	Z, r24
    11dc:	09 c0       	rjmp	.+18     	; 0x11f0 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC:		DDRC = Copy_u8Mode;		break;
    11de:	e4 e3       	ldi	r30, 0x34	; 52
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD:		DDRD = Copy_u8Mode;		break;
    11e8:	e1 e3       	ldi	r30, 0x31	; 49
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	80 83       	st	Z, r24
		
	}
	
}
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value){
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <DIO_voidSetPortValue+0x6>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <DIO_voidSetPortValue+0x8>
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8Port){ 
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	3c 83       	std	Y+4, r19	; 0x04
    1216:	2b 83       	std	Y+3, r18	; 0x03
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	91 05       	cpc	r25, r1
    1220:	d1 f0       	breq	.+52     	; 0x1256 <DIO_voidSetPortValue+0x58>
    1222:	2b 81       	ldd	r18, Y+3	; 0x03
    1224:	3c 81       	ldd	r19, Y+4	; 0x04
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	2c f4       	brge	.+10     	; 0x1236 <DIO_voidSetPortValue+0x38>
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	61 f0       	breq	.+24     	; 0x124c <DIO_voidSetPortValue+0x4e>
    1234:	1e c0       	rjmp	.+60     	; 0x1272 <DIO_voidSetPortValue+0x74>
    1236:	2b 81       	ldd	r18, Y+3	; 0x03
    1238:	3c 81       	ldd	r19, Y+4	; 0x04
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	81 f0       	breq	.+32     	; 0x1260 <DIO_voidSetPortValue+0x62>
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <DIO_voidSetPortValue+0x6c>
    124a:	13 c0       	rjmp	.+38     	; 0x1272 <DIO_voidSetPortValue+0x74>
	
		case DIO_PORTA:		PORTA = Copy_u8Value;		break;
    124c:	eb e3       	ldi	r30, 0x3B	; 59
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	80 83       	st	Z, r24
    1254:	0e c0       	rjmp	.+28     	; 0x1272 <DIO_voidSetPortValue+0x74>
		case DIO_PORTB:		PORTB = Copy_u8Value;		break;
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	80 83       	st	Z, r24
    125e:	09 c0       	rjmp	.+18     	; 0x1272 <DIO_voidSetPortValue+0x74>
		case DIO_PORTC:		PORTC = Copy_u8Value;		break;
    1260:	e5 e3       	ldi	r30, 0x35	; 53
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	80 83       	st	Z, r24
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <DIO_voidSetPortValue+0x74>
		case DIO_PORTD:		PORTD = Copy_u8Value;		break;
    126a:	e2 e3       	ldi	r30, 0x32	; 50
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	80 83       	st	Z, r24
			
	}
	
}
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <DIO_voidTogglePin>:


void DIO_voidTogglePin(uint8 Copy_u8Pin){
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	0f 92       	push	r0
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	88 30       	cpi	r24, 0x08	; 8
    1290:	a0 f4       	brcc	.+40     	; 0x12ba <DIO_voidTogglePin+0x3a>

		TOG_BIT(PORTA, Copy_u8Pin);
    1292:	ab e3       	ldi	r26, 0x3B	; 59
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	eb e3       	ldi	r30, 0x3B	; 59
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_voidTogglePin+0x30>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_voidTogglePin+0x2c>
    12b4:	84 27       	eor	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	56 c0       	rjmp	.+172    	; 0x1366 <DIO_voidTogglePin+0xe6>
	}

	else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	d0 f0       	brcs	.+52     	; 0x12f4 <DIO_voidTogglePin+0x74>
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	80 31       	cpi	r24, 0x10	; 16
    12c4:	b8 f4       	brcc	.+46     	; 0x12f4 <DIO_voidTogglePin+0x74>

		TOG_BIT(PORTB, (Copy_u8Pin-8));
    12c6:	a8 e3       	ldi	r26, 0x38	; 56
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e8 e3       	ldi	r30, 0x38	; 56
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9c 01       	movw	r18, r24
    12da:	28 50       	subi	r18, 0x08	; 8
    12dc:	30 40       	sbci	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_voidTogglePin+0x6a>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_voidTogglePin+0x66>
    12ee:	84 27       	eor	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	39 c0       	rjmp	.+114    	; 0x1366 <DIO_voidTogglePin+0xe6>
	}

	else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	80 31       	cpi	r24, 0x10	; 16
    12f8:	d0 f0       	brcs	.+52     	; 0x132e <DIO_voidTogglePin+0xae>
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	88 31       	cpi	r24, 0x18	; 24
    12fe:	b8 f4       	brcc	.+46     	; 0x132e <DIO_voidTogglePin+0xae>

		TOG_BIT(PORTC, (Copy_u8Pin-16));
    1300:	a5 e3       	ldi	r26, 0x35	; 53
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e3       	ldi	r30, 0x35	; 53
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9c 01       	movw	r18, r24
    1314:	20 51       	subi	r18, 0x10	; 16
    1316:	30 40       	sbci	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_voidTogglePin+0xa4>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_voidTogglePin+0xa0>
    1328:	84 27       	eor	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	1c c0       	rjmp	.+56     	; 0x1366 <DIO_voidTogglePin+0xe6>
	}
	
	else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	88 31       	cpi	r24, 0x18	; 24
    1332:	c8 f0       	brcs	.+50     	; 0x1366 <DIO_voidTogglePin+0xe6>
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	80 32       	cpi	r24, 0x20	; 32
    1338:	b0 f4       	brcc	.+44     	; 0x1366 <DIO_voidTogglePin+0xe6>

		TOG_BIT(PORTD, (Copy_u8Pin-24));
    133a:	a2 e3       	ldi	r26, 0x32	; 50
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9c 01       	movw	r18, r24
    134e:	28 51       	subi	r18, 0x18	; 24
    1350:	30 40       	sbci	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_voidTogglePin+0xde>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_voidTogglePin+0xda>
    1362:	84 27       	eor	r24, r20
    1364:	8c 93       	st	X, r24
	}

	else{    /* return error  */   }

}
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_u8GetPortValue>:

uint8 DIO_u8GetPortValue(uint8 Copy_u8Port){
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <DIO_u8GetPortValue+0x6>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <DIO_u8GetPortValue+0x8>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Result = 0x00;
    137c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	3c 83       	std	Y+4, r19	; 0x04
    1386:	2b 83       	std	Y+3, r18	; 0x03
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	d1 f0       	breq	.+52     	; 0x13c6 <DIO_u8GetPortValue+0x58>
    1392:	2b 81       	ldd	r18, Y+3	; 0x03
    1394:	3c 81       	ldd	r19, Y+4	; 0x04
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	2c f4       	brge	.+10     	; 0x13a6 <DIO_u8GetPortValue+0x38>
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	61 f0       	breq	.+24     	; 0x13bc <DIO_u8GetPortValue+0x4e>
    13a4:	1e c0       	rjmp	.+60     	; 0x13e2 <DIO_u8GetPortValue+0x74>
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	81 f0       	breq	.+32     	; 0x13d0 <DIO_u8GetPortValue+0x62>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	91 05       	cpc	r25, r1
    13b8:	81 f0       	breq	.+32     	; 0x13da <DIO_u8GetPortValue+0x6c>
    13ba:	13 c0       	rjmp	.+38     	; 0x13e2 <DIO_u8GetPortValue+0x74>

		case DIO_PORTA:		Local_u8Result = PINA;		break;
    13bc:	e9 e3       	ldi	r30, 0x39	; 57
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	0e c0       	rjmp	.+28     	; 0x13e2 <DIO_u8GetPortValue+0x74>
		case DIO_PORTB:		Local_u8Result = PINB;		break;
    13c6:	e6 e3       	ldi	r30, 0x36	; 54
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	09 c0       	rjmp	.+18     	; 0x13e2 <DIO_u8GetPortValue+0x74>
		case DIO_PORTC:		Local_u8Result = PINC;		break;
    13d0:	e3 e3       	ldi	r30, 0x33	; 51
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <DIO_u8GetPortValue+0x74>
		case DIO_PORTD:		Local_u8Result = PIND;		break;
    13da:	e0 e3       	ldi	r30, 0x30	; 48
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8Result;
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <EXIT0_voidEnable>:

/******************************************************************************
* Description 	: External Interrupt Request 0 Enable Function.				  *
******************************************************************************/

void EXIT0_voidEnable(void){
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62

	/* External Interrupt Request 0 Enable */
	SET_BIT(GICR, INT0);
    13fa:	ab e5       	ldi	r26, 0x5B	; 91
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	eb e5       	ldi	r30, 0x5B	; 91
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 64       	ori	r24, 0x40	; 64
    1406:	8c 93       	st	X, r24
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <EXIT0_voidDisable>:

/******************************************************************************
* Description 	: External Interrupt Request 0 Disable Function.		      *
******************************************************************************/

void EXIT0_voidDisable(void){
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62

	/* External Interrupt Request 0 Disable */
	CLR_BIT(GICR, INT0);
    1416:	ab e5       	ldi	r26, 0x5B	; 91
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	eb e5       	ldi	r30, 0x5B	; 91
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 7b       	andi	r24, 0xBF	; 191
    1422:	8c 93       	st	X, r24
}
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <EXIT1_voidEnable>:

/******************************************************************************
* Description 	: External Interrupt Request 1 Enable Function.				  *
******************************************************************************/

void EXIT1_voidEnable(void){
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62

	/* External Interrupt Request 1 Enable */
	SET_BIT(GICR, INT1);
    1432:	ab e5       	ldi	r26, 0x5B	; 91
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	eb e5       	ldi	r30, 0x5B	; 91
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 68       	ori	r24, 0x80	; 128
    143e:	8c 93       	st	X, r24
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <EXIT1_voidDisable>:

/******************************************************************************
* Description 	: External Interrupt Request 1 Disable Function.		      *
******************************************************************************/

void EXIT1_voidDisable(void){
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62

	/* External Interrupt Request 1 Disable */
	CLR_BIT(GICR, INT1);
    144e:	ab e5       	ldi	r26, 0x5B	; 91
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	eb e5       	ldi	r30, 0x5B	; 91
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8f 77       	andi	r24, 0x7F	; 127
    145a:	8c 93       	st	X, r24
}
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <EXIT2_voidEnable>:

/******************************************************************************
* Description 	: External Interrupt Request 2 Enable Function.				  *
******************************************************************************/

void EXIT2_voidEnable(void){
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62

	/* External Interrupt Request 2 Enable */
	SET_BIT(GICR, INT2);
    146a:	ab e5       	ldi	r26, 0x5B	; 91
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e5       	ldi	r30, 0x5B	; 91
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 62       	ori	r24, 0x20	; 32
    1476:	8c 93       	st	X, r24
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <EXIT2_voidDisable>:

/******************************************************************************
* Description 	: External Interrupt Request 2 Disable Function.		      *
******************************************************************************/

void EXIT2_voidDisable(void){
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62

	/* External Interrupt Request 2 Disable */
	CLR_BIT(GICR, INT2);
    1486:	ab e5       	ldi	r26, 0x5B	; 91
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	eb e5       	ldi	r30, 0x5B	; 91
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8f 7d       	andi	r24, 0xDF	; 223
    1492:	8c 93       	st	X, r24
}
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <EXIT0_voidTriggerEdge>:

/******************************************************************************
* Description 	: Control the trigger edge of an EXIT0 Function.  		      *
******************************************************************************/

void EXIT0_voidTriggerEdge(EXIT_TriggerEdge_t Edge){
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <EXIT0_voidTriggerEdge+0x6>
    14a0:	0f 92       	push	r0
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	89 83       	std	Y+1, r24	; 0x01

	switch(Edge){
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3b 83       	std	Y+3, r19	; 0x03
    14b0:	2a 83       	std	Y+2, r18	; 0x02
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	9b 81       	ldd	r25, Y+3	; 0x03
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	21 f1       	breq	.+72     	; 0x1504 <EXIT0_voidTriggerEdge+0x6a>
    14bc:	2a 81       	ldd	r18, Y+2	; 0x02
    14be:	3b 81       	ldd	r19, Y+3	; 0x03
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <EXIT0_voidTriggerEdge+0x36>
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <EXIT0_voidTriggerEdge+0x4c>
    14ce:	46 c0       	rjmp	.+140    	; 0x155c <EXIT0_voidTriggerEdge+0xc2>
    14d0:	2a 81       	ldd	r18, Y+2	; 0x02
    14d2:	3b 81       	ldd	r19, Y+3	; 0x03
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	21 f1       	breq	.+72     	; 0x1522 <EXIT0_voidTriggerEdge+0x88>
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	9b 81       	ldd	r25, Y+3	; 0x03
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	71 f1       	breq	.+92     	; 0x1540 <EXIT0_voidTriggerEdge+0xa6>
    14e4:	3b c0       	rjmp	.+118    	; 0x155c <EXIT0_voidTriggerEdge+0xc2>
		
		case LOW_LEVEL :
			/* Enable EXTI0 Sense Control low level */
			CLR_BIT(MCUCR, ISC00);		CLR_BIT(MCUCR, ISC01);
    14e6:	a5 e5       	ldi	r26, 0x55	; 85
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e5 e5       	ldi	r30, 0x55	; 85
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8e 7f       	andi	r24, 0xFE	; 254
    14f2:	8c 93       	st	X, r24
    14f4:	a5 e5       	ldi	r26, 0x55	; 85
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e5       	ldi	r30, 0x55	; 85
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	8d 7f       	andi	r24, 0xFD	; 253
    1500:	8c 93       	st	X, r24
    1502:	2c c0       	rjmp	.+88     	; 0x155c <EXIT0_voidTriggerEdge+0xc2>
		break;	
		
		case ANY_CHANGE :
			/* Enable EXTI0 Sense Control any change -> rising or falling */
			SET_BIT(MCUCR, ISC00);		CLR_BIT(MCUCR, ISC01);
    1504:	a5 e5       	ldi	r26, 0x55	; 85
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e5       	ldi	r30, 0x55	; 85
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	81 60       	ori	r24, 0x01	; 1
    1510:	8c 93       	st	X, r24
    1512:	a5 e5       	ldi	r26, 0x55	; 85
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e5 e5       	ldi	r30, 0x55	; 85
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8d 7f       	andi	r24, 0xFD	; 253
    151e:	8c 93       	st	X, r24
    1520:	1d c0       	rjmp	.+58     	; 0x155c <EXIT0_voidTriggerEdge+0xc2>
		break;		
		
		case FALLING_EDGE :
			/* Enable EXTI0 Sense Control falling edge */
			CLR_BIT(MCUCR, ISC00);		SET_BIT(MCUCR, ISC01);
    1522:	a5 e5       	ldi	r26, 0x55	; 85
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e5 e5       	ldi	r30, 0x55	; 85
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8e 7f       	andi	r24, 0xFE	; 254
    152e:	8c 93       	st	X, r24
    1530:	a5 e5       	ldi	r26, 0x55	; 85
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e5       	ldi	r30, 0x55	; 85
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	82 60       	ori	r24, 0x02	; 2
    153c:	8c 93       	st	X, r24
    153e:	0e c0       	rjmp	.+28     	; 0x155c <EXIT0_voidTriggerEdge+0xc2>
		break;	
		
		case RISING_EDGE :
			/* Enable EXTI0 Sense Control rising edge */
			SET_BIT(MCUCR, ISC00);		SET_BIT(MCUCR, ISC01);
    1540:	a5 e5       	ldi	r26, 0x55	; 85
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e5 e5       	ldi	r30, 0x55	; 85
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	81 60       	ori	r24, 0x01	; 1
    154c:	8c 93       	st	X, r24
    154e:	a5 e5       	ldi	r26, 0x55	; 85
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e5 e5       	ldi	r30, 0x55	; 85
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	82 60       	ori	r24, 0x02	; 2
    155a:	8c 93       	st	X, r24
		break;	
		default:    break;	
	}	
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <EXIT1_voidTriggerEdge>:

/******************************************************************************
* Description 	: Control the trigger edge of an EXIT1 Function.  		      *
******************************************************************************/

void EXIT1_voidTriggerEdge(EXIT_TriggerEdge_t Edge){
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <EXIT1_voidTriggerEdge+0x6>
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	89 83       	std	Y+1, r24	; 0x01

	switch(Edge){
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	3b 83       	std	Y+3, r19	; 0x03
    157e:	2a 83       	std	Y+2, r18	; 0x02
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	9b 81       	ldd	r25, Y+3	; 0x03
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	21 f1       	breq	.+72     	; 0x15d2 <EXIT1_voidTriggerEdge+0x6a>
    158a:	2a 81       	ldd	r18, Y+2	; 0x02
    158c:	3b 81       	ldd	r19, Y+3	; 0x03
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <EXIT1_voidTriggerEdge+0x36>
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	9b 81       	ldd	r25, Y+3	; 0x03
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	61 f0       	breq	.+24     	; 0x15b4 <EXIT1_voidTriggerEdge+0x4c>
    159c:	46 c0       	rjmp	.+140    	; 0x162a <EXIT1_voidTriggerEdge+0xc2>
    159e:	2a 81       	ldd	r18, Y+2	; 0x02
    15a0:	3b 81       	ldd	r19, Y+3	; 0x03
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	21 f1       	breq	.+72     	; 0x15f0 <EXIT1_voidTriggerEdge+0x88>
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	9b 81       	ldd	r25, Y+3	; 0x03
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	91 05       	cpc	r25, r1
    15b0:	71 f1       	breq	.+92     	; 0x160e <EXIT1_voidTriggerEdge+0xa6>
    15b2:	3b c0       	rjmp	.+118    	; 0x162a <EXIT1_voidTriggerEdge+0xc2>
		
		case LOW_LEVEL :

			/* Enable EXTI1 Sense Control low level */
			CLR_BIT(MCUCR, ISC10);
    15b4:	a5 e5       	ldi	r26, 0x55	; 85
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e5       	ldi	r30, 0x55	; 85
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8b 7f       	andi	r24, 0xFB	; 251
    15c0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC11);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	87 7f       	andi	r24, 0xF7	; 247
    15ce:	8c 93       	st	X, r24
    15d0:	2c c0       	rjmp	.+88     	; 0x162a <EXIT1_voidTriggerEdge+0xc2>
		break;	
		
		case ANY_CHANGE :
		
			/* Enable EXTI1 Sense Control any change -> rising or falling */
			SET_BIT(MCUCR, ISC10);
    15d2:	a5 e5       	ldi	r26, 0x55	; 85
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e5 e5       	ldi	r30, 0x55	; 85
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	84 60       	ori	r24, 0x04	; 4
    15de:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, ISC11);
    15e0:	a5 e5       	ldi	r26, 0x55	; 85
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e5 e5       	ldi	r30, 0x55	; 85
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	87 7f       	andi	r24, 0xF7	; 247
    15ec:	8c 93       	st	X, r24
    15ee:	1d c0       	rjmp	.+58     	; 0x162a <EXIT1_voidTriggerEdge+0xc2>
		break;		
		
		case FALLING_EDGE :
		
			/* Enable EXTI1 Sense Control falling edge */
			CLR_BIT(MCUCR, ISC10);
    15f0:	a5 e5       	ldi	r26, 0x55	; 85
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e5 e5       	ldi	r30, 0x55	; 85
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8b 7f       	andi	r24, 0xFB	; 251
    15fc:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC11);
    15fe:	a5 e5       	ldi	r26, 0x55	; 85
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e5       	ldi	r30, 0x55	; 85
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	88 60       	ori	r24, 0x08	; 8
    160a:	8c 93       	st	X, r24
    160c:	0e c0       	rjmp	.+28     	; 0x162a <EXIT1_voidTriggerEdge+0xc2>
		break;	
		
		case RISING_EDGE :
		
			/* Enable EXTI1 Sense Control rising edge */
			SET_BIT(MCUCR, ISC10);
    160e:	a5 e5       	ldi	r26, 0x55	; 85
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e5 e5       	ldi	r30, 0x55	; 85
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	84 60       	ori	r24, 0x04	; 4
    161a:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC11);
    161c:	a5 e5       	ldi	r26, 0x55	; 85
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e5 e5       	ldi	r30, 0x55	; 85
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	88 60       	ori	r24, 0x08	; 8
    1628:	8c 93       	st	X, r24
			
		break;	
		
		default:    break;	
	}
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <EXIT2_voidTriggerEdge>:

/******************************************************************************
* Description 	: Control the trigger edge of an EXIT2 Function.  		      *
******************************************************************************/

void EXIT2_voidTriggerEdge(EXIT_TriggerEdge_t Edge){
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <EXIT2_voidTriggerEdge+0x6>
    163c:	0f 92       	push	r0
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	89 83       	std	Y+1, r24	; 0x01
	
	switch(Edge){
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	3b 83       	std	Y+3, r19	; 0x03
    164c:	2a 83       	std	Y+2, r18	; 0x02
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	9b 81       	ldd	r25, Y+3	; 0x03
    1652:	82 30       	cpi	r24, 0x02	; 2
    1654:	91 05       	cpc	r25, r1
    1656:	31 f0       	breq	.+12     	; 0x1664 <EXIT2_voidTriggerEdge+0x2e>
    1658:	2a 81       	ldd	r18, Y+2	; 0x02
    165a:	3b 81       	ldd	r19, Y+3	; 0x03
    165c:	23 30       	cpi	r18, 0x03	; 3
    165e:	31 05       	cpc	r19, r1
    1660:	49 f0       	breq	.+18     	; 0x1674 <EXIT2_voidTriggerEdge+0x3e>
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <EXIT2_voidTriggerEdge+0x4c>
		
		/* Enable EXTI2 Sense Control falling edge */
		case FALLING_EDGE :	   CLR_BIT(MCUCSR, ISC2);    break;
    1664:	a4 e5       	ldi	r26, 0x54	; 84
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e4 e5       	ldi	r30, 0x54	; 84
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8f 7b       	andi	r24, 0xBF	; 191
    1670:	8c 93       	st	X, r24
    1672:	07 c0       	rjmp	.+14     	; 0x1682 <EXIT2_voidTriggerEdge+0x4c>
		/* Enable EXTI2 Sense Control rising edge */
		case RISING_EDGE  :	   SET_BIT(MCUCSR, ISC2);    break;
    1674:	a4 e5       	ldi	r26, 0x54	; 84
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e4 e5       	ldi	r30, 0x54	; 84
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	80 64       	ori	r24, 0x40	; 64
    1680:	8c 93       	st	X, r24
		default:     break;
	}	
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <EXTI0_voidSetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function EXTI0) -                        *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void EXTI0_voidSetCallBack(void(*Local_ptr)(void)){
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	00 d0       	rcall	.+0      	; 0x1694 <EXTI0_voidSetCallBack+0x6>
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	9a 83       	std	Y+2, r25	; 0x02
    169a:	89 83       	std	Y+1, r24	; 0x01

	EXTI0_CallBack = Local_ptr;
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	9a 81       	ldd	r25, Y+2	; 0x02
    16a0:	90 93 c3 01 	sts	0x01C3, r25
    16a4:	80 93 c2 01 	sts	0x01C2, r24

}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <EXTI1_voidSetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function EXTI1) -                        *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void EXTI1_voidSetCallBack(void(*Local_ptr)(void)){
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <EXTI1_voidSetCallBack+0x6>
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	89 83       	std	Y+1, r24	; 0x01

	EXTI1_CallBack = Local_ptr;
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	90 93 c5 01 	sts	0x01C5, r25
    16c8:	80 93 c4 01 	sts	0x01C4, r24

}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <EXTI2_voidSetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer( The Callback function EXTI2) -                       *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void EXTI2_voidSetCallBack(void(*Local_ptr)(void)){
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <EXTI2_voidSetCallBack+0x6>
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01

	EXTI2_CallBack = Local_ptr;
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	90 93 c7 01 	sts	0x01C7, r25
    16ec:	80 93 c6 01 	sts	0x01C6, r24

}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <__vector_1>:

/******************************************************************************
* !comment  :  ISR Function EXTI0.  							 			  *
******************************************************************************/

ISR( INT0_VECTOR ){
    16fa:	1f 92       	push	r1
    16fc:	0f 92       	push	r0
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	0f 92       	push	r0
    1702:	11 24       	eor	r1, r1
    1704:	2f 93       	push	r18
    1706:	3f 93       	push	r19
    1708:	4f 93       	push	r20
    170a:	5f 93       	push	r21
    170c:	6f 93       	push	r22
    170e:	7f 93       	push	r23
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	af 93       	push	r26
    1716:	bf 93       	push	r27
    1718:	ef 93       	push	r30
    171a:	ff 93       	push	r31
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62

	if(EXTI0_CallBack != NULL){
    1724:	80 91 c2 01 	lds	r24, 0x01C2
    1728:	90 91 c3 01 	lds	r25, 0x01C3
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	29 f0       	breq	.+10     	; 0x173a <__vector_1+0x40>

		EXTI0_CallBack();
    1730:	e0 91 c2 01 	lds	r30, 0x01C2
    1734:	f0 91 c3 01 	lds	r31, 0x01C3
    1738:	09 95       	icall
	}

	else{ /* Return error */ }
}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	ff 91       	pop	r31
    1740:	ef 91       	pop	r30
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	7f 91       	pop	r23
    174c:	6f 91       	pop	r22
    174e:	5f 91       	pop	r21
    1750:	4f 91       	pop	r20
    1752:	3f 91       	pop	r19
    1754:	2f 91       	pop	r18
    1756:	0f 90       	pop	r0
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	0f 90       	pop	r0
    175c:	1f 90       	pop	r1
    175e:	18 95       	reti

00001760 <__vector_2>:

/******************************************************************************
* !comment  :  ISR Function EXTI1.  							 			  *
******************************************************************************/

ISR( INT1_VECTOR ){
    1760:	1f 92       	push	r1
    1762:	0f 92       	push	r0
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	0f 92       	push	r0
    1768:	11 24       	eor	r1, r1
    176a:	2f 93       	push	r18
    176c:	3f 93       	push	r19
    176e:	4f 93       	push	r20
    1770:	5f 93       	push	r21
    1772:	6f 93       	push	r22
    1774:	7f 93       	push	r23
    1776:	8f 93       	push	r24
    1778:	9f 93       	push	r25
    177a:	af 93       	push	r26
    177c:	bf 93       	push	r27
    177e:	ef 93       	push	r30
    1780:	ff 93       	push	r31
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
  
	if(EXTI1_CallBack != NULL){
    178a:	80 91 c4 01 	lds	r24, 0x01C4
    178e:	90 91 c5 01 	lds	r25, 0x01C5
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	29 f0       	breq	.+10     	; 0x17a0 <__vector_2+0x40>

		EXTI1_CallBack();
    1796:	e0 91 c4 01 	lds	r30, 0x01C4
    179a:	f0 91 c5 01 	lds	r31, 0x01C5
    179e:	09 95       	icall
	}

	else{ /* Return error */ }

}
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	ff 91       	pop	r31
    17a6:	ef 91       	pop	r30
    17a8:	bf 91       	pop	r27
    17aa:	af 91       	pop	r26
    17ac:	9f 91       	pop	r25
    17ae:	8f 91       	pop	r24
    17b0:	7f 91       	pop	r23
    17b2:	6f 91       	pop	r22
    17b4:	5f 91       	pop	r21
    17b6:	4f 91       	pop	r20
    17b8:	3f 91       	pop	r19
    17ba:	2f 91       	pop	r18
    17bc:	0f 90       	pop	r0
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	0f 90       	pop	r0
    17c2:	1f 90       	pop	r1
    17c4:	18 95       	reti

000017c6 <__vector_3>:

/******************************************************************************
* !comment  :  ISR Function EXTI2.  							 			  *   
******************************************************************************/

ISR( INT2_VECTOR ){
    17c6:	1f 92       	push	r1
    17c8:	0f 92       	push	r0
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	0f 92       	push	r0
    17ce:	11 24       	eor	r1, r1
    17d0:	2f 93       	push	r18
    17d2:	3f 93       	push	r19
    17d4:	4f 93       	push	r20
    17d6:	5f 93       	push	r21
    17d8:	6f 93       	push	r22
    17da:	7f 93       	push	r23
    17dc:	8f 93       	push	r24
    17de:	9f 93       	push	r25
    17e0:	af 93       	push	r26
    17e2:	bf 93       	push	r27
    17e4:	ef 93       	push	r30
    17e6:	ff 93       	push	r31
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62

	if(EXTI2_CallBack != NULL){
    17f0:	80 91 c6 01 	lds	r24, 0x01C6
    17f4:	90 91 c7 01 	lds	r25, 0x01C7
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	29 f0       	breq	.+10     	; 0x1806 <__vector_3+0x40>

		EXTI2_CallBack();
    17fc:	e0 91 c6 01 	lds	r30, 0x01C6
    1800:	f0 91 c7 01 	lds	r31, 0x01C7
    1804:	09 95       	icall
	}

	else{ /* Return error */ }
}
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	ff 91       	pop	r31
    180c:	ef 91       	pop	r30
    180e:	bf 91       	pop	r27
    1810:	af 91       	pop	r26
    1812:	9f 91       	pop	r25
    1814:	8f 91       	pop	r24
    1816:	7f 91       	pop	r23
    1818:	6f 91       	pop	r22
    181a:	5f 91       	pop	r21
    181c:	4f 91       	pop	r20
    181e:	3f 91       	pop	r19
    1820:	2f 91       	pop	r18
    1822:	0f 90       	pop	r0
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	0f 90       	pop	r0
    1828:	1f 90       	pop	r1
    182a:	18 95       	reti

0000182c <GIE_voidEnable>:

/******************************************************************************
* Description : Global Interrupt Enable (GIE) Function.		                  *
******************************************************************************/

void GIE_voidEnable(void){
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62

	/* Enable global interrupt */
	SET_BIT(SREG, GIE);
    1834:	af e5       	ldi	r26, 0x5F	; 95
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	ef e5       	ldi	r30, 0x5F	; 95
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	80 68       	ori	r24, 0x80	; 128
    1840:	8c 93       	st	X, r24
	
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <GIE_voidDisable>:

/******************************************************************************
* Description : Global Interrupt Disable (GIE) Function.		              *
******************************************************************************/

void GIE_voidDisable(void){
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62

	/* Disable global interrupt */
	CLR_BIT(SREG, GIE);
    1850:	af e5       	ldi	r26, 0x5F	; 95
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	ef e5       	ldi	r30, 0x5F	; 95
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	8f 77       	andi	r24, 0x7F	; 127
    185c:	8c 93       	st	X, r24
	
}
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <LCD_voidWriteData>:

/******************************************************************************
* Description 	: LCD Display Char on LCD Function.						      *
******************************************************************************/

void LCD_voidWriteData(uint8 Copy_u8Data){
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	6d 97       	sbiw	r28, 0x1d	; 29
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidSetPinValue(LCD_RS_PIN, DIO_HIGH);
    187a:	80 e1       	ldi	r24, 0x10	; 16
    187c:	61 e0       	ldi	r22, 0x01	; 1
    187e:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_RW_PIN, DIO_LOW );
    1882:	81 e1       	ldi	r24, 0x11	; 17
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>

	if(LCD_MODE == MODE_8_BIT){
		
		DIO_voidSetPortValue(LCD_PORT_DATA, Copy_u8Data);
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    188e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(LCD_EN_PIN, DIO_HIGH);
    1892:	82 e1       	ldi	r24, 0x12	; 18
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a0 e8       	ldi	r26, 0x80	; 128
    18a0:	bf e3       	ldi	r27, 0x3F	; 63
    18a2:	89 8f       	std	Y+25, r24	; 0x19
    18a4:	9a 8f       	std	Y+26, r25	; 0x1a
    18a6:	ab 8f       	std	Y+27, r26	; 0x1b
    18a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18aa:	69 8d       	ldd	r22, Y+25	; 0x19
    18ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a ef       	ldi	r20, 0xFA	; 250
    18b8:	54 e4       	ldi	r21, 0x44	; 68
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	8d 8b       	std	Y+21, r24	; 0x15
    18c4:	9e 8b       	std	Y+22, r25	; 0x16
    18c6:	af 8b       	std	Y+23, r26	; 0x17
    18c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18ca:	6d 89       	ldd	r22, Y+21	; 0x15
    18cc:	7e 89       	ldd	r23, Y+22	; 0x16
    18ce:	8f 89       	ldd	r24, Y+23	; 0x17
    18d0:	98 8d       	ldd	r25, Y+24	; 0x18
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	5f e3       	ldi	r21, 0x3F	; 63
    18da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18de:	88 23       	and	r24, r24
    18e0:	2c f4       	brge	.+10     	; 0x18ec <LCD_voidWriteData+0x88>
		__ticks = 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9c 8b       	std	Y+20, r25	; 0x14
    18e8:	8b 8b       	std	Y+19, r24	; 0x13
    18ea:	3f c0       	rjmp	.+126    	; 0x196a <LCD_voidWriteData+0x106>
	else if (__tmp > 65535)
    18ec:	6d 89       	ldd	r22, Y+21	; 0x15
    18ee:	7e 89       	ldd	r23, Y+22	; 0x16
    18f0:	8f 89       	ldd	r24, Y+23	; 0x17
    18f2:	98 8d       	ldd	r25, Y+24	; 0x18
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	3f ef       	ldi	r19, 0xFF	; 255
    18f8:	4f e7       	ldi	r20, 0x7F	; 127
    18fa:	57 e4       	ldi	r21, 0x47	; 71
    18fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1900:	18 16       	cp	r1, r24
    1902:	4c f5       	brge	.+82     	; 0x1956 <LCD_voidWriteData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1904:	69 8d       	ldd	r22, Y+25	; 0x19
    1906:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1908:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e2       	ldi	r20, 0x20	; 32
    1912:	51 e4       	ldi	r21, 0x41	; 65
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
    192c:	0f c0       	rjmp	.+30     	; 0x194c <LCD_voidWriteData+0xe8>
    192e:	88 ec       	ldi	r24, 0xC8	; 200
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9a 8b       	std	Y+18, r25	; 0x12
    1934:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1936:	89 89       	ldd	r24, Y+17	; 0x11
    1938:	9a 89       	ldd	r25, Y+18	; 0x12
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_voidWriteData+0xd6>
    193e:	9a 8b       	std	Y+18, r25	; 0x12
    1940:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1942:	8b 89       	ldd	r24, Y+19	; 0x13
    1944:	9c 89       	ldd	r25, Y+20	; 0x14
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	9c 8b       	std	Y+20, r25	; 0x14
    194a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194c:	8b 89       	ldd	r24, Y+19	; 0x13
    194e:	9c 89       	ldd	r25, Y+20	; 0x14
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	69 f7       	brne	.-38     	; 0x192e <LCD_voidWriteData+0xca>
    1954:	14 c0       	rjmp	.+40     	; 0x197e <LCD_voidWriteData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1956:	6d 89       	ldd	r22, Y+21	; 0x15
    1958:	7e 89       	ldd	r23, Y+22	; 0x16
    195a:	8f 89       	ldd	r24, Y+23	; 0x17
    195c:	98 8d       	ldd	r25, Y+24	; 0x18
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
    196a:	8b 89       	ldd	r24, Y+19	; 0x13
    196c:	9c 89       	ldd	r25, Y+20	; 0x14
    196e:	98 8b       	std	Y+16, r25	; 0x10
    1970:	8f 87       	std	Y+15, r24	; 0x0f
    1972:	8f 85       	ldd	r24, Y+15	; 0x0f
    1974:	98 89       	ldd	r25, Y+16	; 0x10
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <LCD_voidWriteData+0x112>
    197a:	98 8b       	std	Y+16, r25	; 0x10
    197c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		
		DIO_voidSetPinValue(LCD_EN_PIN, DIO_LOW);
    197e:	82 e1       	ldi	r24, 0x12	; 18
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a0 e8       	ldi	r26, 0x80	; 128
    198c:	bf e3       	ldi	r27, 0x3F	; 63
    198e:	8b 87       	std	Y+11, r24	; 0x0b
    1990:	9c 87       	std	Y+12, r25	; 0x0c
    1992:	ad 87       	std	Y+13, r26	; 0x0d
    1994:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1996:	6b 85       	ldd	r22, Y+11	; 0x0b
    1998:	7c 85       	ldd	r23, Y+12	; 0x0c
    199a:	8d 85       	ldd	r24, Y+13	; 0x0d
    199c:	9e 85       	ldd	r25, Y+14	; 0x0e
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	4a ef       	ldi	r20, 0xFA	; 250
    19a4:	54 e4       	ldi	r21, 0x44	; 68
    19a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	8f 83       	std	Y+7, r24	; 0x07
    19b0:	98 87       	std	Y+8, r25	; 0x08
    19b2:	a9 87       	std	Y+9, r26	; 0x09
    19b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b6:	6f 81       	ldd	r22, Y+7	; 0x07
    19b8:	78 85       	ldd	r23, Y+8	; 0x08
    19ba:	89 85       	ldd	r24, Y+9	; 0x09
    19bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ca:	88 23       	and	r24, r24
    19cc:	2c f4       	brge	.+10     	; 0x19d8 <LCD_voidWriteData+0x174>
		__ticks = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
    19d6:	3f c0       	rjmp	.+126    	; 0x1a56 <LCD_voidWriteData+0x1f2>
	else if (__tmp > 65535)
    19d8:	6f 81       	ldd	r22, Y+7	; 0x07
    19da:	78 85       	ldd	r23, Y+8	; 0x08
    19dc:	89 85       	ldd	r24, Y+9	; 0x09
    19de:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	3f ef       	ldi	r19, 0xFF	; 255
    19e4:	4f e7       	ldi	r20, 0x7F	; 127
    19e6:	57 e4       	ldi	r21, 0x47	; 71
    19e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ec:	18 16       	cp	r1, r24
    19ee:	4c f5       	brge	.+82     	; 0x1a42 <LCD_voidWriteData+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e2       	ldi	r20, 0x20	; 32
    19fe:	51 e4       	ldi	r21, 0x41	; 65
    1a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    1a18:	0f c0       	rjmp	.+30     	; 0x1a38 <LCD_voidWriteData+0x1d4>
    1a1a:	88 ec       	ldi	r24, 0xC8	; 200
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
    1a20:	8b 83       	std	Y+3, r24	; 0x03
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_voidWriteData+0x1c2>
    1a2a:	9c 83       	std	Y+4, r25	; 0x04
    1a2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	9e 83       	std	Y+6, r25	; 0x06
    1a36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	69 f7       	brne	.-38     	; 0x1a1a <LCD_voidWriteData+0x1b6>
    1a40:	14 c0       	rjmp	.+40     	; 0x1a6a <LCD_voidWriteData+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a42:	6f 81       	ldd	r22, Y+7	; 0x07
    1a44:	78 85       	ldd	r23, Y+8	; 0x08
    1a46:	89 85       	ldd	r24, Y+9	; 0x09
    1a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	9e 83       	std	Y+6, r25	; 0x06
    1a54:	8d 83       	std	Y+5, r24	; 0x05
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_voidWriteData+0x1fe>
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
		
	}	
	
	else{  /* return error */  }
		
}
    1a6a:	6d 96       	adiw	r28, 0x1d	; 29
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <LCD_voidSendCommand>:

/******************************************************************************
* Description 	: LCD Send Command Function.						          *
******************************************************************************/

void LCD_voidSendCommand(uint8 Copy_u8Command){
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	6d 97       	sbiw	r28, 0x1d	; 29
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidSetPinValue (LCD_RS_PIN, DIO_LOW);
    1a92:	80 e1       	ldi	r24, 0x10	; 16
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_RW_PIN, DIO_LOW);
    1a9a:	81 e1       	ldi	r24, 0x11	; 17
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
	
	if(LCD_MODE == MODE_8_BIT){
		
		DIO_voidSetPortValue(LCD_PORT_DATA, Copy_u8Command);
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1aa6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(LCD_EN_PIN, DIO_HIGH);
    1aaa:	82 e1       	ldi	r24, 0x12	; 18
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a0 e8       	ldi	r26, 0x80	; 128
    1ab8:	bf e3       	ldi	r27, 0x3F	; 63
    1aba:	89 8f       	std	Y+25, r24	; 0x19
    1abc:	9a 8f       	std	Y+26, r25	; 0x1a
    1abe:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	4a ef       	ldi	r20, 0xFA	; 250
    1ad0:	54 e4       	ldi	r21, 0x44	; 68
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	8d 8b       	std	Y+21, r24	; 0x15
    1adc:	9e 8b       	std	Y+22, r25	; 0x16
    1ade:	af 8b       	std	Y+23, r26	; 0x17
    1ae0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <LCD_voidSendCommand+0x88>
		__ticks = 1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9c 8b       	std	Y+20, r25	; 0x14
    1b00:	8b 8b       	std	Y+19, r24	; 0x13
    1b02:	3f c0       	rjmp	.+126    	; 0x1b82 <LCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    1b04:	6d 89       	ldd	r22, Y+21	; 0x15
    1b06:	7e 89       	ldd	r23, Y+22	; 0x16
    1b08:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	3f ef       	ldi	r19, 0xFF	; 255
    1b10:	4f e7       	ldi	r20, 0x7F	; 127
    1b12:	57 e4       	ldi	r21, 0x47	; 71
    1b14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b18:	18 16       	cp	r1, r24
    1b1a:	4c f5       	brge	.+82     	; 0x1b6e <LCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e2       	ldi	r20, 0x20	; 32
    1b2a:	51 e4       	ldi	r21, 0x41	; 65
    1b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9c 8b       	std	Y+20, r25	; 0x14
    1b42:	8b 8b       	std	Y+19, r24	; 0x13
    1b44:	0f c0       	rjmp	.+30     	; 0x1b64 <LCD_voidSendCommand+0xe8>
    1b46:	88 ec       	ldi	r24, 0xC8	; 200
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9a 8b       	std	Y+18, r25	; 0x12
    1b4c:	89 8b       	std	Y+17, r24	; 0x11
    1b4e:	89 89       	ldd	r24, Y+17	; 0x11
    1b50:	9a 89       	ldd	r25, Y+18	; 0x12
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_voidSendCommand+0xd6>
    1b56:	9a 8b       	std	Y+18, r25	; 0x12
    1b58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	9c 8b       	std	Y+20, r25	; 0x14
    1b62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b64:	8b 89       	ldd	r24, Y+19	; 0x13
    1b66:	9c 89       	ldd	r25, Y+20	; 0x14
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	69 f7       	brne	.-38     	; 0x1b46 <LCD_voidSendCommand+0xca>
    1b6c:	14 c0       	rjmp	.+40     	; 0x1b96 <LCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b70:	7e 89       	ldd	r23, Y+22	; 0x16
    1b72:	8f 89       	ldd	r24, Y+23	; 0x17
    1b74:	98 8d       	ldd	r25, Y+24	; 0x18
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9c 8b       	std	Y+20, r25	; 0x14
    1b80:	8b 8b       	std	Y+19, r24	; 0x13
    1b82:	8b 89       	ldd	r24, Y+19	; 0x13
    1b84:	9c 89       	ldd	r25, Y+20	; 0x14
    1b86:	98 8b       	std	Y+16, r25	; 0x10
    1b88:	8f 87       	std	Y+15, r24	; 0x0f
    1b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8c:	98 89       	ldd	r25, Y+16	; 0x10
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <LCD_voidSendCommand+0x112>
    1b92:	98 8b       	std	Y+16, r25	; 0x10
    1b94:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		
		DIO_voidSetPinValue(LCD_EN_PIN, DIO_LOW);
    1b96:	82 e1       	ldi	r24, 0x12	; 18
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a0 e8       	ldi	r26, 0x80	; 128
    1ba4:	bf e3       	ldi	r27, 0x3F	; 63
    1ba6:	8b 87       	std	Y+11, r24	; 0x0b
    1ba8:	9c 87       	std	Y+12, r25	; 0x0c
    1baa:	ad 87       	std	Y+13, r26	; 0x0d
    1bac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	4a ef       	ldi	r20, 0xFA	; 250
    1bbc:	54 e4       	ldi	r21, 0x44	; 68
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8f 83       	std	Y+7, r24	; 0x07
    1bc8:	98 87       	std	Y+8, r25	; 0x08
    1bca:	a9 87       	std	Y+9, r26	; 0x09
    1bcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bce:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd0:	78 85       	ldd	r23, Y+8	; 0x08
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <LCD_voidSendCommand+0x174>
		__ticks = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9e 83       	std	Y+6, r25	; 0x06
    1bec:	8d 83       	std	Y+5, r24	; 0x05
    1bee:	3f c0       	rjmp	.+126    	; 0x1c6e <LCD_voidSendCommand+0x1f2>
	else if (__tmp > 65535)
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	3f ef       	ldi	r19, 0xFF	; 255
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	57 e4       	ldi	r21, 0x47	; 71
    1c00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	4c f5       	brge	.+82     	; 0x1c5a <LCD_voidSendCommand+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	51 e4       	ldi	r21, 0x41	; 65
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	0f c0       	rjmp	.+30     	; 0x1c50 <LCD_voidSendCommand+0x1d4>
    1c32:	88 ec       	ldi	r24, 0xC8	; 200
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	8b 83       	std	Y+3, r24	; 0x03
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <LCD_voidSendCommand+0x1c2>
    1c42:	9c 83       	std	Y+4, r25	; 0x04
    1c44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
    1c48:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	69 f7       	brne	.-38     	; 0x1c32 <LCD_voidSendCommand+0x1b6>
    1c58:	14 c0       	rjmp	.+40     	; 0x1c82 <LCD_voidSendCommand+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5c:	78 85       	ldd	r23, Y+8	; 0x08
    1c5e:	89 85       	ldd	r24, Y+9	; 0x09
    1c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9e 83       	std	Y+6, r25	; 0x06
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_voidSendCommand+0x1fe>
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01
		
	}	
	
	else{  /* return error */  }

}
    1c82:	6d 96       	adiw	r28, 0x1d	; 29
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <LCD_voidInit>:

/******************************************************************************
* Description 	: LCD Initialization Function.						          *
******************************************************************************/

void LCD_voidInit(void){
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	e8 97       	sbiw	r28, 0x38	; 56
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61

	/* set port data as output */
	DIO_voidSetPortDirection(LCD_PORT_DATA, 0xFF);
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	6f ef       	ldi	r22, 0xFF	; 255
    1cac:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_voidSetPortDirection>
		
	/* set RS, RW, EN pins  as output */
	DIO_voidSetPinDirection(LCD_RS_PIN, DIO_OUTPUT);
    1cb0:	80 e1       	ldi	r24, 0x10	; 16
    1cb2:	61 e0       	ldi	r22, 0x01	; 1
    1cb4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PIN, DIO_OUTPUT);
    1cb8:	81 e1       	ldi	r24, 0x11	; 17
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_EN_PIN, DIO_OUTPUT);
    1cc0:	82 e1       	ldi	r24, 0x12	; 18
    1cc2:	61 e0       	ldi	r22, 0x01	; 1
    1cc4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
		
	/* Init data port & EN by zero */
	DIO_voidSetPortValue(LCD_PORT_DATA, DIO_LOW);
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_EN_PIN, DIO_LOW);
    1cd0:	82 e1       	ldi	r24, 0x12	; 18
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 ef       	ldi	r26, 0xF0	; 240
    1cde:	b1 e4       	ldi	r27, 0x41	; 65
    1ce0:	8d ab       	std	Y+53, r24	; 0x35
    1ce2:	9e ab       	std	Y+54, r25	; 0x36
    1ce4:	af ab       	std	Y+55, r26	; 0x37
    1ce6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cea:	7e a9       	ldd	r23, Y+54	; 0x36
    1cec:	8f a9       	ldd	r24, Y+55	; 0x37
    1cee:	98 ad       	ldd	r25, Y+56	; 0x38
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a ef       	ldi	r20, 0xFA	; 250
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	89 ab       	std	Y+49, r24	; 0x31
    1d02:	9a ab       	std	Y+50, r25	; 0x32
    1d04:	ab ab       	std	Y+51, r26	; 0x33
    1d06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d08:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <LCD_voidInit+0x96>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	98 ab       	std	Y+48, r25	; 0x30
    1d26:	8f a7       	std	Y+47, r24	; 0x2f
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <LCD_voidInit+0x114>
	else if (__tmp > 65535)
    1d2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d30:	9c a9       	ldd	r25, Y+52	; 0x34
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <LCD_voidInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	6d a9       	ldd	r22, Y+53	; 0x35
    1d44:	7e a9       	ldd	r23, Y+54	; 0x36
    1d46:	8f a9       	ldd	r24, Y+55	; 0x37
    1d48:	98 ad       	ldd	r25, Y+56	; 0x38
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	98 ab       	std	Y+48, r25	; 0x30
    1d68:	8f a7       	std	Y+47, r24	; 0x2f
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <LCD_voidInit+0xf6>
    1d6c:	88 ec       	ldi	r24, 0xC8	; 200
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9e a7       	std	Y+46, r25	; 0x2e
    1d72:	8d a7       	std	Y+45, r24	; 0x2d
    1d74:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d76:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_voidInit+0xe4>
    1d7c:	9e a7       	std	Y+46, r25	; 0x2e
    1d7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d82:	98 a9       	ldd	r25, Y+48	; 0x30
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	98 ab       	std	Y+48, r25	; 0x30
    1d88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <LCD_voidInit+0xd8>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <LCD_voidInit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	69 a9       	ldd	r22, Y+49	; 0x31
    1d96:	7a a9       	ldd	r23, Y+50	; 0x32
    1d98:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	98 ab       	std	Y+48, r25	; 0x30
    1da6:	8f a7       	std	Y+47, r24	; 0x2f
    1da8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1daa:	98 a9       	ldd	r25, Y+48	; 0x30
    1dac:	9c a7       	std	Y+44, r25	; 0x2c
    1dae:	8b a7       	std	Y+43, r24	; 0x2b
    1db0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_voidInit+0x120>
    1db8:	9c a7       	std	Y+44, r25	; 0x2c
    1dba:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(30);

	
	#if LCD_MODE == MODE_8_BIT

		LCD_voidSendCommand(FUNCTION_SET);
    1dbc:	88 e3       	ldi	r24, 0x38	; 56
    1dbe:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendCommand>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e8       	ldi	r26, 0x80	; 128
    1dc8:	bf e3       	ldi	r27, 0x3F	; 63
    1dca:	8f a3       	std	Y+39, r24	; 0x27
    1dcc:	98 a7       	std	Y+40, r25	; 0x28
    1dce:	a9 a7       	std	Y+41, r26	; 0x29
    1dd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	4a ef       	ldi	r20, 0xFA	; 250
    1de0:	54 e4       	ldi	r21, 0x44	; 68
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8b a3       	std	Y+35, r24	; 0x23
    1dec:	9c a3       	std	Y+36, r25	; 0x24
    1dee:	ad a3       	std	Y+37, r26	; 0x25
    1df0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1df2:	6b a1       	ldd	r22, Y+35	; 0x23
    1df4:	7c a1       	ldd	r23, Y+36	; 0x24
    1df6:	8d a1       	ldd	r24, Y+37	; 0x25
    1df8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <LCD_voidInit+0x180>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9a a3       	std	Y+34, r25	; 0x22
    1e10:	89 a3       	std	Y+33, r24	; 0x21
    1e12:	3f c0       	rjmp	.+126    	; 0x1e92 <LCD_voidInit+0x1fe>
	else if (__tmp > 65535)
    1e14:	6b a1       	ldd	r22, Y+35	; 0x23
    1e16:	7c a1       	ldd	r23, Y+36	; 0x24
    1e18:	8d a1       	ldd	r24, Y+37	; 0x25
    1e1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	3f ef       	ldi	r19, 0xFF	; 255
    1e20:	4f e7       	ldi	r20, 0x7F	; 127
    1e22:	57 e4       	ldi	r21, 0x47	; 71
    1e24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e28:	18 16       	cp	r1, r24
    1e2a:	4c f5       	brge	.+82     	; 0x1e7e <LCD_voidInit+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e30:	89 a5       	ldd	r24, Y+41	; 0x29
    1e32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e2       	ldi	r20, 0x20	; 32
    1e3a:	51 e4       	ldi	r21, 0x41	; 65
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9a a3       	std	Y+34, r25	; 0x22
    1e52:	89 a3       	std	Y+33, r24	; 0x21
    1e54:	0f c0       	rjmp	.+30     	; 0x1e74 <LCD_voidInit+0x1e0>
    1e56:	88 ec       	ldi	r24, 0xC8	; 200
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	98 a3       	std	Y+32, r25	; 0x20
    1e5c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e60:	98 a1       	ldd	r25, Y+32	; 0x20
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LCD_voidInit+0x1ce>
    1e66:	98 a3       	std	Y+32, r25	; 0x20
    1e68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	9a a3       	std	Y+34, r25	; 0x22
    1e72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e74:	89 a1       	ldd	r24, Y+33	; 0x21
    1e76:	9a a1       	ldd	r25, Y+34	; 0x22
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	69 f7       	brne	.-38     	; 0x1e56 <LCD_voidInit+0x1c2>
    1e7c:	14 c0       	rjmp	.+40     	; 0x1ea6 <LCD_voidInit+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e80:	7c a1       	ldd	r23, Y+36	; 0x24
    1e82:	8d a1       	ldd	r24, Y+37	; 0x25
    1e84:	9e a1       	ldd	r25, Y+38	; 0x26
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9a a3       	std	Y+34, r25	; 0x22
    1e90:	89 a3       	std	Y+33, r24	; 0x21
    1e92:	89 a1       	ldd	r24, Y+33	; 0x21
    1e94:	9a a1       	ldd	r25, Y+34	; 0x22
    1e96:	9e 8f       	std	Y+30, r25	; 0x1e
    1e98:	8d 8f       	std	Y+29, r24	; 0x1d
    1e9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <LCD_voidInit+0x20a>
    1ea2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		LCD_voidSendCommand(DISPLAY_ON_OFF);
    1ea6:	8e e0       	ldi	r24, 0x0E	; 14
    1ea8:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendCommand>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a0 e8       	ldi	r26, 0x80	; 128
    1eb2:	bf e3       	ldi	r27, 0x3F	; 63
    1eb4:	89 8f       	std	Y+25, r24	; 0x19
    1eb6:	9a 8f       	std	Y+26, r25	; 0x1a
    1eb8:	ab 8f       	std	Y+27, r26	; 0x1b
    1eba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ebe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a ef       	ldi	r20, 0xFA	; 250
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8d 8b       	std	Y+21, r24	; 0x15
    1ed6:	9e 8b       	std	Y+22, r25	; 0x16
    1ed8:	af 8b       	std	Y+23, r26	; 0x17
    1eda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1edc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ede:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <LCD_voidInit+0x26a>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9c 8b       	std	Y+20, r25	; 0x14
    1efa:	8b 8b       	std	Y+19, r24	; 0x13
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <LCD_voidInit+0x2e8>
	else if (__tmp > 65535)
    1efe:	6d 89       	ldd	r22, Y+21	; 0x15
    1f00:	7e 89       	ldd	r23, Y+22	; 0x16
    1f02:	8f 89       	ldd	r24, Y+23	; 0x17
    1f04:	98 8d       	ldd	r25, Y+24	; 0x18
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <LCD_voidInit+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	69 8d       	ldd	r22, Y+25	; 0x19
    1f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9c 8b       	std	Y+20, r25	; 0x14
    1f3c:	8b 8b       	std	Y+19, r24	; 0x13
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <LCD_voidInit+0x2ca>
    1f40:	88 ec       	ldi	r24, 0xC8	; 200
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9a 8b       	std	Y+18, r25	; 0x12
    1f46:	89 8b       	std	Y+17, r24	; 0x11
    1f48:	89 89       	ldd	r24, Y+17	; 0x11
    1f4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_voidInit+0x2b8>
    1f50:	9a 8b       	std	Y+18, r25	; 0x12
    1f52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	8b 89       	ldd	r24, Y+19	; 0x13
    1f56:	9c 89       	ldd	r25, Y+20	; 0x14
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9c 8b       	std	Y+20, r25	; 0x14
    1f5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f60:	9c 89       	ldd	r25, Y+20	; 0x14
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <LCD_voidInit+0x2ac>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9c 8b       	std	Y+20, r25	; 0x14
    1f7a:	8b 8b       	std	Y+19, r24	; 0x13
    1f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f80:	98 8b       	std	Y+16, r25	; 0x10
    1f82:	8f 87       	std	Y+15, r24	; 0x0f
    1f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f86:	98 89       	ldd	r25, Y+16	; 0x10
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_voidInit+0x2f4>
    1f8c:	98 8b       	std	Y+16, r25	; 0x10
    1f8e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		LCD_voidSendCommand(DISPLAY_CLEAR);
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendCommand>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 e0       	ldi	r26, 0x00	; 0
    1f9c:	b0 e4       	ldi	r27, 0x40	; 64
    1f9e:	8b 87       	std	Y+11, r24	; 0x0b
    1fa0:	9c 87       	std	Y+12, r25	; 0x0c
    1fa2:	ad 87       	std	Y+13, r26	; 0x0d
    1fa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4a ef       	ldi	r20, 0xFA	; 250
    1fb4:	54 e4       	ldi	r21, 0x44	; 68
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	8f 83       	std	Y+7, r24	; 0x07
    1fc0:	98 87       	std	Y+8, r25	; 0x08
    1fc2:	a9 87       	std	Y+9, r26	; 0x09
    1fc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc8:	78 85       	ldd	r23, Y+8	; 0x08
    1fca:	89 85       	ldd	r24, Y+9	; 0x09
    1fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	2c f4       	brge	.+10     	; 0x1fe8 <LCD_voidInit+0x354>
		__ticks = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
    1fe6:	3f c0       	rjmp	.+126    	; 0x2066 <LCD_voidInit+0x3d2>
	else if (__tmp > 65535)
    1fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fea:	78 85       	ldd	r23, Y+8	; 0x08
    1fec:	89 85       	ldd	r24, Y+9	; 0x09
    1fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	4c f5       	brge	.+82     	; 0x2052 <LCD_voidInit+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2000:	6b 85       	ldd	r22, Y+11	; 0x0b
    2002:	7c 85       	ldd	r23, Y+12	; 0x0c
    2004:	8d 85       	ldd	r24, Y+13	; 0x0d
    2006:	9e 85       	ldd	r25, Y+14	; 0x0e
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e2       	ldi	r20, 0x20	; 32
    200e:	51 e4       	ldi	r21, 0x41	; 65
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	9e 83       	std	Y+6, r25	; 0x06
    2026:	8d 83       	std	Y+5, r24	; 0x05
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <LCD_voidInit+0x3b4>
    202a:	88 ec       	ldi	r24, 0xC8	; 200
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9c 83       	std	Y+4, r25	; 0x04
    2030:	8b 83       	std	Y+3, r24	; 0x03
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <LCD_voidInit+0x3a2>
    203a:	9c 83       	std	Y+4, r25	; 0x04
    203c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	9e 81       	ldd	r25, Y+6	; 0x06
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	69 f7       	brne	.-38     	; 0x202a <LCD_voidInit+0x396>
    2050:	14 c0       	rjmp	.+40     	; 0x207a <LCD_voidInit+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2052:	6f 81       	ldd	r22, Y+7	; 0x07
    2054:	78 85       	ldd	r23, Y+8	; 0x08
    2056:	89 85       	ldd	r24, Y+9	; 0x09
    2058:	9a 85       	ldd	r25, Y+10	; 0x0a
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9e 83       	std	Y+6, r25	; 0x06
    2064:	8d 83       	std	Y+5, r24	; 0x05
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	9e 81       	ldd	r25, Y+6	; 0x06
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_voidInit+0x3de>
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(0x06);
		
	#else 
		#erroe("You Chosed Wrong LCD Mode")
	#endif
}
    207a:	e8 96       	adiw	r28, 0x38	; 56
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <LCD_voidClearScreen>:

/******************************************************************************
* Description 	: LCD Clear Screen Function.						          *
******************************************************************************/

void LCD_voidClearScreen(void){
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	2e 97       	sbiw	r28, 0x0e	; 14
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61

	LCD_voidSendCommand(DISPLAY_CLEAR);
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendCommand>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a0 e0       	ldi	r26, 0x00	; 0
    20ac:	b0 e4       	ldi	r27, 0x40	; 64
    20ae:	8b 87       	std	Y+11, r24	; 0x0b
    20b0:	9c 87       	std	Y+12, r25	; 0x0c
    20b2:	ad 87       	std	Y+13, r26	; 0x0d
    20b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    20bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	4a ef       	ldi	r20, 0xFA	; 250
    20c4:	54 e4       	ldi	r21, 0x44	; 68
    20c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	8f 83       	std	Y+7, r24	; 0x07
    20d0:	98 87       	std	Y+8, r25	; 0x08
    20d2:	a9 87       	std	Y+9, r26	; 0x09
    20d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	78 85       	ldd	r23, Y+8	; 0x08
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e8       	ldi	r20, 0x80	; 128
    20e4:	5f e3       	ldi	r21, 0x3F	; 63
    20e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ea:	88 23       	and	r24, r24
    20ec:	2c f4       	brge	.+10     	; 0x20f8 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9e 83       	std	Y+6, r25	; 0x06
    20f4:	8d 83       	std	Y+5, r24	; 0x05
    20f6:	3f c0       	rjmp	.+126    	; 0x2176 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    20f8:	6f 81       	ldd	r22, Y+7	; 0x07
    20fa:	78 85       	ldd	r23, Y+8	; 0x08
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	3f ef       	ldi	r19, 0xFF	; 255
    2104:	4f e7       	ldi	r20, 0x7F	; 127
    2106:	57 e4       	ldi	r21, 0x47	; 71
    2108:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    210c:	18 16       	cp	r1, r24
    210e:	4c f5       	brge	.+82     	; 0x2162 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2110:	6b 85       	ldd	r22, Y+11	; 0x0b
    2112:	7c 85       	ldd	r23, Y+12	; 0x0c
    2114:	8d 85       	ldd	r24, Y+13	; 0x0d
    2116:	9e 85       	ldd	r25, Y+14	; 0x0e
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e2       	ldi	r20, 0x20	; 32
    211e:	51 e4       	ldi	r21, 0x41	; 65
    2120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	0f c0       	rjmp	.+30     	; 0x2158 <LCD_voidClearScreen+0xcc>
    213a:	88 ec       	ldi	r24, 0xC8	; 200
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <LCD_voidClearScreen+0xba>
    214a:	9c 83       	std	Y+4, r25	; 0x04
    214c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	69 f7       	brne	.-38     	; 0x213a <LCD_voidClearScreen+0xae>
    2160:	14 c0       	rjmp	.+40     	; 0x218a <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2162:	6f 81       	ldd	r22, Y+7	; 0x07
    2164:	78 85       	ldd	r23, Y+8	; 0x08
    2166:	89 85       	ldd	r24, Y+9	; 0x09
    2168:	9a 85       	ldd	r25, Y+10	; 0x0a
    216a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	9e 81       	ldd	r25, Y+6	; 0x06
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_voidClearScreen+0xf6>
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    218a:	2e 96       	adiw	r28, 0x0e	; 14
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <LCD_voidWriteString>:

/******************************************************************************
* Description 	: LCD Write String Function.						          *
******************************************************************************/

void LCD_voidWriteString(uint8 *Copy_u8Ptr){
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <LCD_voidWriteString+0x6>
    21a2:	0f 92       	push	r0
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	9b 83       	std	Y+3, r25	; 0x03
    21aa:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8 Local_u8Counter = 0;
    21ac:	19 82       	std	Y+1, r1	; 0x01
    21ae:	0e c0       	rjmp	.+28     	; 0x21cc <LCD_voidWriteString+0x30>

	while(Copy_u8Ptr[Local_u8Counter] != 0){
	
		LCD_voidWriteData(Copy_u8Ptr[Local_u8Counter]);
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ba:	fc 01       	movw	r30, r24
    21bc:	e2 0f       	add	r30, r18
    21be:	f3 1f       	adc	r31, r19
    21c0:	80 81       	ld	r24, Z
    21c2:	0e 94 32 0c 	call	0x1864	; 0x1864 <LCD_voidWriteData>
		Local_u8Counter++;
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	8f 5f       	subi	r24, 0xFF	; 255
    21ca:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(uint8 *Copy_u8Ptr){
	
	uint8 Local_u8Counter = 0;

	while(Copy_u8Ptr[Local_u8Counter] != 0){
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	fc 01       	movw	r30, r24
    21d8:	e2 0f       	add	r30, r18
    21da:	f3 1f       	adc	r31, r19
    21dc:	80 81       	ld	r24, Z
    21de:	88 23       	and	r24, r24
    21e0:	39 f7       	brne	.-50     	; 0x21b0 <LCD_voidWriteString+0x14>
		LCD_voidWriteData(Copy_u8Ptr[Local_u8Counter]);
		Local_u8Counter++;
	
	}

}
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <LCD_voidSetPosition>:

/******************************************************************************
* Description 	: LCD Set Cursor Function.						              *
******************************************************************************/

void LCD_voidSetPosition(uint8 Copy_u8Row, uint8 Copy_u8Col){
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <LCD_voidSetPosition+0x6>
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	6a 83       	std	Y+2, r22	; 0x02

	if(0 == Copy_u8Row){
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	88 23       	and	r24, r24
    2200:	29 f4       	brne	.+10     	; 0x220c <LCD_voidSetPosition+0x1e>

		/* set ddram */
		LCD_voidSendCommand(128 + Copy_u8Col);
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	80 58       	subi	r24, 0x80	; 128
    2206:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendCommand>
    220a:	07 c0       	rjmp	.+14     	; 0x221a <LCD_voidSetPosition+0x2c>
	}

	else if(1 == Copy_u8Row){
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	81 30       	cpi	r24, 0x01	; 1
    2210:	21 f4       	brne	.+8      	; 0x221a <LCD_voidSetPosition+0x2c>

		/* set ddram */
		LCD_voidSendCommand(128 + 64 + Copy_u8Col);
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	80 54       	subi	r24, 0x40	; 64
    2216:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendCommand>
	}

	else{  /* return error */ }

}
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <LCD_voidDisplayLoop>:

/******************************************************************************
* Description 	: LCD Display Loop String or Char on lcd Function             *
******************************************************************************/

void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, uint8 *Copy_u8Ptr){
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	a1 97       	sbiw	r28, 0x21	; 33
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	8e 8f       	std	Y+30, r24	; 0x1e
    223a:	6f 8f       	std	Y+31, r22	; 0x1f
    223c:	59 a3       	std	Y+33, r21	; 0x21
    223e:	48 a3       	std	Y+32, r20	; 0x20

	for(uint8 i=0; i<15; i++){
    2240:	1d 8e       	std	Y+29, r1	; 0x1d
    2242:	f9 c0       	rjmp	.+498    	; 0x2436 <LCD_voidDisplayLoop+0x212>

		LCD_voidSetPosition(Copy_u8Row, i);
    2244:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2246:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2248:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_voidSetPosition>

		LCD_voidWriteString(Copy_u8Ptr);
    224c:	88 a1       	ldd	r24, Y+32	; 0x20
    224e:	99 a1       	ldd	r25, Y+33	; 0x21
    2250:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidWriteString>
		_delay_ms(Copy_u8Speed);
    2254:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 e0       	ldi	r26, 0x00	; 0
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	89 8f       	std	Y+25, r24	; 0x19
    226c:	9a 8f       	std	Y+26, r25	; 0x1a
    226e:	ab 8f       	std	Y+27, r26	; 0x1b
    2270:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2272:	69 8d       	ldd	r22, Y+25	; 0x19
    2274:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	4a ef       	ldi	r20, 0xFA	; 250
    2280:	54 e4       	ldi	r21, 0x44	; 68
    2282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	8d 8b       	std	Y+21, r24	; 0x15
    228c:	9e 8b       	std	Y+22, r25	; 0x16
    228e:	af 8b       	std	Y+23, r26	; 0x17
    2290:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2292:	6d 89       	ldd	r22, Y+21	; 0x15
    2294:	7e 89       	ldd	r23, Y+22	; 0x16
    2296:	8f 89       	ldd	r24, Y+23	; 0x17
    2298:	98 8d       	ldd	r25, Y+24	; 0x18
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e8       	ldi	r20, 0x80	; 128
    22a0:	5f e3       	ldi	r21, 0x3F	; 63
    22a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a6:	88 23       	and	r24, r24
    22a8:	2c f4       	brge	.+10     	; 0x22b4 <LCD_voidDisplayLoop+0x90>
		__ticks = 1;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9c 8b       	std	Y+20, r25	; 0x14
    22b0:	8b 8b       	std	Y+19, r24	; 0x13
    22b2:	3f c0       	rjmp	.+126    	; 0x2332 <LCD_voidDisplayLoop+0x10e>
	else if (__tmp > 65535)
    22b4:	6d 89       	ldd	r22, Y+21	; 0x15
    22b6:	7e 89       	ldd	r23, Y+22	; 0x16
    22b8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ba:	98 8d       	ldd	r25, Y+24	; 0x18
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	3f ef       	ldi	r19, 0xFF	; 255
    22c0:	4f e7       	ldi	r20, 0x7F	; 127
    22c2:	57 e4       	ldi	r21, 0x47	; 71
    22c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c8:	18 16       	cp	r1, r24
    22ca:	4c f5       	brge	.+82     	; 0x231e <LCD_voidDisplayLoop+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22cc:	69 8d       	ldd	r22, Y+25	; 0x19
    22ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e2       	ldi	r20, 0x20	; 32
    22da:	51 e4       	ldi	r21, 0x41	; 65
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9c 8b       	std	Y+20, r25	; 0x14
    22f2:	8b 8b       	std	Y+19, r24	; 0x13
    22f4:	0f c0       	rjmp	.+30     	; 0x2314 <LCD_voidDisplayLoop+0xf0>
    22f6:	88 ec       	ldi	r24, 0xC8	; 200
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9a 8b       	std	Y+18, r25	; 0x12
    22fc:	89 8b       	std	Y+17, r24	; 0x11
    22fe:	89 89       	ldd	r24, Y+17	; 0x11
    2300:	9a 89       	ldd	r25, Y+18	; 0x12
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCD_voidDisplayLoop+0xde>
    2306:	9a 8b       	std	Y+18, r25	; 0x12
    2308:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230a:	8b 89       	ldd	r24, Y+19	; 0x13
    230c:	9c 89       	ldd	r25, Y+20	; 0x14
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	9c 8b       	std	Y+20, r25	; 0x14
    2312:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2314:	8b 89       	ldd	r24, Y+19	; 0x13
    2316:	9c 89       	ldd	r25, Y+20	; 0x14
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	69 f7       	brne	.-38     	; 0x22f6 <LCD_voidDisplayLoop+0xd2>
    231c:	14 c0       	rjmp	.+40     	; 0x2346 <LCD_voidDisplayLoop+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231e:	6d 89       	ldd	r22, Y+21	; 0x15
    2320:	7e 89       	ldd	r23, Y+22	; 0x16
    2322:	8f 89       	ldd	r24, Y+23	; 0x17
    2324:	98 8d       	ldd	r25, Y+24	; 0x18
    2326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	9c 8b       	std	Y+20, r25	; 0x14
    2330:	8b 8b       	std	Y+19, r24	; 0x13
    2332:	8b 89       	ldd	r24, Y+19	; 0x13
    2334:	9c 89       	ldd	r25, Y+20	; 0x14
    2336:	98 8b       	std	Y+16, r25	; 0x10
    2338:	8f 87       	std	Y+15, r24	; 0x0f
    233a:	8f 85       	ldd	r24, Y+15	; 0x0f
    233c:	98 89       	ldd	r25, Y+16	; 0x10
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <LCD_voidDisplayLoop+0x11a>
    2342:	98 8b       	std	Y+16, r25	; 0x10
    2344:	8f 87       	std	Y+15, r24	; 0x0f

		LCD_voidSendCommand(DISPLAY_CLEAR);
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendCommand>
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e4       	ldi	r27, 0x40	; 64
    2354:	8b 87       	std	Y+11, r24	; 0x0b
    2356:	9c 87       	std	Y+12, r25	; 0x0c
    2358:	ad 87       	std	Y+13, r26	; 0x0d
    235a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235c:	6b 85       	ldd	r22, Y+11	; 0x0b
    235e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2360:	8d 85       	ldd	r24, Y+13	; 0x0d
    2362:	9e 85       	ldd	r25, Y+14	; 0x0e
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4a ef       	ldi	r20, 0xFA	; 250
    236a:	54 e4       	ldi	r21, 0x44	; 68
    236c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	8f 83       	std	Y+7, r24	; 0x07
    2376:	98 87       	std	Y+8, r25	; 0x08
    2378:	a9 87       	std	Y+9, r26	; 0x09
    237a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237c:	6f 81       	ldd	r22, Y+7	; 0x07
    237e:	78 85       	ldd	r23, Y+8	; 0x08
    2380:	89 85       	ldd	r24, Y+9	; 0x09
    2382:	9a 85       	ldd	r25, Y+10	; 0x0a
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e8       	ldi	r20, 0x80	; 128
    238a:	5f e3       	ldi	r21, 0x3F	; 63
    238c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2390:	88 23       	and	r24, r24
    2392:	2c f4       	brge	.+10     	; 0x239e <LCD_voidDisplayLoop+0x17a>
		__ticks = 1;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	3f c0       	rjmp	.+126    	; 0x241c <LCD_voidDisplayLoop+0x1f8>
	else if (__tmp > 65535)
    239e:	6f 81       	ldd	r22, Y+7	; 0x07
    23a0:	78 85       	ldd	r23, Y+8	; 0x08
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	4c f5       	brge	.+82     	; 0x2408 <LCD_voidDisplayLoop+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    23bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9e 83       	std	Y+6, r25	; 0x06
    23dc:	8d 83       	std	Y+5, r24	; 0x05
    23de:	0f c0       	rjmp	.+30     	; 0x23fe <LCD_voidDisplayLoop+0x1da>
    23e0:	88 ec       	ldi	r24, 0xC8	; 200
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	9c 83       	std	Y+4, r25	; 0x04
    23e6:	8b 83       	std	Y+3, r24	; 0x03
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <LCD_voidDisplayLoop+0x1c8>
    23f0:	9c 83       	std	Y+4, r25	; 0x04
    23f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f4:	8d 81       	ldd	r24, Y+5	; 0x05
    23f6:	9e 81       	ldd	r25, Y+6	; 0x06
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2400:	9e 81       	ldd	r25, Y+6	; 0x06
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	69 f7       	brne	.-38     	; 0x23e0 <LCD_voidDisplayLoop+0x1bc>
    2406:	14 c0       	rjmp	.+40     	; 0x2430 <LCD_voidDisplayLoop+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2408:	6f 81       	ldd	r22, Y+7	; 0x07
    240a:	78 85       	ldd	r23, Y+8	; 0x08
    240c:	89 85       	ldd	r24, Y+9	; 0x09
    240e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9e 83       	std	Y+6, r25	; 0x06
    241a:	8d 83       	std	Y+5, r24	; 0x05
    241c:	8d 81       	ldd	r24, Y+5	; 0x05
    241e:	9e 81       	ldd	r25, Y+6	; 0x06
    2420:	9a 83       	std	Y+2, r25	; 0x02
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	9a 81       	ldd	r25, Y+2	; 0x02
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <LCD_voidDisplayLoop+0x204>
    242c:	9a 83       	std	Y+2, r25	; 0x02
    242e:	89 83       	std	Y+1, r24	; 0x01
* Description 	: LCD Display Loop String or Char on lcd Function             *
******************************************************************************/

void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, uint8 *Copy_u8Ptr){

	for(uint8 i=0; i<15; i++){
    2430:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2432:	8f 5f       	subi	r24, 0xFF	; 255
    2434:	8d 8f       	std	Y+29, r24	; 0x1d
    2436:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2438:	8f 30       	cpi	r24, 0x0F	; 15
    243a:	08 f4       	brcc	.+2      	; 0x243e <LCD_voidDisplayLoop+0x21a>
    243c:	03 cf       	rjmp	.-506    	; 0x2244 <LCD_voidDisplayLoop+0x20>

		LCD_voidSendCommand(DISPLAY_CLEAR);
		_delay_ms(2);

	}
}
    243e:	a1 96       	adiw	r28, 0x21	; 33
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <LCD_voidWriteNumber>:

/******************************************************************************
* Description 	: LCD Number on lcd Function                                  *
******************************************************************************/

void LCD_voidWriteNumber(uint16 Copy_u16Number){
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	27 97       	sbiw	r28, 0x07	; 7
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	9f 83       	std	Y+7, r25	; 0x07
    2466:	8e 83       	std	Y+6, r24	; 0x06

	uint8 Local_u8Counter = 0, Local_u8Digits = 0, Local_u8Current;
    2468:	1d 82       	std	Y+5, r1	; 0x05
    246a:	1c 82       	std	Y+4, r1	; 0x04
	uint16 Local_u16CopyNumber = Copy_u16Number;
    246c:	8e 81       	ldd	r24, Y+6	; 0x06
    246e:	9f 81       	ldd	r25, Y+7	; 0x07
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	89 83       	std	Y+1, r24	; 0x01

	if(0 == Copy_u16Number){
    2474:	8e 81       	ldd	r24, Y+6	; 0x06
    2476:	9f 81       	ldd	r25, Y+7	; 0x07
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	89 f4       	brne	.+34     	; 0x249e <LCD_voidWriteNumber+0x4e>

		LCD_voidWriteData('0');
    247c:	80 e3       	ldi	r24, 0x30	; 48
    247e:	0e 94 32 0c 	call	0x1864	; 0x1864 <LCD_voidWriteData>
    2482:	48 c0       	rjmp	.+144    	; 0x2514 <LCD_voidWriteNumber+0xc4>

	else{

		while(Local_u16CopyNumber){

			Local_u16CopyNumber /= 10;
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	2a e0       	ldi	r18, 0x0A	; 10
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	b9 01       	movw	r22, r18
    248e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__udivmodhi4>
    2492:	cb 01       	movw	r24, r22
    2494:	9a 83       	std	Y+2, r25	; 0x02
    2496:	89 83       	std	Y+1, r24	; 0x01
			Local_u8Digits++;
    2498:	8c 81       	ldd	r24, Y+4	; 0x04
    249a:	8f 5f       	subi	r24, 0xFF	; 255
    249c:	8c 83       	std	Y+4, r24	; 0x04
		LCD_voidWriteData('0');
	}

	else{

		while(Local_u16CopyNumber){
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	79 f7       	brne	.-34     	; 0x2484 <LCD_voidWriteNumber+0x34>

			Local_u16CopyNumber /= 10;
			Local_u8Digits++;
		}
		Local_u16CopyNumber = Copy_u16Number;
    24a6:	8e 81       	ldd	r24, Y+6	; 0x06
    24a8:	9f 81       	ldd	r25, Y+7	; 0x07
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01

		for(Local_u8Counter = 0; Local_u8Counter < Local_u8Digits; Local_u8Counter++){
    24ae:	1d 82       	std	Y+5, r1	; 0x05
    24b0:	2d c0       	rjmp	.+90     	; 0x250c <LCD_voidWriteNumber+0xbc>

			Local_u8Current = Local_u16CopyNumber / (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	8d 81       	ldd	r24, Y+5	; 0x05
    24b6:	29 2f       	mov	r18, r25
    24b8:	28 1b       	sub	r18, r24
    24ba:	82 2f       	mov	r24, r18
    24bc:	98 2f       	mov	r25, r24
    24be:	91 50       	subi	r25, 0x01	; 1
    24c0:	8a e0       	ldi	r24, 0x0A	; 10
    24c2:	69 2f       	mov	r22, r25
    24c4:	0e 94 41 13 	call	0x2682	; 0x2682 <Private_u16GetPower>
    24c8:	9c 01       	movw	r18, r24
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	9a 81       	ldd	r25, Y+2	; 0x02
    24ce:	b9 01       	movw	r22, r18
    24d0:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__udivmodhi4>
    24d4:	cb 01       	movw	r24, r22
    24d6:	8b 83       	std	Y+3, r24	; 0x03
			LCD_voidWriteData(Local_u8Current + '0');
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	80 5d       	subi	r24, 0xD0	; 208
    24dc:	0e 94 32 0c 	call	0x1864	; 0x1864 <LCD_voidWriteData>
			Local_u16CopyNumber %= (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	29 2f       	mov	r18, r25
    24e6:	28 1b       	sub	r18, r24
    24e8:	82 2f       	mov	r24, r18
    24ea:	98 2f       	mov	r25, r24
    24ec:	91 50       	subi	r25, 0x01	; 1
    24ee:	8a e0       	ldi	r24, 0x0A	; 10
    24f0:	69 2f       	mov	r22, r25
    24f2:	0e 94 41 13 	call	0x2682	; 0x2682 <Private_u16GetPower>
    24f6:	9c 01       	movw	r18, r24
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	9a 81       	ldd	r25, Y+2	; 0x02
    24fc:	b9 01       	movw	r22, r18
    24fe:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__udivmodhi4>
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	89 83       	std	Y+1, r24	; 0x01
			Local_u16CopyNumber /= 10;
			Local_u8Digits++;
		}
		Local_u16CopyNumber = Copy_u16Number;

		for(Local_u8Counter = 0; Local_u8Counter < Local_u8Digits; Local_u8Counter++){
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	8f 5f       	subi	r24, 0xFF	; 255
    250a:	8d 83       	std	Y+5, r24	; 0x05
    250c:	9d 81       	ldd	r25, Y+5	; 0x05
    250e:	8c 81       	ldd	r24, Y+4	; 0x04
    2510:	98 17       	cp	r25, r24
    2512:	78 f2       	brcs	.-98     	; 0x24b2 <LCD_voidWriteNumber+0x62>
			Local_u8Current = Local_u16CopyNumber / (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
			LCD_voidWriteData(Local_u8Current + '0');
			Local_u16CopyNumber %= (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
		}
	}
}
    2514:	27 96       	adiw	r28, 0x07	; 7
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	cd bf       	out	0x3d, r28	; 61
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <LCD_voidWriteExtraChar>:

/******************************************************************************
* Description 	: LCD Writr Char (CGRAM) Function                             *
******************************************************************************/

void LCD_voidWriteExtraChar(uint8 Copy_u8Row, uint8 Copy_u8Col){
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	62 97       	sbiw	r28, 0x12	; 18
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	89 8b       	std	Y+17, r24	; 0x11
    253c:	6a 8b       	std	Y+18, r22	; 0x12

	uint8 Local_u8Iteration1, Local_u8Iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCommand(64);
    253e:	80 e4       	ldi	r24, 0x40	; 64
    2540:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendCommand>

	for(Local_u8Iteration1 = 0 ; Local_u8Iteration1 < 64; Local_u8Iteration1++){
    2544:	18 8a       	std	Y+16, r1	; 0x10
    2546:	0c c0       	rjmp	.+24     	; 0x2560 <LCD_voidWriteExtraChar+0x3a>

		LCD_voidWriteData(ExtraChar[Local_u8Iteration1]);
    2548:	88 89       	ldd	r24, Y+16	; 0x10
    254a:	88 2f       	mov	r24, r24
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	fc 01       	movw	r30, r24
    2550:	ee 57       	subi	r30, 0x7E	; 126
    2552:	fe 4f       	sbci	r31, 0xFE	; 254
    2554:	80 81       	ld	r24, Z
    2556:	0e 94 32 0c 	call	0x1864	; 0x1864 <LCD_voidWriteData>
	uint8 Local_u8Iteration1, Local_u8Iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCommand(64);

	for(Local_u8Iteration1 = 0 ; Local_u8Iteration1 < 64; Local_u8Iteration1++){
    255a:	88 89       	ldd	r24, Y+16	; 0x10
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	88 8b       	std	Y+16, r24	; 0x10
    2560:	88 89       	ldd	r24, Y+16	; 0x10
    2562:	80 34       	cpi	r24, 0x40	; 64
    2564:	88 f3       	brcs	.-30     	; 0x2548 <LCD_voidWriteExtraChar+0x22>

		LCD_voidWriteData(ExtraChar[Local_u8Iteration1]);
	}

	/*CGRAM-->DDRAM*/
	LCD_voidSendCommand(128);
    2566:	80 e8       	ldi	r24, 0x80	; 128
    2568:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendCommand>
	LCD_voidSetPosition(Copy_u8Row, Copy_u8Col);
    256c:	89 89       	ldd	r24, Y+17	; 0x11
    256e:	6a 89       	ldd	r22, Y+18	; 0x12
    2570:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_voidSetPosition>

	/*First eight character which saved at CGRAM*/
	for (Local_u8Iteration2 = 0; Local_u8Iteration2 <= 7; Local_u8Iteration2++){
    2574:	1f 86       	std	Y+15, r1	; 0x0f
    2576:	78 c0       	rjmp	.+240    	; 0x2668 <LCD_voidWriteExtraChar+0x142>

		/* Write bytes of DDRAM */
		LCD_voidWriteData(Local_u8Iteration2);
    2578:	8f 85       	ldd	r24, Y+15	; 0x0f
    257a:	0e 94 32 0c 	call	0x1864	; 0x1864 <LCD_voidWriteData>
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	a0 ea       	ldi	r26, 0xA0	; 160
    2584:	b0 e4       	ldi	r27, 0x40	; 64
    2586:	8b 87       	std	Y+11, r24	; 0x0b
    2588:	9c 87       	std	Y+12, r25	; 0x0c
    258a:	ad 87       	std	Y+13, r26	; 0x0d
    258c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2590:	7c 85       	ldd	r23, Y+12	; 0x0c
    2592:	8d 85       	ldd	r24, Y+13	; 0x0d
    2594:	9e 85       	ldd	r25, Y+14	; 0x0e
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	4a ef       	ldi	r20, 0xFA	; 250
    259c:	54 e4       	ldi	r21, 0x44	; 68
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	8f 83       	std	Y+7, r24	; 0x07
    25a8:	98 87       	std	Y+8, r25	; 0x08
    25aa:	a9 87       	std	Y+9, r26	; 0x09
    25ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e8       	ldi	r20, 0x80	; 128
    25bc:	5f e3       	ldi	r21, 0x3F	; 63
    25be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c2:	88 23       	and	r24, r24
    25c4:	2c f4       	brge	.+10     	; 0x25d0 <LCD_voidWriteExtraChar+0xaa>
		__ticks = 1;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	3f c0       	rjmp	.+126    	; 0x264e <LCD_voidWriteExtraChar+0x128>
	else if (__tmp > 65535)
    25d0:	6f 81       	ldd	r22, Y+7	; 0x07
    25d2:	78 85       	ldd	r23, Y+8	; 0x08
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	3f ef       	ldi	r19, 0xFF	; 255
    25dc:	4f e7       	ldi	r20, 0x7F	; 127
    25de:	57 e4       	ldi	r21, 0x47	; 71
    25e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e4:	18 16       	cp	r1, r24
    25e6:	4c f5       	brge	.+82     	; 0x263a <LCD_voidWriteExtraChar+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e2       	ldi	r20, 0x20	; 32
    25f6:	51 e4       	ldi	r21, 0x41	; 65
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
    2610:	0f c0       	rjmp	.+30     	; 0x2630 <LCD_voidWriteExtraChar+0x10a>
    2612:	88 ec       	ldi	r24, 0xC8	; 200
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	8b 83       	std	Y+3, r24	; 0x03
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <LCD_voidWriteExtraChar+0xf8>
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	9e 83       	std	Y+6, r25	; 0x06
    262e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	69 f7       	brne	.-38     	; 0x2612 <LCD_voidWriteExtraChar+0xec>
    2638:	14 c0       	rjmp	.+40     	; 0x2662 <LCD_voidWriteExtraChar+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <LCD_voidWriteExtraChar+0x134>
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
	/*CGRAM-->DDRAM*/
	LCD_voidSendCommand(128);
	LCD_voidSetPosition(Copy_u8Row, Copy_u8Col);

	/*First eight character which saved at CGRAM*/
	for (Local_u8Iteration2 = 0; Local_u8Iteration2 <= 7; Local_u8Iteration2++){
    2662:	8f 85       	ldd	r24, Y+15	; 0x0f
    2664:	8f 5f       	subi	r24, 0xFF	; 255
    2666:	8f 87       	std	Y+15, r24	; 0x0f
    2668:	8f 85       	ldd	r24, Y+15	; 0x0f
    266a:	88 30       	cpi	r24, 0x08	; 8
    266c:	08 f4       	brcc	.+2      	; 0x2670 <LCD_voidWriteExtraChar+0x14a>
    266e:	84 cf       	rjmp	.-248    	; 0x2578 <LCD_voidWriteExtraChar+0x52>

		/* Write bytes of DDRAM */
		LCD_voidWriteData(Local_u8Iteration2);
		_delay_ms(5);
	}
}
    2670:	62 96       	adiw	r28, 0x12	; 18
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <Private_u16GetPower>:

/******************************************************************************
* Description 	: Get Power Private Function.					              *
******************************************************************************/

static uint16 Private_u16GetPower(uint8 Copy_u8Number1, uint8 Copy_u8Number2){
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <Private_u16GetPower+0x6>
    2688:	00 d0       	rcall	.+0      	; 0x268a <Private_u16GetPower+0x8>
    268a:	0f 92       	push	r0
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	8c 83       	std	Y+4, r24	; 0x04
    2692:	6d 83       	std	Y+5, r22	; 0x05

	uint16 Local_u16Result = 1;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9b 83       	std	Y+3, r25	; 0x03
    269a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter = 0;
    269c:	19 82       	std	Y+1, r1	; 0x01

	for(Local_u8Counter = 0; Local_u8Counter < Copy_u8Number2; Local_u8Counter++){
    269e:	19 82       	std	Y+1, r1	; 0x01
    26a0:	12 c0       	rjmp	.+36     	; 0x26c6 <Private_u16GetPower+0x44>

		Local_u16Result *= Copy_u8Number1;
    26a2:	8c 81       	ldd	r24, Y+4	; 0x04
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	9b 81       	ldd	r25, Y+3	; 0x03
    26ac:	ac 01       	movw	r20, r24
    26ae:	42 9f       	mul	r20, r18
    26b0:	c0 01       	movw	r24, r0
    26b2:	43 9f       	mul	r20, r19
    26b4:	90 0d       	add	r25, r0
    26b6:	52 9f       	mul	r21, r18
    26b8:	90 0d       	add	r25, r0
    26ba:	11 24       	eor	r1, r1
    26bc:	9b 83       	std	Y+3, r25	; 0x03
    26be:	8a 83       	std	Y+2, r24	; 0x02
static uint16 Private_u16GetPower(uint8 Copy_u8Number1, uint8 Copy_u8Number2){

	uint16 Local_u16Result = 1;
	uint8 Local_u8Counter = 0;

	for(Local_u8Counter = 0; Local_u8Counter < Copy_u8Number2; Local_u8Counter++){
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	8f 5f       	subi	r24, 0xFF	; 255
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	99 81       	ldd	r25, Y+1	; 0x01
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	98 17       	cp	r25, r24
    26cc:	50 f3       	brcs	.-44     	; 0x26a2 <Private_u16GetPower+0x20>

		Local_u16Result *= Copy_u8Number1;
	}
	return Local_u16Result;
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	9b 81       	ldd	r25, Y+3	; 0x03
}
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <TIMER0_voidInit>:
/******************************************************************************
* Description 	: TIMER0 Initialization Function to select timer mode         *
*			      & Prescaler vale.                                           *
******************************************************************************/

void TIMER0_voidInit(Timer0Mode_t Mode, Timer0Scaler_t Prescaler){
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	00 d0       	rcall	.+0      	; 0x26e8 <TIMER0_voidInit+0x6>
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <TIMER0_voidInit+0x8>
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	6a 83       	std	Y+2, r22	; 0x02

	switch(Mode){
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	3c 83       	std	Y+4, r19	; 0x04
    26fa:	2b 83       	std	Y+3, r18	; 0x03
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	91 05       	cpc	r25, r1
    2704:	21 f1       	breq	.+72     	; 0x274e <TIMER0_voidInit+0x6c>
    2706:	2b 81       	ldd	r18, Y+3	; 0x03
    2708:	3c 81       	ldd	r19, Y+4	; 0x04
    270a:	22 30       	cpi	r18, 0x02	; 2
    270c:	31 05       	cpc	r19, r1
    270e:	2c f4       	brge	.+10     	; 0x271a <TIMER0_voidInit+0x38>
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	9c 81       	ldd	r25, Y+4	; 0x04
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	61 f0       	breq	.+24     	; 0x2730 <TIMER0_voidInit+0x4e>
    2718:	46 c0       	rjmp	.+140    	; 0x27a6 <TIMER0_voidInit+0xc4>
    271a:	2b 81       	ldd	r18, Y+3	; 0x03
    271c:	3c 81       	ldd	r19, Y+4	; 0x04
    271e:	22 30       	cpi	r18, 0x02	; 2
    2720:	31 05       	cpc	r19, r1
    2722:	21 f1       	breq	.+72     	; 0x276c <TIMER0_voidInit+0x8a>
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	83 30       	cpi	r24, 0x03	; 3
    272a:	91 05       	cpc	r25, r1
    272c:	71 f1       	breq	.+92     	; 0x278a <TIMER0_voidInit+0xa8>
    272e:	3b c0       	rjmp	.+118    	; 0x27a6 <TIMER0_voidInit+0xc4>
	
		case TIMER0_NORMAL_MODE :
			/* Select Normal mode or overflow mode */
			CLR_BIT(TCCR0, WGM01);	CLR_BIT(TCCR0, WGM00);
    2730:	a3 e5       	ldi	r26, 0x53	; 83
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e3 e5       	ldi	r30, 0x53	; 83
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	87 7f       	andi	r24, 0xF7	; 247
    273c:	8c 93       	st	X, r24
    273e:	a3 e5       	ldi	r26, 0x53	; 83
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e3 e5       	ldi	r30, 0x53	; 83
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	8f 7b       	andi	r24, 0xBF	; 191
    274a:	8c 93       	st	X, r24
    274c:	2c c0       	rjmp	.+88     	; 0x27a6 <TIMER0_voidInit+0xc4>
		break;	
		
		case TIMER0_PHASE_CORRECT_MODE :
			/* Select mode */
			SET_BIT(TCCR0, WGM00);	CLR_BIT(TCCR0, WGM01);
    274e:	a3 e5       	ldi	r26, 0x53	; 83
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e3 e5       	ldi	r30, 0x53	; 83
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	80 64       	ori	r24, 0x40	; 64
    275a:	8c 93       	st	X, r24
    275c:	a3 e5       	ldi	r26, 0x53	; 83
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e3 e5       	ldi	r30, 0x53	; 83
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	87 7f       	andi	r24, 0xF7	; 247
    2768:	8c 93       	st	X, r24
    276a:	1d c0       	rjmp	.+58     	; 0x27a6 <TIMER0_voidInit+0xc4>
		break;	
		
		case TIMER0_CTC_MODE :
			/* Select CTC mode  */
			CLR_BIT(TCCR0, WGM00);	SET_BIT(TCCR0, WGM01);
    276c:	a3 e5       	ldi	r26, 0x53	; 83
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e3 e5       	ldi	r30, 0x53	; 83
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	8f 7b       	andi	r24, 0xBF	; 191
    2778:	8c 93       	st	X, r24
    277a:	a3 e5       	ldi	r26, 0x53	; 83
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e3 e5       	ldi	r30, 0x53	; 83
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	88 60       	ori	r24, 0x08	; 8
    2786:	8c 93       	st	X, r24
    2788:	0e c0       	rjmp	.+28     	; 0x27a6 <TIMER0_voidInit+0xc4>
		break;
		
		case TIMER0_FAST_PWM_MODE :
			/* Select PWM, Fast mode */
			SET_BIT(TCCR0, WGM00);	SET_BIT(TCCR0, WGM01);
    278a:	a3 e5       	ldi	r26, 0x53	; 83
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e3 e5       	ldi	r30, 0x53	; 83
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	80 64       	ori	r24, 0x40	; 64
    2796:	8c 93       	st	X, r24
    2798:	a3 e5       	ldi	r26, 0x53	; 83
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e3 e5       	ldi	r30, 0x53	; 83
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	88 60       	ori	r24, 0x08	; 8
    27a4:	8c 93       	st	X, r24
		
		default:   break;
	}
	
	/* Prescaler mask */
	TCCR0 &= PRESCALER_MASK;
    27a6:	a3 e5       	ldi	r26, 0x53	; 83
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e3 e5       	ldi	r30, 0x53	; 83
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	88 7f       	andi	r24, 0xF8	; 248
    27b2:	8c 93       	st	X, r24
	
	/* Set prescaler value */
	TCCR0 |= Prescaler;
    27b4:	a3 e5       	ldi	r26, 0x53	; 83
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e3 e5       	ldi	r30, 0x53	; 83
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	90 81       	ld	r25, Z
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	89 2b       	or	r24, r25
    27c2:	8c 93       	st	X, r24

}
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <TIMER0_voidOutputCompareInit>:
/******************************************************************************
* Description 	: TIMER0 Output Compare initialization Function to            *
*                 Select Output Compare Mode.                                 *
******************************************************************************/

void TIMER0_voidOutputCompareInit(Timer0_OutputCompareMode_t OC0Mode){
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <TIMER0_voidOutputCompareInit+0x6>
    27d8:	0f 92       	push	r0
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	89 83       	std	Y+1, r24	; 0x01

	switch(OC0Mode){
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	3b 83       	std	Y+3, r19	; 0x03
    27e8:	2a 83       	std	Y+2, r18	; 0x02
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	9b 81       	ldd	r25, Y+3	; 0x03
    27ee:	81 30       	cpi	r24, 0x01	; 1
    27f0:	91 05       	cpc	r25, r1
    27f2:	21 f1       	breq	.+72     	; 0x283c <TIMER0_voidOutputCompareInit+0x6a>
    27f4:	2a 81       	ldd	r18, Y+2	; 0x02
    27f6:	3b 81       	ldd	r19, Y+3	; 0x03
    27f8:	22 30       	cpi	r18, 0x02	; 2
    27fa:	31 05       	cpc	r19, r1
    27fc:	2c f4       	brge	.+10     	; 0x2808 <TIMER0_voidOutputCompareInit+0x36>
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	9b 81       	ldd	r25, Y+3	; 0x03
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	61 f0       	breq	.+24     	; 0x281e <TIMER0_voidOutputCompareInit+0x4c>
    2806:	46 c0       	rjmp	.+140    	; 0x2894 <TIMER0_voidOutputCompareInit+0xc2>
    2808:	2a 81       	ldd	r18, Y+2	; 0x02
    280a:	3b 81       	ldd	r19, Y+3	; 0x03
    280c:	22 30       	cpi	r18, 0x02	; 2
    280e:	31 05       	cpc	r19, r1
    2810:	21 f1       	breq	.+72     	; 0x285a <TIMER0_voidOutputCompareInit+0x88>
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	9b 81       	ldd	r25, Y+3	; 0x03
    2816:	83 30       	cpi	r24, 0x03	; 3
    2818:	91 05       	cpc	r25, r1
    281a:	71 f1       	breq	.+92     	; 0x2878 <TIMER0_voidOutputCompareInit+0xa6>
    281c:	3b c0       	rjmp	.+118    	; 0x2894 <TIMER0_voidOutputCompareInit+0xc2>

		case TIMER0_OC0_DISCONNECTED_MODE :
			// OC0 disconnected
			CLR_BIT(TCCR0, COM00);	CLR_BIT(TCCR0, COM01);
    281e:	a3 e5       	ldi	r26, 0x53	; 83
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	e3 e5       	ldi	r30, 0x53	; 83
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	8f 7e       	andi	r24, 0xEF	; 239
    282a:	8c 93       	st	X, r24
    282c:	a3 e5       	ldi	r26, 0x53	; 83
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	e3 e5       	ldi	r30, 0x53	; 83
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	8f 7d       	andi	r24, 0xDF	; 223
    2838:	8c 93       	st	X, r24
    283a:	2c c0       	rjmp	.+88     	; 0x2894 <TIMER0_voidOutputCompareInit+0xc2>
		break;

		case TIMER0_OC0_TOGGLE_MODE :
			// Toggle OC0 on compare match
			SET_BIT(TCCR0, COM00);	CLR_BIT(TCCR0, COM01);
    283c:	a3 e5       	ldi	r26, 0x53	; 83
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e3 e5       	ldi	r30, 0x53	; 83
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	80 61       	ori	r24, 0x10	; 16
    2848:	8c 93       	st	X, r24
    284a:	a3 e5       	ldi	r26, 0x53	; 83
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e3 e5       	ldi	r30, 0x53	; 83
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	8f 7d       	andi	r24, 0xDF	; 223
    2856:	8c 93       	st	X, r24
    2858:	1d c0       	rjmp	.+58     	; 0x2894 <TIMER0_voidOutputCompareInit+0xc2>
		break;

		case TIMER0_OC0_NON_INVERTING_MODE :
			// Non inverting OC0
			CLR_BIT(TCCR0, COM00);	SET_BIT(TCCR0, COM01);
    285a:	a3 e5       	ldi	r26, 0x53	; 83
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e3 e5       	ldi	r30, 0x53	; 83
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	8f 7e       	andi	r24, 0xEF	; 239
    2866:	8c 93       	st	X, r24
    2868:	a3 e5       	ldi	r26, 0x53	; 83
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	e3 e5       	ldi	r30, 0x53	; 83
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	80 62       	ori	r24, 0x20	; 32
    2874:	8c 93       	st	X, r24
    2876:	0e c0       	rjmp	.+28     	; 0x2894 <TIMER0_voidOutputCompareInit+0xc2>
		break;

		case TIMER0_OC0_INVERTING_MODE :
			// inverting OC0
			SET_BIT(TCCR0, COM00);	SET_BIT(TCCR0, COM01);
    2878:	a3 e5       	ldi	r26, 0x53	; 83
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e3 e5       	ldi	r30, 0x53	; 83
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	80 61       	ori	r24, 0x10	; 16
    2884:	8c 93       	st	X, r24
    2886:	a3 e5       	ldi	r26, 0x53	; 83
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e3 e5       	ldi	r30, 0x53	; 83
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	80 62       	ori	r24, 0x20	; 32
    2892:	8c 93       	st	X, r24
		break;

		default:   break;
	}
}
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <TIMER0_voidSetTimerCounterValue>:

/******************************************************************************
* Description 	: TIMER0 Set Timer Counter Value Function.				      *
******************************************************************************/

void TIMER0_voidSetTimerCounterValue(uint8 Copy_u8TimerValue){
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	0f 92       	push	r0
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = Copy_u8TimerValue;
    28ac:	e2 e5       	ldi	r30, 0x52	; 82
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	80 83       	st	Z, r24
}
    28b4:	0f 90       	pop	r0
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <TIMER0_u8GetTimerCounterValue>:

/******************************************************************************
* Description 	: TIMER0 Get Timer Counter Value Function.				      *
******************************************************************************/

uint8 TIMER0_u8GetTimerCounterValue(void){
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62

	return TCNT0;
    28c4:	e2 e5       	ldi	r30, 0x52	; 82
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
}
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <TIMER0_voidSetOutputCompareValue>:

/******************************************************************************
* Description 	: TIMER0 Set Output Compare Register Value.				      *
******************************************************************************/

void TIMER0_voidSetOutputCompareValue(uint8 Copy_u8CompareValue){
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	0f 92       	push	r0
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_u8CompareValue;
    28dc:	ec e5       	ldi	r30, 0x5C	; 92
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	80 83       	st	Z, r24
}
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <TIMER0_voidUpdateDutyCycle>:
/******************************************************************************
* Description 	: TIMER0 Update Duty Cycle Value Function                     *
* 			      and put it in the OCR0 register.                            *
******************************************************************************/

void TIMER0_voidUpdateDutyCycle(uint8 Copy_u8DutyCycle){
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <TIMER0_voidUpdateDutyCycle+0x6>
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_u8DutyCycle <= 100){
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	85 36       	cpi	r24, 0x65	; 101
    28fc:	20 f5       	brcc	.+72     	; 0x2946 <TIMER0_voidUpdateDutyCycle+0x5a>

		uint8 Local_u8TimeON = ((uint16)Copy_u8DutyCycle * (TIMER0_MAX_COUNT)) / 100;
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	48 2f       	mov	r20, r24
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	ca 01       	movw	r24, r20
    2906:	9c 01       	movw	r18, r24
    2908:	22 0f       	add	r18, r18
    290a:	33 1f       	adc	r19, r19
    290c:	c9 01       	movw	r24, r18
    290e:	96 95       	lsr	r25
    2910:	98 2f       	mov	r25, r24
    2912:	88 27       	eor	r24, r24
    2914:	97 95       	ror	r25
    2916:	87 95       	ror	r24
    2918:	82 1b       	sub	r24, r18
    291a:	93 0b       	sbc	r25, r19
    291c:	84 0f       	add	r24, r20
    291e:	95 1f       	adc	r25, r21
    2920:	24 e6       	ldi	r18, 0x64	; 100
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	b9 01       	movw	r22, r18
    2926:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__udivmodhi4>
    292a:	cb 01       	movw	r24, r22
    292c:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u8TimeON > 1){
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	82 30       	cpi	r24, 0x02	; 2
    2932:	30 f0       	brcs	.+12     	; 0x2940 <TIMER0_voidUpdateDutyCycle+0x54>

			OCR0 = Local_u8TimeON-1;
    2934:	ec e5       	ldi	r30, 0x5C	; 92
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	81 50       	subi	r24, 0x01	; 1
    293c:	80 83       	st	Z, r24
    293e:	03 c0       	rjmp	.+6      	; 0x2946 <TIMER0_voidUpdateDutyCycle+0x5a>
		}
		else{  OCR0 = 0;  }
    2940:	ec e5       	ldi	r30, 0x5C	; 92
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	10 82       	st	Z, r1
	}
	else{ /* return error */}

}
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <TIMER0_voidOverflowInterruptEnable>:

/******************************************************************************
* Description 	: TIMER0 Overflow Interrupt Enable Function.		          *
******************************************************************************/

void TIMER0_voidOverflowInterruptEnable(void){
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
	
	/* Enable overflow mode interrupt */
	SET_BIT(TIMSK, TOIE0);
    2958:	a9 e5       	ldi	r26, 0x59	; 89
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e9 e5       	ldi	r30, 0x59	; 89
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	81 60       	ori	r24, 0x01	; 1
    2964:	8c 93       	st	X, r24
}
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <TIMER0_voidOverflowInterruptDisable>:

/******************************************************************************
* Description 	: TIMER0 Overflow Interrupt Disable Function.				  *
******************************************************************************/

void TIMER0_voidOverflowInterruptDisable(void){
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
	
	/* Disable overflow mode interrupt */
	CLR_BIT(TIMSK, TOIE0);
    2974:	a9 e5       	ldi	r26, 0x59	; 89
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e9 e5       	ldi	r30, 0x59	; 89
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	8e 7f       	andi	r24, 0xFE	; 254
    2980:	8c 93       	st	X, r24
}
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <TIMER0_voidCompareMatchnterruptEnable>:

/******************************************************************************
* Description 	: TIMER0 Output Compare Interrupt Enable Function.			  *
******************************************************************************/

void TIMER0_voidCompareMatchnterruptEnable(void){
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
	
	/* Output Compare Match interrupt Enable */
	SET_BIT(TIMSK, OCIE0);
    2990:	a9 e5       	ldi	r26, 0x59	; 89
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e9 e5       	ldi	r30, 0x59	; 89
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	82 60       	ori	r24, 0x02	; 2
    299c:	8c 93       	st	X, r24
}
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <TIMER0_voidCompareMatchInterruptDisable>:

/******************************************************************************
* Description 	: TIMER0 Output Compare Interrupt Disable Function.			  *
******************************************************************************/

void TIMER0_voidCompareMatchInterruptDisable(void){
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
	
	/* Output Compare Match interrupt Disable */
	CLR_BIT(TIMSK, OCIE0);
    29ac:	a9 e5       	ldi	r26, 0x59	; 89
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	e9 e5       	ldi	r30, 0x59	; 89
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	8d 7f       	andi	r24, 0xFD	; 253
    29b8:	8c 93       	st	X, r24
}
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	08 95       	ret

000029c0 <TIMER0_voidOverflowSetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER0 OVF) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER0_voidOverflowSetCallBack(void(*Local_Fptr)(void)){
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <TIMER0_voidOverflowSetCallBack+0x6>
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	9a 83       	std	Y+2, r25	; 0x02
    29cc:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_OverflowCallBack = Local_Fptr;
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	90 93 c9 01 	sts	0x01C9, r25
    29d6:	80 93 c8 01 	sts	0x01C8, r24

}
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <TIMER0_voidCompareMatchSetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER0 OC0) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER0_voidCompareMatchSetCallBack(void(*Local_Fptr)(void)){
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <TIMER0_voidCompareMatchSetCallBack+0x6>
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_CompareMatchCallBack = Local_Fptr;
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	90 93 cb 01 	sts	0x01CB, r25
    29fa:	80 93 ca 01 	sts	0x01CA, r24

}
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <__vector_10>:

/******************************************************************************
* !comment  :  ISR Function output compare interrupt.  						  *
******************************************************************************/

ISR( TIMER0_OC0 ){
    2a08:	1f 92       	push	r1
    2a0a:	0f 92       	push	r0
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	0f 92       	push	r0
    2a10:	11 24       	eor	r1, r1
    2a12:	2f 93       	push	r18
    2a14:	3f 93       	push	r19
    2a16:	4f 93       	push	r20
    2a18:	5f 93       	push	r21
    2a1a:	6f 93       	push	r22
    2a1c:	7f 93       	push	r23
    2a1e:	8f 93       	push	r24
    2a20:	9f 93       	push	r25
    2a22:	af 93       	push	r26
    2a24:	bf 93       	push	r27
    2a26:	ef 93       	push	r30
    2a28:	ff 93       	push	r31
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER0_CompareMatchCallBack){
    2a32:	80 91 ca 01 	lds	r24, 0x01CA
    2a36:	90 91 cb 01 	lds	r25, 0x01CB
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	29 f0       	breq	.+10     	; 0x2a48 <__vector_10+0x40>

		TIMER0_CompareMatchCallBack();
    2a3e:	e0 91 ca 01 	lds	r30, 0x01CA
    2a42:	f0 91 cb 01 	lds	r31, 0x01CB
    2a46:	09 95       	icall
	}
	else{ /* Return error */ }
}
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	ff 91       	pop	r31
    2a4e:	ef 91       	pop	r30
    2a50:	bf 91       	pop	r27
    2a52:	af 91       	pop	r26
    2a54:	9f 91       	pop	r25
    2a56:	8f 91       	pop	r24
    2a58:	7f 91       	pop	r23
    2a5a:	6f 91       	pop	r22
    2a5c:	5f 91       	pop	r21
    2a5e:	4f 91       	pop	r20
    2a60:	3f 91       	pop	r19
    2a62:	2f 91       	pop	r18
    2a64:	0f 90       	pop	r0
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	0f 90       	pop	r0
    2a6a:	1f 90       	pop	r1
    2a6c:	18 95       	reti

00002a6e <__vector_11>:

/******************************************************************************
* !comment  :  ISR Function overflow interrupt.  						      *
******************************************************************************/

ISR( TIMER0_OVF ){
    2a6e:	1f 92       	push	r1
    2a70:	0f 92       	push	r0
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	0f 92       	push	r0
    2a76:	11 24       	eor	r1, r1
    2a78:	2f 93       	push	r18
    2a7a:	3f 93       	push	r19
    2a7c:	4f 93       	push	r20
    2a7e:	5f 93       	push	r21
    2a80:	6f 93       	push	r22
    2a82:	7f 93       	push	r23
    2a84:	8f 93       	push	r24
    2a86:	9f 93       	push	r25
    2a88:	af 93       	push	r26
    2a8a:	bf 93       	push	r27
    2a8c:	ef 93       	push	r30
    2a8e:	ff 93       	push	r31
    2a90:	df 93       	push	r29
    2a92:	cf 93       	push	r28
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER0_OverflowCallBack){
    2a98:	80 91 c8 01 	lds	r24, 0x01C8
    2a9c:	90 91 c9 01 	lds	r25, 0x01C9
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	29 f0       	breq	.+10     	; 0x2aae <__vector_11+0x40>

		TIMER0_OverflowCallBack();
    2aa4:	e0 91 c8 01 	lds	r30, 0x01C8
    2aa8:	f0 91 c9 01 	lds	r31, 0x01C9
    2aac:	09 95       	icall
	}
	else{ /* Return error */ }
}
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	ff 91       	pop	r31
    2ab4:	ef 91       	pop	r30
    2ab6:	bf 91       	pop	r27
    2ab8:	af 91       	pop	r26
    2aba:	9f 91       	pop	r25
    2abc:	8f 91       	pop	r24
    2abe:	7f 91       	pop	r23
    2ac0:	6f 91       	pop	r22
    2ac2:	5f 91       	pop	r21
    2ac4:	4f 91       	pop	r20
    2ac6:	3f 91       	pop	r19
    2ac8:	2f 91       	pop	r18
    2aca:	0f 90       	pop	r0
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	0f 90       	pop	r0
    2ad0:	1f 90       	pop	r1
    2ad2:	18 95       	reti

00002ad4 <TIMER1_voidInit>:
/******************************************************************************
* Description 	: TIMER1 Initialization Function to select timer mode         *
*			      & Prescaler vale.                                           *
******************************************************************************/

void TIMER1_voidInit(Timer1_Mode_t Mode, Timer1_Scaler_t Prescaler){
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	00 d0       	rcall	.+0      	; 0x2ada <TIMER1_voidInit+0x6>
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <TIMER1_voidInit+0x8>
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	6a 83       	std	Y+2, r22	; 0x02

	switch(Mode){
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	3c 83       	std	Y+4, r19	; 0x04
    2aec:	2b 83       	std	Y+3, r18	; 0x03
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	9c 81       	ldd	r25, Y+4	; 0x04
    2af2:	87 30       	cpi	r24, 0x07	; 7
    2af4:	91 05       	cpc	r25, r1
    2af6:	09 f4       	brne	.+2      	; 0x2afa <TIMER1_voidInit+0x26>
    2af8:	24 c1       	rjmp	.+584    	; 0x2d42 <TIMER1_voidInit+0x26e>
    2afa:	2b 81       	ldd	r18, Y+3	; 0x03
    2afc:	3c 81       	ldd	r19, Y+4	; 0x04
    2afe:	28 30       	cpi	r18, 0x08	; 8
    2b00:	31 05       	cpc	r19, r1
    2b02:	4c f5       	brge	.+82     	; 0x2b56 <TIMER1_voidInit+0x82>
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03
    2b06:	9c 81       	ldd	r25, Y+4	; 0x04
    2b08:	83 30       	cpi	r24, 0x03	; 3
    2b0a:	91 05       	cpc	r25, r1
    2b0c:	09 f4       	brne	.+2      	; 0x2b10 <TIMER1_voidInit+0x3c>
    2b0e:	a5 c0       	rjmp	.+330    	; 0x2c5a <TIMER1_voidInit+0x186>
    2b10:	2b 81       	ldd	r18, Y+3	; 0x03
    2b12:	3c 81       	ldd	r19, Y+4	; 0x04
    2b14:	24 30       	cpi	r18, 0x04	; 4
    2b16:	31 05       	cpc	r19, r1
    2b18:	8c f4       	brge	.+34     	; 0x2b3c <TIMER1_voidInit+0x68>
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1e:	81 30       	cpi	r24, 0x01	; 1
    2b20:	91 05       	cpc	r25, r1
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <TIMER1_voidInit+0x52>
    2b24:	60 c0       	rjmp	.+192    	; 0x2be6 <TIMER1_voidInit+0x112>
    2b26:	2b 81       	ldd	r18, Y+3	; 0x03
    2b28:	3c 81       	ldd	r19, Y+4	; 0x04
    2b2a:	22 30       	cpi	r18, 0x02	; 2
    2b2c:	31 05       	cpc	r19, r1
    2b2e:	0c f0       	brlt	.+2      	; 0x2b32 <TIMER1_voidInit+0x5e>
    2b30:	77 c0       	rjmp	.+238    	; 0x2c20 <TIMER1_voidInit+0x14c>
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
    2b34:	9c 81       	ldd	r25, Y+4	; 0x04
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	c9 f1       	breq	.+114    	; 0x2bac <TIMER1_voidInit+0xd8>
    2b3a:	ea c1       	rjmp	.+980    	; 0x2f10 <TIMER1_voidInit+0x43c>
    2b3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b40:	25 30       	cpi	r18, 0x05	; 5
    2b42:	31 05       	cpc	r19, r1
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <TIMER1_voidInit+0x74>
    2b46:	c3 c0       	rjmp	.+390    	; 0x2cce <TIMER1_voidInit+0x1fa>
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	86 30       	cpi	r24, 0x06	; 6
    2b4e:	91 05       	cpc	r25, r1
    2b50:	0c f0       	brlt	.+2      	; 0x2b54 <TIMER1_voidInit+0x80>
    2b52:	da c0       	rjmp	.+436    	; 0x2d08 <TIMER1_voidInit+0x234>
    2b54:	9f c0       	rjmp	.+318    	; 0x2c94 <TIMER1_voidInit+0x1c0>
    2b56:	2b 81       	ldd	r18, Y+3	; 0x03
    2b58:	3c 81       	ldd	r19, Y+4	; 0x04
    2b5a:	2b 30       	cpi	r18, 0x0B	; 11
    2b5c:	31 05       	cpc	r19, r1
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <TIMER1_voidInit+0x8e>
    2b60:	64 c1       	rjmp	.+712    	; 0x2e2a <TIMER1_voidInit+0x356>
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	9c 81       	ldd	r25, Y+4	; 0x04
    2b66:	8c 30       	cpi	r24, 0x0C	; 12
    2b68:	91 05       	cpc	r25, r1
    2b6a:	6c f4       	brge	.+26     	; 0x2b86 <TIMER1_voidInit+0xb2>
    2b6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b70:	29 30       	cpi	r18, 0x09	; 9
    2b72:	31 05       	cpc	r19, r1
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <TIMER1_voidInit+0xa4>
    2b76:	1f c1       	rjmp	.+574    	; 0x2db6 <TIMER1_voidInit+0x2e2>
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7c:	8a 30       	cpi	r24, 0x0A	; 10
    2b7e:	91 05       	cpc	r25, r1
    2b80:	0c f0       	brlt	.+2      	; 0x2b84 <TIMER1_voidInit+0xb0>
    2b82:	36 c1       	rjmp	.+620    	; 0x2df0 <TIMER1_voidInit+0x31c>
    2b84:	fb c0       	rjmp	.+502    	; 0x2d7c <TIMER1_voidInit+0x2a8>
    2b86:	2b 81       	ldd	r18, Y+3	; 0x03
    2b88:	3c 81       	ldd	r19, Y+4	; 0x04
    2b8a:	2d 30       	cpi	r18, 0x0D	; 13
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <TIMER1_voidInit+0xbe>
    2b90:	86 c1       	rjmp	.+780    	; 0x2e9e <TIMER1_voidInit+0x3ca>
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	9c 81       	ldd	r25, Y+4	; 0x04
    2b96:	8d 30       	cpi	r24, 0x0D	; 13
    2b98:	91 05       	cpc	r25, r1
    2b9a:	0c f4       	brge	.+2      	; 0x2b9e <TIMER1_voidInit+0xca>
    2b9c:	63 c1       	rjmp	.+710    	; 0x2e64 <TIMER1_voidInit+0x390>
    2b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ba2:	2e 30       	cpi	r18, 0x0E	; 14
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <TIMER1_voidInit+0xd6>
    2ba8:	97 c1       	rjmp	.+814    	; 0x2ed8 <TIMER1_voidInit+0x404>
    2baa:	b2 c1       	rjmp	.+868    	; 0x2f10 <TIMER1_voidInit+0x43c>

		case TIMER1_NORMAL_MODE:
			/* Timer1 Mode Normal or Overflow */
			CLR_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    2bac:	af e4       	ldi	r26, 0x4F	; 79
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	ef e4       	ldi	r30, 0x4F	; 79
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	8e 7f       	andi	r24, 0xFE	; 254
    2bb8:	8c 93       	st	X, r24
    2bba:	af e4       	ldi	r26, 0x4F	; 79
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	ef e4       	ldi	r30, 0x4F	; 79
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	8d 7f       	andi	r24, 0xFD	; 253
    2bc6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    2bc8:	ae e4       	ldi	r26, 0x4E	; 78
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	ee e4       	ldi	r30, 0x4E	; 78
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	87 7f       	andi	r24, 0xF7	; 247
    2bd4:	8c 93       	st	X, r24
    2bd6:	ae e4       	ldi	r26, 0x4E	; 78
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	ee e4       	ldi	r30, 0x4E	; 78
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	8f 7e       	andi	r24, 0xEF	; 239
    2be2:	8c 93       	st	X, r24
    2be4:	95 c1       	rjmp	.+810    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PHASE_CORRECT_8BIT_MODE:
			/* Timer1 Mode PWM, Phase Correct, 8-bit */
			SET_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    2be6:	af e4       	ldi	r26, 0x4F	; 79
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	ef e4       	ldi	r30, 0x4F	; 79
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	81 60       	ori	r24, 0x01	; 1
    2bf2:	8c 93       	st	X, r24
    2bf4:	af e4       	ldi	r26, 0x4F	; 79
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	ef e4       	ldi	r30, 0x4F	; 79
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	8d 7f       	andi	r24, 0xFD	; 253
    2c00:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    2c02:	ae e4       	ldi	r26, 0x4E	; 78
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	ee e4       	ldi	r30, 0x4E	; 78
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	87 7f       	andi	r24, 0xF7	; 247
    2c0e:	8c 93       	st	X, r24
    2c10:	ae e4       	ldi	r26, 0x4E	; 78
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	ee e4       	ldi	r30, 0x4E	; 78
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	8f 7e       	andi	r24, 0xEF	; 239
    2c1c:	8c 93       	st	X, r24
    2c1e:	78 c1       	rjmp	.+752    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PHASE_CORRECT_9BIT_MODE:
			/* Timer1 Mode PWM, Phase Correct, 9-bit */
			CLR_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    2c20:	af e4       	ldi	r26, 0x4F	; 79
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	ef e4       	ldi	r30, 0x4F	; 79
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	8e 7f       	andi	r24, 0xFE	; 254
    2c2c:	8c 93       	st	X, r24
    2c2e:	af e4       	ldi	r26, 0x4F	; 79
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	ef e4       	ldi	r30, 0x4F	; 79
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	82 60       	ori	r24, 0x02	; 2
    2c3a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    2c3c:	ae e4       	ldi	r26, 0x4E	; 78
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	ee e4       	ldi	r30, 0x4E	; 78
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	87 7f       	andi	r24, 0xF7	; 247
    2c48:	8c 93       	st	X, r24
    2c4a:	ae e4       	ldi	r26, 0x4E	; 78
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	ee e4       	ldi	r30, 0x4E	; 78
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	8f 7e       	andi	r24, 0xEF	; 239
    2c56:	8c 93       	st	X, r24
    2c58:	5b c1       	rjmp	.+694    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PHASE_CORRECT_10BIT_MODE:
			/* Timer1 Mode PWM, Phase Correct, 10-bit */
			SET_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    2c5a:	af e4       	ldi	r26, 0x4F	; 79
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	ef e4       	ldi	r30, 0x4F	; 79
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	81 60       	ori	r24, 0x01	; 1
    2c66:	8c 93       	st	X, r24
    2c68:	af e4       	ldi	r26, 0x4F	; 79
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	ef e4       	ldi	r30, 0x4F	; 79
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	82 60       	ori	r24, 0x02	; 2
    2c74:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    2c76:	ae e4       	ldi	r26, 0x4E	; 78
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	ee e4       	ldi	r30, 0x4E	; 78
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	87 7f       	andi	r24, 0xF7	; 247
    2c82:	8c 93       	st	X, r24
    2c84:	ae e4       	ldi	r26, 0x4E	; 78
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	ee e4       	ldi	r30, 0x4E	; 78
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	8f 7e       	andi	r24, 0xEF	; 239
    2c90:	8c 93       	st	X, r24
    2c92:	3e c1       	rjmp	.+636    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_CTC_OCR1A_MODE:
			/* Timer1 Mode CTC Top OCR1A */
			CLR_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    2c94:	af e4       	ldi	r26, 0x4F	; 79
    2c96:	b0 e0       	ldi	r27, 0x00	; 0
    2c98:	ef e4       	ldi	r30, 0x4F	; 79
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	8e 7f       	andi	r24, 0xFE	; 254
    2ca0:	8c 93       	st	X, r24
    2ca2:	af e4       	ldi	r26, 0x4F	; 79
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	ef e4       	ldi	r30, 0x4F	; 79
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	8d 7f       	andi	r24, 0xFD	; 253
    2cae:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    2cb0:	ae e4       	ldi	r26, 0x4E	; 78
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	ee e4       	ldi	r30, 0x4E	; 78
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	88 60       	ori	r24, 0x08	; 8
    2cbc:	8c 93       	st	X, r24
    2cbe:	ae e4       	ldi	r26, 0x4E	; 78
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	ee e4       	ldi	r30, 0x4E	; 78
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	8f 7e       	andi	r24, 0xEF	; 239
    2cca:	8c 93       	st	X, r24
    2ccc:	21 c1       	rjmp	.+578    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_FAST_PWM_8BIT_MODE:
			/* Timer1 Mode Fast PWM, 8-bit */
			SET_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    2cce:	af e4       	ldi	r26, 0x4F	; 79
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	ef e4       	ldi	r30, 0x4F	; 79
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	81 60       	ori	r24, 0x01	; 1
    2cda:	8c 93       	st	X, r24
    2cdc:	af e4       	ldi	r26, 0x4F	; 79
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	ef e4       	ldi	r30, 0x4F	; 79
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	8d 7f       	andi	r24, 0xFD	; 253
    2ce8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    2cea:	ae e4       	ldi	r26, 0x4E	; 78
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	ee e4       	ldi	r30, 0x4E	; 78
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	88 60       	ori	r24, 0x08	; 8
    2cf6:	8c 93       	st	X, r24
    2cf8:	ae e4       	ldi	r26, 0x4E	; 78
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	ee e4       	ldi	r30, 0x4E	; 78
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	8f 7e       	andi	r24, 0xEF	; 239
    2d04:	8c 93       	st	X, r24
    2d06:	04 c1       	rjmp	.+520    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_FAST_PWM_9BIT_MODE:
			/* Timer1 Mode Fast PWM, 9-bit */
			CLR_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    2d08:	af e4       	ldi	r26, 0x4F	; 79
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	ef e4       	ldi	r30, 0x4F	; 79
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	8e 7f       	andi	r24, 0xFE	; 254
    2d14:	8c 93       	st	X, r24
    2d16:	af e4       	ldi	r26, 0x4F	; 79
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	ef e4       	ldi	r30, 0x4F	; 79
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	82 60       	ori	r24, 0x02	; 2
    2d22:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    2d24:	ae e4       	ldi	r26, 0x4E	; 78
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	ee e4       	ldi	r30, 0x4E	; 78
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 60       	ori	r24, 0x08	; 8
    2d30:	8c 93       	st	X, r24
    2d32:	ae e4       	ldi	r26, 0x4E	; 78
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	ee e4       	ldi	r30, 0x4E	; 78
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	8f 7e       	andi	r24, 0xEF	; 239
    2d3e:	8c 93       	st	X, r24
    2d40:	e7 c0       	rjmp	.+462    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_FAST_PWM_10BIT_MODE:
			/* Timer1 Mode Fast PWM, 10-bit */
			SET_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    2d42:	af e4       	ldi	r26, 0x4F	; 79
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	ef e4       	ldi	r30, 0x4F	; 79
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	81 60       	ori	r24, 0x01	; 1
    2d4e:	8c 93       	st	X, r24
    2d50:	af e4       	ldi	r26, 0x4F	; 79
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	ef e4       	ldi	r30, 0x4F	; 79
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	82 60       	ori	r24, 0x02	; 2
    2d5c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    2d5e:	ae e4       	ldi	r26, 0x4E	; 78
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	ee e4       	ldi	r30, 0x4E	; 78
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	88 60       	ori	r24, 0x08	; 8
    2d6a:	8c 93       	st	X, r24
    2d6c:	ae e4       	ldi	r26, 0x4E	; 78
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	ee e4       	ldi	r30, 0x4E	; 78
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	8f 7e       	andi	r24, 0xEF	; 239
    2d78:	8c 93       	st	X, r24
    2d7a:	ca c0       	rjmp	.+404    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PWM_PHASE_FREQ_CORRECT_ICR1_MODE:
			/* Timer1 Mode PWM, Phase and Frequency Correct Top ICR1 */
			CLR_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    2d7c:	af e4       	ldi	r26, 0x4F	; 79
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	ef e4       	ldi	r30, 0x4F	; 79
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	8e 7f       	andi	r24, 0xFE	; 254
    2d88:	8c 93       	st	X, r24
    2d8a:	af e4       	ldi	r26, 0x4F	; 79
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	ef e4       	ldi	r30, 0x4F	; 79
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	8d 7f       	andi	r24, 0xFD	; 253
    2d96:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		SET_BIT(TCCR1B, WGM13);
    2d98:	ae e4       	ldi	r26, 0x4E	; 78
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	ee e4       	ldi	r30, 0x4E	; 78
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	87 7f       	andi	r24, 0xF7	; 247
    2da4:	8c 93       	st	X, r24
    2da6:	ae e4       	ldi	r26, 0x4E	; 78
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	ee e4       	ldi	r30, 0x4E	; 78
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	80 61       	ori	r24, 0x10	; 16
    2db2:	8c 93       	st	X, r24
    2db4:	ad c0       	rjmp	.+346    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PWM_PHASE_FREQ_CORRECT_OCR1A_MODE:
			/* Timer1 Mode PWM, Phase and Frequency Correct Top OCR1A */
			SET_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    2db6:	af e4       	ldi	r26, 0x4F	; 79
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	ef e4       	ldi	r30, 0x4F	; 79
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	81 60       	ori	r24, 0x01	; 1
    2dc2:	8c 93       	st	X, r24
    2dc4:	af e4       	ldi	r26, 0x4F	; 79
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	ef e4       	ldi	r30, 0x4F	; 79
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	8d 7f       	andi	r24, 0xFD	; 253
    2dd0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		SET_BIT(TCCR1B, WGM13);
    2dd2:	ae e4       	ldi	r26, 0x4E	; 78
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	ee e4       	ldi	r30, 0x4E	; 78
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	87 7f       	andi	r24, 0xF7	; 247
    2dde:	8c 93       	st	X, r24
    2de0:	ae e4       	ldi	r26, 0x4E	; 78
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	ee e4       	ldi	r30, 0x4E	; 78
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	80 61       	ori	r24, 0x10	; 16
    2dec:	8c 93       	st	X, r24
    2dee:	90 c0       	rjmp	.+288    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PWM_PHASE_CORRECT_ICR1_MODE:
			/* Timer1 Mode PWM, Phase Correct Top ICR1 */
			CLR_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    2df0:	af e4       	ldi	r26, 0x4F	; 79
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	ef e4       	ldi	r30, 0x4F	; 79
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	8e 7f       	andi	r24, 0xFE	; 254
    2dfc:	8c 93       	st	X, r24
    2dfe:	af e4       	ldi	r26, 0x4F	; 79
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	ef e4       	ldi	r30, 0x4F	; 79
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	82 60       	ori	r24, 0x02	; 2
    2e0a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		SET_BIT(TCCR1B, WGM13);
    2e0c:	ae e4       	ldi	r26, 0x4E	; 78
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	ee e4       	ldi	r30, 0x4E	; 78
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	87 7f       	andi	r24, 0xF7	; 247
    2e18:	8c 93       	st	X, r24
    2e1a:	ae e4       	ldi	r26, 0x4E	; 78
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	ee e4       	ldi	r30, 0x4E	; 78
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 81       	ld	r24, Z
    2e24:	80 61       	ori	r24, 0x10	; 16
    2e26:	8c 93       	st	X, r24
    2e28:	73 c0       	rjmp	.+230    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PWM_PHASE_CORRECT_OCR1A_MODE:
			/* Timer1 Mode PWM, Phase Correct Top OCR1A */
			SET_BIT(TCCR1A, WGM10);
    2e2a:	af e4       	ldi	r26, 0x4F	; 79
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	ef e4       	ldi	r30, 0x4F	; 79
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	81 60       	ori	r24, 0x01	; 1
    2e36:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2e38:	af e4       	ldi	r26, 0x4F	; 79
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	ef e4       	ldi	r30, 0x4F	; 79
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
    2e42:	82 60       	ori	r24, 0x02	; 2
    2e44:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);
    2e46:	ae e4       	ldi	r26, 0x4E	; 78
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	ee e4       	ldi	r30, 0x4E	; 78
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	87 7f       	andi	r24, 0xF7	; 247
    2e52:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    2e54:	ae e4       	ldi	r26, 0x4E	; 78
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	ee e4       	ldi	r30, 0x4E	; 78
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	80 61       	ori	r24, 0x10	; 16
    2e60:	8c 93       	st	X, r24
    2e62:	56 c0       	rjmp	.+172    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_CTC_ICR1_MODE:
			/* Timer1 Mode CTC Top ICR1 */
			CLR_BIT(TCCR1A, WGM10);
    2e64:	af e4       	ldi	r26, 0x4F	; 79
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	ef e4       	ldi	r30, 0x4F	; 79
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	8e 7f       	andi	r24, 0xFE	; 254
    2e70:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, WGM11);
    2e72:	af e4       	ldi	r26, 0x4F	; 79
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	ef e4       	ldi	r30, 0x4F	; 79
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	8d 7f       	andi	r24, 0xFD	; 253
    2e7e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2e80:	ae e4       	ldi	r26, 0x4E	; 78
    2e82:	b0 e0       	ldi	r27, 0x00	; 0
    2e84:	ee e4       	ldi	r30, 0x4E	; 78
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	80 81       	ld	r24, Z
    2e8a:	88 60       	ori	r24, 0x08	; 8
    2e8c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    2e8e:	ae e4       	ldi	r26, 0x4E	; 78
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	ee e4       	ldi	r30, 0x4E	; 78
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	80 61       	ori	r24, 0x10	; 16
    2e9a:	8c 93       	st	X, r24
    2e9c:	39 c0       	rjmp	.+114    	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_FAST_PWM_ICR1_MODE:
			/* Timer1 Mode Fast PWM Top ICR1 */
			CLR_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    2e9e:	af e4       	ldi	r26, 0x4F	; 79
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	ef e4       	ldi	r30, 0x4F	; 79
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	80 81       	ld	r24, Z
    2ea8:	8e 7f       	andi	r24, 0xFE	; 254
    2eaa:	8c 93       	st	X, r24
    2eac:	af e4       	ldi	r26, 0x4F	; 79
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	ef e4       	ldi	r30, 0x4F	; 79
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	82 60       	ori	r24, 0x02	; 2
    2eb8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		SET_BIT(TCCR1B, WGM13);
    2eba:	ae e4       	ldi	r26, 0x4E	; 78
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	ee e4       	ldi	r30, 0x4E	; 78
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	88 60       	ori	r24, 0x08	; 8
    2ec6:	8c 93       	st	X, r24
    2ec8:	ae e4       	ldi	r26, 0x4E	; 78
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	ee e4       	ldi	r30, 0x4E	; 78
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	80 61       	ori	r24, 0x10	; 16
    2ed4:	8c 93       	st	X, r24
    2ed6:	1c c0       	rjmp	.+56     	; 0x2f10 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_FAST_PWM_OCR1A_MODE:
			/* Timer1 Mode Fast PWM Top OCR1A */
			SET_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    2ed8:	af e4       	ldi	r26, 0x4F	; 79
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	ef e4       	ldi	r30, 0x4F	; 79
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	81 60       	ori	r24, 0x01	; 1
    2ee4:	8c 93       	st	X, r24
    2ee6:	af e4       	ldi	r26, 0x4F	; 79
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	ef e4       	ldi	r30, 0x4F	; 79
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	82 60       	ori	r24, 0x02	; 2
    2ef2:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		SET_BIT(TCCR1B, WGM13);
    2ef4:	ae e4       	ldi	r26, 0x4E	; 78
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	ee e4       	ldi	r30, 0x4E	; 78
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	88 60       	ori	r24, 0x08	; 8
    2f00:	8c 93       	st	X, r24
    2f02:	ae e4       	ldi	r26, 0x4E	; 78
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	ee e4       	ldi	r30, 0x4E	; 78
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	80 61       	ori	r24, 0x10	; 16
    2f0e:	8c 93       	st	X, r24
		break;
		default:    break;
	}

	/* Prescaler mask */
	TCCR1B &= PRESCALER_MASK;
    2f10:	ae e4       	ldi	r26, 0x4E	; 78
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	ee e4       	ldi	r30, 0x4E	; 78
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	88 7f       	andi	r24, 0xF8	; 248
    2f1c:	8c 93       	st	X, r24
	/* Set prescaler value */
	TCCR1B |= Prescaler;
    2f1e:	ae e4       	ldi	r26, 0x4E	; 78
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	ee e4       	ldi	r30, 0x4E	; 78
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	90 81       	ld	r25, Z
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	89 2b       	or	r24, r25
    2f2c:	8c 93       	st	X, r24
	
}
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	08 95       	ret

00002f3c <TIMER1_voidOutputCompareInit>:
/******************************************************************************
* Description 	: TIMER1 Output Compare initialization Function to            *
*                 Select Output Compare Mode & Channel.                       *
******************************************************************************/

void TIMER1_voidOutputCompareInit(Timer1_OutputCompareMode_t OC1_Mode, Timer1_Channel_t OC1_Channel){
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	2c 97       	sbiw	r28, 0x0c	; 12
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	6a 83       	std	Y+2, r22	; 0x02

	switch(OC1_Mode){
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	28 2f       	mov	r18, r24
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	3c 87       	std	Y+12, r19	; 0x0c
    2f5c:	2b 87       	std	Y+11, r18	; 0x0b
    2f5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f60:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f62:	81 30       	cpi	r24, 0x01	; 1
    2f64:	91 05       	cpc	r25, r1
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <TIMER1_voidOutputCompareInit+0x2e>
    2f68:	44 c0       	rjmp	.+136    	; 0x2ff2 <TIMER1_voidOutputCompareInit+0xb6>
    2f6a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f6c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f6e:	22 30       	cpi	r18, 0x02	; 2
    2f70:	31 05       	cpc	r19, r1
    2f72:	2c f4       	brge	.+10     	; 0x2f7e <TIMER1_voidOutputCompareInit+0x42>
    2f74:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f76:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f78:	00 97       	sbiw	r24, 0x00	; 0
    2f7a:	71 f0       	breq	.+28     	; 0x2f98 <TIMER1_voidOutputCompareInit+0x5c>
    2f7c:	c0 c0       	rjmp	.+384    	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>
    2f7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f80:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f82:	22 30       	cpi	r18, 0x02	; 2
    2f84:	31 05       	cpc	r19, r1
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <TIMER1_voidOutputCompareInit+0x4e>
    2f88:	61 c0       	rjmp	.+194    	; 0x304c <TIMER1_voidOutputCompareInit+0x110>
    2f8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f8e:	83 30       	cpi	r24, 0x03	; 3
    2f90:	91 05       	cpc	r25, r1
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <TIMER1_voidOutputCompareInit+0x5a>
    2f94:	88 c0       	rjmp	.+272    	; 0x30a6 <TIMER1_voidOutputCompareInit+0x16a>
    2f96:	b3 c0       	rjmp	.+358    	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>

		case TIMER1_OC1_DISCONNECTED_MODE:

			switch(OC1_Channel){
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	28 2f       	mov	r18, r24
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	3a 87       	std	Y+10, r19	; 0x0a
    2fa0:	29 87       	std	Y+9, r18	; 0x09
    2fa2:	89 85       	ldd	r24, Y+9	; 0x09
    2fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	31 f0       	breq	.+12     	; 0x2fb6 <TIMER1_voidOutputCompareInit+0x7a>
    2faa:	29 85       	ldd	r18, Y+9	; 0x09
    2fac:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fae:	21 30       	cpi	r18, 0x01	; 1
    2fb0:	31 05       	cpc	r19, r1
    2fb2:	81 f0       	breq	.+32     	; 0x2fd4 <TIMER1_voidOutputCompareInit+0x98>
    2fb4:	a4 c0       	rjmp	.+328    	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>

				case TIMER1_OCR1A:
					/* Select channel A normal */
					CLR_BIT(TCCR1A, COM1A0);		CLR_BIT(TCCR1A, COM1A1);
    2fb6:	af e4       	ldi	r26, 0x4F	; 79
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	ef e4       	ldi	r30, 0x4F	; 79
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	8f 7b       	andi	r24, 0xBF	; 191
    2fc2:	8c 93       	st	X, r24
    2fc4:	af e4       	ldi	r26, 0x4F	; 79
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	ef e4       	ldi	r30, 0x4F	; 79
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	8f 77       	andi	r24, 0x7F	; 127
    2fd0:	8c 93       	st	X, r24
    2fd2:	95 c0       	rjmp	.+298    	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>
				break;

				case TIMER1_OCR1B:
					/* Select channel B normal */
					CLR_BIT(TCCR1A, COM1B0);		CLR_BIT(TCCR1A, COM1B1);
    2fd4:	af e4       	ldi	r26, 0x4F	; 79
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	ef e4       	ldi	r30, 0x4F	; 79
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	8f 7e       	andi	r24, 0xEF	; 239
    2fe0:	8c 93       	st	X, r24
    2fe2:	af e4       	ldi	r26, 0x4F	; 79
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	ef e4       	ldi	r30, 0x4F	; 79
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	8f 7d       	andi	r24, 0xDF	; 223
    2fee:	8c 93       	st	X, r24
    2ff0:	86 c0       	rjmp	.+268    	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>
			}
		break;

		case TIMER1_OC1_TOGGLE_MODE:

			switch(OC1_Channel){
    2ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff4:	28 2f       	mov	r18, r24
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	38 87       	std	Y+8, r19	; 0x08
    2ffa:	2f 83       	std	Y+7, r18	; 0x07
    2ffc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ffe:	98 85       	ldd	r25, Y+8	; 0x08
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	31 f0       	breq	.+12     	; 0x3010 <TIMER1_voidOutputCompareInit+0xd4>
    3004:	2f 81       	ldd	r18, Y+7	; 0x07
    3006:	38 85       	ldd	r19, Y+8	; 0x08
    3008:	21 30       	cpi	r18, 0x01	; 1
    300a:	31 05       	cpc	r19, r1
    300c:	81 f0       	breq	.+32     	; 0x302e <TIMER1_voidOutputCompareInit+0xf2>
    300e:	77 c0       	rjmp	.+238    	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>

				case TIMER1_OCR1A:
					/* Select Channel A Toggle */
					SET_BIT(TCCR1A, COM1A0);		CLR_BIT(TCCR1A, COM1A1);
    3010:	af e4       	ldi	r26, 0x4F	; 79
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	ef e4       	ldi	r30, 0x4F	; 79
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	80 64       	ori	r24, 0x40	; 64
    301c:	8c 93       	st	X, r24
    301e:	af e4       	ldi	r26, 0x4F	; 79
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	ef e4       	ldi	r30, 0x4F	; 79
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	8f 77       	andi	r24, 0x7F	; 127
    302a:	8c 93       	st	X, r24
    302c:	68 c0       	rjmp	.+208    	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>
				break;

				case TIMER1_OCR1B:
					/* Select Channel B Toggle */
					SET_BIT(TCCR1A, COM1B0);		CLR_BIT(TCCR1A, COM1B1);
    302e:	af e4       	ldi	r26, 0x4F	; 79
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	ef e4       	ldi	r30, 0x4F	; 79
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	80 61       	ori	r24, 0x10	; 16
    303a:	8c 93       	st	X, r24
    303c:	af e4       	ldi	r26, 0x4F	; 79
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	ef e4       	ldi	r30, 0x4F	; 79
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	8f 7d       	andi	r24, 0xDF	; 223
    3048:	8c 93       	st	X, r24
    304a:	59 c0       	rjmp	.+178    	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>
			}
		break;

		case TIMER1_OC1_NON_INVERTING_MODE:

			switch(OC1_Channel){
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	28 2f       	mov	r18, r24
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	3e 83       	std	Y+6, r19	; 0x06
    3054:	2d 83       	std	Y+5, r18	; 0x05
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	9e 81       	ldd	r25, Y+6	; 0x06
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	31 f0       	breq	.+12     	; 0x306a <TIMER1_voidOutputCompareInit+0x12e>
    305e:	2d 81       	ldd	r18, Y+5	; 0x05
    3060:	3e 81       	ldd	r19, Y+6	; 0x06
    3062:	21 30       	cpi	r18, 0x01	; 1
    3064:	31 05       	cpc	r19, r1
    3066:	81 f0       	breq	.+32     	; 0x3088 <TIMER1_voidOutputCompareInit+0x14c>
    3068:	4a c0       	rjmp	.+148    	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>

				case TIMER1_OCR1A:
					/* Select Channel A Non-inverting */
					CLR_BIT(TCCR1A, COM1A0);		SET_BIT(TCCR1A, COM1A1);
    306a:	af e4       	ldi	r26, 0x4F	; 79
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	ef e4       	ldi	r30, 0x4F	; 79
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	8f 7b       	andi	r24, 0xBF	; 191
    3076:	8c 93       	st	X, r24
    3078:	af e4       	ldi	r26, 0x4F	; 79
    307a:	b0 e0       	ldi	r27, 0x00	; 0
    307c:	ef e4       	ldi	r30, 0x4F	; 79
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	80 81       	ld	r24, Z
    3082:	80 68       	ori	r24, 0x80	; 128
    3084:	8c 93       	st	X, r24
    3086:	3b c0       	rjmp	.+118    	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>
				break;

				case TIMER1_OCR1B:
					/* Select Channel B Non-inverting */
					CLR_BIT(TCCR1A, COM1B0);		SET_BIT(TCCR1A, COM1B1);
    3088:	af e4       	ldi	r26, 0x4F	; 79
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	ef e4       	ldi	r30, 0x4F	; 79
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	8f 7e       	andi	r24, 0xEF	; 239
    3094:	8c 93       	st	X, r24
    3096:	af e4       	ldi	r26, 0x4F	; 79
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	ef e4       	ldi	r30, 0x4F	; 79
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	80 62       	ori	r24, 0x20	; 32
    30a2:	8c 93       	st	X, r24
    30a4:	2c c0       	rjmp	.+88     	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>
			}
		break;

		case TIMER1_OC1_INVERTING_MODE:

			switch(OC1_Channel){
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	3c 83       	std	Y+4, r19	; 0x04
    30ae:	2b 83       	std	Y+3, r18	; 0x03
    30b0:	8b 81       	ldd	r24, Y+3	; 0x03
    30b2:	9c 81       	ldd	r25, Y+4	; 0x04
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	31 f0       	breq	.+12     	; 0x30c4 <TIMER1_voidOutputCompareInit+0x188>
    30b8:	2b 81       	ldd	r18, Y+3	; 0x03
    30ba:	3c 81       	ldd	r19, Y+4	; 0x04
    30bc:	21 30       	cpi	r18, 0x01	; 1
    30be:	31 05       	cpc	r19, r1
    30c0:	81 f0       	breq	.+32     	; 0x30e2 <TIMER1_voidOutputCompareInit+0x1a6>
    30c2:	1d c0       	rjmp	.+58     	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>

				case TIMER1_OCR1A:
					/* Select Channel A Inverting */
					SET_BIT(TCCR1A, COM1A0);		SET_BIT(TCCR1A, COM1A1);
    30c4:	af e4       	ldi	r26, 0x4F	; 79
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	ef e4       	ldi	r30, 0x4F	; 79
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	80 64       	ori	r24, 0x40	; 64
    30d0:	8c 93       	st	X, r24
    30d2:	af e4       	ldi	r26, 0x4F	; 79
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	ef e4       	ldi	r30, 0x4F	; 79
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	80 81       	ld	r24, Z
    30dc:	80 68       	ori	r24, 0x80	; 128
    30de:	8c 93       	st	X, r24
    30e0:	0e c0       	rjmp	.+28     	; 0x30fe <TIMER1_voidOutputCompareInit+0x1c2>
				break;

				case TIMER1_OCR1B:
					/* Select Channel B Inverting */
					SET_BIT(TCCR1A, COM1B0);		SET_BIT(TCCR1A, COM1B1);
    30e2:	af e4       	ldi	r26, 0x4F	; 79
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	ef e4       	ldi	r30, 0x4F	; 79
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	80 81       	ld	r24, Z
    30ec:	80 61       	ori	r24, 0x10	; 16
    30ee:	8c 93       	st	X, r24
    30f0:	af e4       	ldi	r26, 0x4F	; 79
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	ef e4       	ldi	r30, 0x4F	; 79
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	80 81       	ld	r24, Z
    30fa:	80 62       	ori	r24, 0x20	; 32
    30fc:	8c 93       	st	X, r24
				default:  break;
			}
		break;
		default:  break;
	}
}
    30fe:	2c 96       	adiw	r28, 0x0c	; 12
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret

00003110 <TIMER1_u16GetICR1>:

/******************************************************************************
* Description 	: TIMER1 Get Input Capture Register1 Value Function.		  *
******************************************************************************/

uint16 TIMER1_u16GetICR1(void){
    3110:	df 93       	push	r29
    3112:	cf 93       	push	r28
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
    3118:	e6 e4       	ldi	r30, 0x46	; 70
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	91 81       	ldd	r25, Z+1	; 0x01
}
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <TIMER1_voidSetOCR1A>:

/******************************************************************************
* Description 	: TIMER1 Set Output Compare Register1 A Value.	              *
******************************************************************************/

void TIMER1_voidSetOCR1A(uint16 Copy_u16Value){
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	00 d0       	rcall	.+0      	; 0x312c <TIMER1_voidSetOCR1A+0x6>
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	9a 83       	std	Y+2, r25	; 0x02
    3132:	89 83       	std	Y+1, r24	; 0x01

	OCR1A = Copy_u16Value;
    3134:	ea e4       	ldi	r30, 0x4A	; 74
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	9a 81       	ldd	r25, Y+2	; 0x02
    313c:	91 83       	std	Z+1, r25	; 0x01
    313e:	80 83       	st	Z, r24

}
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <TIMER1_voidSetOCR1B>:

/******************************************************************************
* Description 	: TIMER1 Set Output Compare Register1 B Value.	              *
******************************************************************************/

void TIMER1_voidSetOCR1B(uint16 Copy_u16Value){
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	00 d0       	rcall	.+0      	; 0x3150 <TIMER1_voidSetOCR1B+0x6>
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	9a 83       	std	Y+2, r25	; 0x02
    3156:	89 83       	std	Y+1, r24	; 0x01

	OCR1B = Copy_u16Value;
    3158:	e8 e4       	ldi	r30, 0x48	; 72
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24

}
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	08 95       	ret

0000316e <TIMER1_voidSetICR1>:

/******************************************************************************
* Description 	: TIMER1 Set Input Capture Register1 Value.	                  *
******************************************************************************/

void TIMER1_voidSetICR1(uint16 Copy_u16Value){
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	00 d0       	rcall	.+0      	; 0x3174 <TIMER1_voidSetICR1+0x6>
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	9a 83       	std	Y+2, r25	; 0x02
    317a:	89 83       	std	Y+1, r24	; 0x01

	 ICR1 = Copy_u16Value;
    317c:	e6 e4       	ldi	r30, 0x46	; 70
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	9a 81       	ldd	r25, Y+2	; 0x02
    3184:	91 83       	std	Z+1, r25	; 0x01
    3186:	80 83       	st	Z, r24
}
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	08 95       	ret

00003192 <TIMER1_voidSetTimerValue>:

/******************************************************************************
* Description 	: TIMER1 Set Timer Value(TCNT1).	                          *
******************************************************************************/

void TIMER1_voidSetTimerValue(uint16 Copy_u16Value){
    3192:	df 93       	push	r29
    3194:	cf 93       	push	r28
    3196:	00 d0       	rcall	.+0      	; 0x3198 <TIMER1_voidSetTimerValue+0x6>
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	9a 83       	std	Y+2, r25	; 0x02
    319e:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Copy_u16Value;
    31a0:	ec e4       	ldi	r30, 0x4C	; 76
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	9a 81       	ldd	r25, Y+2	; 0x02
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	80 83       	st	Z, r24

}
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	08 95       	ret

000031b6 <TIMER1_voidReadTimerValue>:

/******************************************************************************
* Description 	: TIMER1 Read Timer Value(TCNT1).	                          *
******************************************************************************/

uint16 TIMER1_voidReadTimerValue(void){
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62

	return TCNT1;
    31be:	ec e4       	ldi	r30, 0x4C	; 76
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	80 81       	ld	r24, Z
    31c4:	91 81       	ldd	r25, Z+1	; 0x01

}
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <PWM1_voidInit>:

/******************************************************************************
* Description 	: TIMER1 PWM initialization Function.		                  *
******************************************************************************/

void PWM1_voidInit(void){
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62

	TIMER1_voidInit(TIMER1_FAST_PWM_ICR1_MODE, TIMER1_SCALER_8);
    31d4:	8d e0       	ldi	r24, 0x0D	; 13
    31d6:	62 e0       	ldi	r22, 0x02	; 2
    31d8:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <TIMER1_voidInit>

	TIMER1_voidOutputCompareInit(TIMER1_OC1_NON_INVERTING_MODE, TIMER1_OCR1A);
    31dc:	82 e0       	ldi	r24, 0x02	; 2
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <TIMER1_voidOutputCompareInit>

}
    31e4:	cf 91       	pop	r28
    31e6:	df 91       	pop	r29
    31e8:	08 95       	ret

000031ea <PWM1_voidFreqKHZ>:

/******************************************************************************
* Description 	: TIMER1 Generate PWM @ Frequency (KHZ) Function.		      *
******************************************************************************/

void PWM1_voidFreqKHZ(uint16 Copy_u16Freq){
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <PWM1_voidFreqKHZ+0x6>
    31f0:	00 d0       	rcall	.+0      	; 0x31f2 <PWM1_voidFreqKHZ+0x8>
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	9c 83       	std	Y+4, r25	; 0x04
    31f8:	8b 83       	std	Y+3, r24	; 0x03

	if(0 == Copy_u16Freq){
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	9c 81       	ldd	r25, Y+4	; 0x04
    31fe:	00 97       	sbiw	r24, 0x00	; 0
    3200:	d1 f0       	breq	.+52     	; 0x3236 <PWM1_voidFreqKHZ+0x4c>

		/* return error */
	}
	else{

		uint16 Local_u16TimeTotal = 1000 / Copy_u16Freq;
    3202:	88 ee       	ldi	r24, 0xE8	; 232
    3204:	93 e0       	ldi	r25, 0x03	; 3
    3206:	2b 81       	ldd	r18, Y+3	; 0x03
    3208:	3c 81       	ldd	r19, Y+4	; 0x04
    320a:	b9 01       	movw	r22, r18
    320c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__udivmodhi4>
    3210:	cb 01       	movw	r24, r22
    3212:	9a 83       	std	Y+2, r25	; 0x02
    3214:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u16TimeTotal >= 1){
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	9a 81       	ldd	r25, Y+2	; 0x02
    321a:	00 97       	sbiw	r24, 0x00	; 0
    321c:	41 f0       	breq	.+16     	; 0x322e <PWM1_voidFreqKHZ+0x44>

			ICR1 = Local_u16TimeTotal - 1;
    321e:	e6 e4       	ldi	r30, 0x46	; 70
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	9a 81       	ldd	r25, Y+2	; 0x02
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	91 83       	std	Z+1, r25	; 0x01
    322a:	80 83       	st	Z, r24
    322c:	04 c0       	rjmp	.+8      	; 0x3236 <PWM1_voidFreqKHZ+0x4c>
		}
		else{ ICR1 = 0; }
    322e:	e6 e4       	ldi	r30, 0x46	; 70
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	11 82       	std	Z+1, r1	; 0x01
    3234:	10 82       	st	Z, r1
	}
}
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	cf 91       	pop	r28
    3240:	df 91       	pop	r29
    3242:	08 95       	ret

00003244 <PWM1_voidFreqHZ>:

/******************************************************************************
* Description 	: TIMER1 Generate PWM @ Frequency (HZ) Function.		      *
******************************************************************************/

void PWM1_voidFreqHZ(uint16 Copy_u16Freq){
    3244:	df 93       	push	r29
    3246:	cf 93       	push	r28
    3248:	00 d0       	rcall	.+0      	; 0x324a <PWM1_voidFreqHZ+0x6>
    324a:	00 d0       	rcall	.+0      	; 0x324c <PWM1_voidFreqHZ+0x8>
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	9c 83       	std	Y+4, r25	; 0x04
    3252:	8b 83       	std	Y+3, r24	; 0x03

	if(0 == Copy_u16Freq){
    3254:	8b 81       	ldd	r24, Y+3	; 0x03
    3256:	9c 81       	ldd	r25, Y+4	; 0x04
    3258:	00 97       	sbiw	r24, 0x00	; 0
    325a:	09 f1       	breq	.+66     	; 0x329e <PWM1_voidFreqHZ+0x5a>

		/* return error */
	}
	else{

		uint16 Local_u16TimeTotal = (uint32)1000000 / Copy_u16Freq;
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	9c 81       	ldd	r25, Y+4	; 0x04
    3260:	9c 01       	movw	r18, r24
    3262:	40 e0       	ldi	r20, 0x00	; 0
    3264:	50 e0       	ldi	r21, 0x00	; 0
    3266:	80 e4       	ldi	r24, 0x40	; 64
    3268:	92 e4       	ldi	r25, 0x42	; 66
    326a:	af e0       	ldi	r26, 0x0F	; 15
    326c:	b0 e0       	ldi	r27, 0x00	; 0
    326e:	bc 01       	movw	r22, r24
    3270:	cd 01       	movw	r24, r26
    3272:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__udivmodsi4>
    3276:	da 01       	movw	r26, r20
    3278:	c9 01       	movw	r24, r18
    327a:	9a 83       	std	Y+2, r25	; 0x02
    327c:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u16TimeTotal >= 1){
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	9a 81       	ldd	r25, Y+2	; 0x02
    3282:	00 97       	sbiw	r24, 0x00	; 0
    3284:	41 f0       	breq	.+16     	; 0x3296 <PWM1_voidFreqHZ+0x52>

			ICR1 = Local_u16TimeTotal - 1;
    3286:	e6 e4       	ldi	r30, 0x46	; 70
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	9a 81       	ldd	r25, Y+2	; 0x02
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	91 83       	std	Z+1, r25	; 0x01
    3292:	80 83       	st	Z, r24
    3294:	04 c0       	rjmp	.+8      	; 0x329e <PWM1_voidFreqHZ+0x5a>
		}
		else{ ICR1 = 0; }
    3296:	e6 e4       	ldi	r30, 0x46	; 70
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	11 82       	std	Z+1, r1	; 0x01
    329c:	10 82       	st	Z, r1
	}
}
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <PWM1_voidDutyCycle>:

/******************************************************************************
* Description 	: TIMER1 PWM Duty Cycle Function.		                      *
******************************************************************************/

void PWM1_voidDutyCycle(uint16 Copy_u16Duty){
    32ac:	ef 92       	push	r14
    32ae:	ff 92       	push	r15
    32b0:	0f 93       	push	r16
    32b2:	1f 93       	push	r17
    32b4:	df 93       	push	r29
    32b6:	cf 93       	push	r28
    32b8:	00 d0       	rcall	.+0      	; 0x32ba <PWM1_voidDutyCycle+0xe>
    32ba:	00 d0       	rcall	.+0      	; 0x32bc <PWM1_voidDutyCycle+0x10>
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	9c 83       	std	Y+4, r25	; 0x04
    32c2:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u16Duty <= 100){
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	9c 81       	ldd	r25, Y+4	; 0x04
    32c8:	85 36       	cpi	r24, 0x65	; 101
    32ca:	91 05       	cpc	r25, r1
    32cc:	80 f5       	brcc	.+96     	; 0x332e <PWM1_voidDutyCycle+0x82>

		uint16 Local_u16TimeON = ((uint32)Copy_u16Duty * (ICR1 + 1)) / 100;
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	9c 81       	ldd	r25, Y+4	; 0x04
    32d2:	7c 01       	movw	r14, r24
    32d4:	00 e0       	ldi	r16, 0x00	; 0
    32d6:	10 e0       	ldi	r17, 0x00	; 0
    32d8:	e6 e4       	ldi	r30, 0x46	; 70
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	91 81       	ldd	r25, Z+1	; 0x01
    32e0:	01 96       	adiw	r24, 0x01	; 1
    32e2:	9c 01       	movw	r18, r24
    32e4:	40 e0       	ldi	r20, 0x00	; 0
    32e6:	50 e0       	ldi	r21, 0x00	; 0
    32e8:	c8 01       	movw	r24, r16
    32ea:	b7 01       	movw	r22, r14
    32ec:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <__mulsi3>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	24 e6       	ldi	r18, 0x64	; 100
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	40 e0       	ldi	r20, 0x00	; 0
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	bc 01       	movw	r22, r24
    32fe:	cd 01       	movw	r24, r26
    3300:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__udivmodsi4>
    3304:	da 01       	movw	r26, r20
    3306:	c9 01       	movw	r24, r18
    3308:	9a 83       	std	Y+2, r25	; 0x02
    330a:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u16TimeON > 1){
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	9a 81       	ldd	r25, Y+2	; 0x02
    3310:	82 30       	cpi	r24, 0x02	; 2
    3312:	91 05       	cpc	r25, r1
    3314:	40 f0       	brcs	.+16     	; 0x3326 <PWM1_voidDutyCycle+0x7a>

			OCR1A = Local_u16TimeON - 1;
    3316:	ea e4       	ldi	r30, 0x4A	; 74
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	9a 81       	ldd	r25, Y+2	; 0x02
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	91 83       	std	Z+1, r25	; 0x01
    3322:	80 83       	st	Z, r24
    3324:	04 c0       	rjmp	.+8      	; 0x332e <PWM1_voidDutyCycle+0x82>
		}
		else{ OCR1A = 0; }
    3326:	ea e4       	ldi	r30, 0x4A	; 74
    3328:	f0 e0       	ldi	r31, 0x00	; 0
    332a:	11 82       	std	Z+1, r1	; 0x01
    332c:	10 82       	st	Z, r1
	}
	
	else{ /* return error */}
	
}
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	cf 91       	pop	r28
    3338:	df 91       	pop	r29
    333a:	1f 91       	pop	r17
    333c:	0f 91       	pop	r16
    333e:	ff 90       	pop	r15
    3340:	ef 90       	pop	r14
    3342:	08 95       	ret

00003344 <TIMER1_voidInputCaptureEdge>:

/******************************************************************************
* Description 	: TIMER1 Input Capture Edge Function.		                  *
******************************************************************************/

void TIMER1_voidInputCaptureEdge(ICU_Edge_t Edge){
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	00 d0       	rcall	.+0      	; 0x334a <TIMER1_voidInputCaptureEdge+0x6>
    334a:	0f 92       	push	r0
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	89 83       	std	Y+1, r24	; 0x01

	switch(Edge){
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	28 2f       	mov	r18, r24
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	3b 83       	std	Y+3, r19	; 0x03
    335a:	2a 83       	std	Y+2, r18	; 0x02
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	00 97       	sbiw	r24, 0x00	; 0
    3362:	31 f0       	breq	.+12     	; 0x3370 <TIMER1_voidInputCaptureEdge+0x2c>
    3364:	2a 81       	ldd	r18, Y+2	; 0x02
    3366:	3b 81       	ldd	r19, Y+3	; 0x03
    3368:	21 30       	cpi	r18, 0x01	; 1
    336a:	31 05       	cpc	r19, r1
    336c:	49 f0       	breq	.+18     	; 0x3380 <TIMER1_voidInputCaptureEdge+0x3c>
    336e:	0f c0       	rjmp	.+30     	; 0x338e <TIMER1_voidInputCaptureEdge+0x4a>

		case ICU_RISING_EDGE:
			/* Input capture rising edge */
			SET_BIT(TCCR1B, ICES1);
    3370:	ae e4       	ldi	r26, 0x4E	; 78
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	ee e4       	ldi	r30, 0x4E	; 78
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
    337a:	80 64       	ori	r24, 0x40	; 64
    337c:	8c 93       	st	X, r24
    337e:	07 c0       	rjmp	.+14     	; 0x338e <TIMER1_voidInputCaptureEdge+0x4a>
		break;

		case ICU_FALLING_EDGE:
			/* Input capture falling edge */
			CLR_BIT(TCCR1B, ICES1);
    3380:	ae e4       	ldi	r26, 0x4E	; 78
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	ee e4       	ldi	r30, 0x4E	; 78
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	8f 7b       	andi	r24, 0xBF	; 191
    338c:	8c 93       	st	X, r24
		break;
		default:  break;
	}
}
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	cf 91       	pop	r28
    3396:	df 91       	pop	r29
    3398:	08 95       	ret

0000339a <PWM1_voidRead>:

/******************************************************************************
* Description 	: TIMER1 PWM1 Read Function.		                          *
******************************************************************************/

void PWM1_voidRead(uint32 *ReturnFreq, uint8 *ReturnDuty){
    339a:	ef 92       	push	r14
    339c:	ff 92       	push	r15
    339e:	0f 93       	push	r16
    33a0:	1f 93       	push	r17
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    33aa:	28 97       	sbiw	r28, 0x08	; 8
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	9e 83       	std	Y+6, r25	; 0x06
    33b8:	8d 83       	std	Y+5, r24	; 0x05
    33ba:	78 87       	std	Y+8, r23	; 0x08
    33bc:	6f 83       	std	Y+7, r22	; 0x07

	uint16 Local_u16TimeON, Local_u16TimeOFF;

	TCNT1 = 0;
    33be:	ec e4       	ldi	r30, 0x4C	; 76
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	11 82       	std	Z+1, r1	; 0x01
    33c4:	10 82       	st	Z, r1

	TIMER1_voidICU_SetCallBack(Timer1ICU_InterruptAction);
    33c6:	84 e6       	ldi	r24, 0x64	; 100
    33c8:	9a e1       	ldi	r25, 0x1A	; 26
    33ca:	0e 94 a5 1b 	call	0x374a	; 0x374a <TIMER1_voidICU_SetCallBack>
	TIMER1_voidInputCaptureEdge(ICU_RISING_EDGE);
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	0e 94 a2 19 	call	0x3344	; 0x3344 <TIMER1_voidInputCaptureEdge>
	TIMER1_voidICU_InterruptEnable();
    33d4:	0e 94 11 1b 	call	0x3622	; 0x3622 <TIMER1_voidICU_InterruptEnable>

	Global_u16Flag = 0;
    33d8:	10 92 cd 01 	sts	0x01CD, r1
    33dc:	10 92 cc 01 	sts	0x01CC, r1

	while(Global_u16Flag < 3);
    33e0:	80 91 cc 01 	lds	r24, 0x01CC
    33e4:	90 91 cd 01 	lds	r25, 0x01CD
    33e8:	83 30       	cpi	r24, 0x03	; 3
    33ea:	91 05       	cpc	r25, r1
    33ec:	c8 f3       	brcs	.-14     	; 0x33e0 <PWM1_voidRead+0x46>

	Local_u16TimeON = Global_u16Time2 - Global_u16Time1;
    33ee:	20 91 d8 01 	lds	r18, 0x01D8
    33f2:	30 91 d9 01 	lds	r19, 0x01D9
    33f6:	80 91 d6 01 	lds	r24, 0x01D6
    33fa:	90 91 d7 01 	lds	r25, 0x01D7
    33fe:	a9 01       	movw	r20, r18
    3400:	48 1b       	sub	r20, r24
    3402:	59 0b       	sbc	r21, r25
    3404:	ca 01       	movw	r24, r20
    3406:	9c 83       	std	Y+4, r25	; 0x04
    3408:	8b 83       	std	Y+3, r24	; 0x03

	Local_u16TimeOFF = Global_u16Time3 - Global_u16Time2;
    340a:	20 91 da 01 	lds	r18, 0x01DA
    340e:	30 91 db 01 	lds	r19, 0x01DB
    3412:	80 91 d8 01 	lds	r24, 0x01D8
    3416:	90 91 d9 01 	lds	r25, 0x01D9
    341a:	a9 01       	movw	r20, r18
    341c:	48 1b       	sub	r20, r24
    341e:	59 0b       	sbc	r21, r25
    3420:	ca 01       	movw	r24, r20
    3422:	9a 83       	std	Y+2, r25	; 0x02
    3424:	89 83       	std	Y+1, r24	; 0x01

	*ReturnDuty = ((uint32) Local_u16TimeON * 100)/((uint32)Local_u16TimeON + Local_u16TimeOFF);
    3426:	8b 81       	ldd	r24, Y+3	; 0x03
    3428:	9c 81       	ldd	r25, Y+4	; 0x04
    342a:	cc 01       	movw	r24, r24
    342c:	a0 e0       	ldi	r26, 0x00	; 0
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	24 e6       	ldi	r18, 0x64	; 100
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e0       	ldi	r20, 0x00	; 0
    3436:	50 e0       	ldi	r21, 0x00	; 0
    3438:	bc 01       	movw	r22, r24
    343a:	cd 01       	movw	r24, r26
    343c:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <__mulsi3>
    3440:	7b 01       	movw	r14, r22
    3442:	8c 01       	movw	r16, r24
    3444:	8b 81       	ldd	r24, Y+3	; 0x03
    3446:	9c 81       	ldd	r25, Y+4	; 0x04
    3448:	9c 01       	movw	r18, r24
    344a:	40 e0       	ldi	r20, 0x00	; 0
    344c:	50 e0       	ldi	r21, 0x00	; 0
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	9a 81       	ldd	r25, Y+2	; 0x02
    3452:	cc 01       	movw	r24, r24
    3454:	a0 e0       	ldi	r26, 0x00	; 0
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	28 0f       	add	r18, r24
    345a:	39 1f       	adc	r19, r25
    345c:	4a 1f       	adc	r20, r26
    345e:	5b 1f       	adc	r21, r27
    3460:	c8 01       	movw	r24, r16
    3462:	b7 01       	movw	r22, r14
    3464:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__udivmodsi4>
    3468:	da 01       	movw	r26, r20
    346a:	c9 01       	movw	r24, r18
    346c:	ef 81       	ldd	r30, Y+7	; 0x07
    346e:	f8 85       	ldd	r31, Y+8	; 0x08
    3470:	80 83       	st	Z, r24

	*ReturnFreq = ((uint32)1000000) / ((uint32)Local_u16TimeON + Local_u16TimeOFF);
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	9c 81       	ldd	r25, Y+4	; 0x04
    3476:	9c 01       	movw	r18, r24
    3478:	40 e0       	ldi	r20, 0x00	; 0
    347a:	50 e0       	ldi	r21, 0x00	; 0
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	9a 81       	ldd	r25, Y+2	; 0x02
    3480:	cc 01       	movw	r24, r24
    3482:	a0 e0       	ldi	r26, 0x00	; 0
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	28 0f       	add	r18, r24
    3488:	39 1f       	adc	r19, r25
    348a:	4a 1f       	adc	r20, r26
    348c:	5b 1f       	adc	r21, r27
    348e:	80 e4       	ldi	r24, 0x40	; 64
    3490:	92 e4       	ldi	r25, 0x42	; 66
    3492:	af e0       	ldi	r26, 0x0F	; 15
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	bc 01       	movw	r22, r24
    3498:	cd 01       	movw	r24, r26
    349a:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__udivmodsi4>
    349e:	da 01       	movw	r26, r20
    34a0:	c9 01       	movw	r24, r18
    34a2:	ed 81       	ldd	r30, Y+5	; 0x05
    34a4:	fe 81       	ldd	r31, Y+6	; 0x06
    34a6:	80 83       	st	Z, r24
    34a8:	91 83       	std	Z+1, r25	; 0x01
    34aa:	a2 83       	std	Z+2, r26	; 0x02
    34ac:	b3 83       	std	Z+3, r27	; 0x03

}
    34ae:	28 96       	adiw	r28, 0x08	; 8
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	cf 91       	pop	r28
    34bc:	df 91       	pop	r29
    34be:	1f 91       	pop	r17
    34c0:	0f 91       	pop	r16
    34c2:	ff 90       	pop	r15
    34c4:	ef 90       	pop	r14
    34c6:	08 95       	ret

000034c8 <Timer1ICU_InterruptAction>:

/******************************************************************************
* Description 	: TIMER1 ICU Interrupt Action Private Function.				  *
******************************************************************************/

static void Timer1ICU_InterruptAction(void){
    34c8:	df 93       	push	r29
    34ca:	cf 93       	push	r28
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62

	if(Global_u16Flag == 0){
    34d0:	80 91 cc 01 	lds	r24, 0x01CC
    34d4:	90 91 cd 01 	lds	r25, 0x01CD
    34d8:	00 97       	sbiw	r24, 0x00	; 0
    34da:	91 f4       	brne	.+36     	; 0x3500 <Timer1ICU_InterruptAction+0x38>

		Global_u16Time1 = ICR1;
    34dc:	e6 e4       	ldi	r30, 0x46	; 70
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	90 93 d7 01 	sts	0x01D7, r25
    34e8:	80 93 d6 01 	sts	0x01D6, r24
		TIMER1_voidInputCaptureEdge(ICU_FALLING_EDGE);
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	0e 94 a2 19 	call	0x3344	; 0x3344 <TIMER1_voidInputCaptureEdge>
		Global_u16Flag = 1;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	90 93 cd 01 	sts	0x01CD, r25
    34fa:	80 93 cc 01 	sts	0x01CC, r24
    34fe:	30 c0       	rjmp	.+96     	; 0x3560 <Timer1ICU_InterruptAction+0x98>

	}
	else if(Global_u16Flag == 1){
    3500:	80 91 cc 01 	lds	r24, 0x01CC
    3504:	90 91 cd 01 	lds	r25, 0x01CD
    3508:	81 30       	cpi	r24, 0x01	; 1
    350a:	91 05       	cpc	r25, r1
    350c:	91 f4       	brne	.+36     	; 0x3532 <Timer1ICU_InterruptAction+0x6a>

		Global_u16Time2 = ICR1;
    350e:	e6 e4       	ldi	r30, 0x46	; 70
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	91 81       	ldd	r25, Z+1	; 0x01
    3516:	90 93 d9 01 	sts	0x01D9, r25
    351a:	80 93 d8 01 	sts	0x01D8, r24
		TIMER1_voidInputCaptureEdge(ICU_RISING_EDGE);
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	0e 94 a2 19 	call	0x3344	; 0x3344 <TIMER1_voidInputCaptureEdge>
		Global_u16Flag = 2;
    3524:	82 e0       	ldi	r24, 0x02	; 2
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	90 93 cd 01 	sts	0x01CD, r25
    352c:	80 93 cc 01 	sts	0x01CC, r24
    3530:	17 c0       	rjmp	.+46     	; 0x3560 <Timer1ICU_InterruptAction+0x98>

	}
	else if(Global_u16Flag == 2){
    3532:	80 91 cc 01 	lds	r24, 0x01CC
    3536:	90 91 cd 01 	lds	r25, 0x01CD
    353a:	82 30       	cpi	r24, 0x02	; 2
    353c:	91 05       	cpc	r25, r1
    353e:	81 f4       	brne	.+32     	; 0x3560 <Timer1ICU_InterruptAction+0x98>

		Global_u16Time3 = ICR1;
    3540:	e6 e4       	ldi	r30, 0x46	; 70
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	91 81       	ldd	r25, Z+1	; 0x01
    3548:	90 93 db 01 	sts	0x01DB, r25
    354c:	80 93 da 01 	sts	0x01DA, r24
		TIMER1_voidICU_InterruptDisable();
    3550:	0e 94 1f 1b 	call	0x363e	; 0x363e <TIMER1_voidICU_InterruptDisable>
		Global_u16Flag = 3;
    3554:	83 e0       	ldi	r24, 0x03	; 3
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	90 93 cd 01 	sts	0x01CD, r25
    355c:	80 93 cc 01 	sts	0x01CC, r24

	}
	
}
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	08 95       	ret

00003566 <TIMER1_voidSetTime_ms>:

/******************************************************************************
* Description 	: TIMER1 Set Interrupt Time (ms) Function.		              *
******************************************************************************/

void TIMER1_voidSetTime_ms(uint16 Copy_u16Time, void(*Local_Fptr)(void)){
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	00 d0       	rcall	.+0      	; 0x356c <TIMER1_voidSetTime_ms+0x6>
    356c:	00 d0       	rcall	.+0      	; 0x356e <TIMER1_voidSetTime_ms+0x8>
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	9a 83       	std	Y+2, r25	; 0x02
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	7c 83       	std	Y+4, r23	; 0x04
    3578:	6b 83       	std	Y+3, r22	; 0x03

	TIMER1_voidInit(TIMER1_CTC_OCR1A_MODE, TIMER1_SCALER_8);
    357a:	84 e0       	ldi	r24, 0x04	; 4
    357c:	62 e0       	ldi	r22, 0x02	; 2
    357e:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <TIMER1_voidInit>
	TIMER1_voidOutputCompareInit(TIMER1_OC1_DISCONNECTED_MODE, TIMER1_OCR1A);
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	60 e0       	ldi	r22, 0x00	; 0
    3586:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <TIMER1_voidOutputCompareInit>
	TIMER1_voidOutputCompareInit(TIMER1_OC1_DISCONNECTED_MODE, TIMER1_OCR1B);
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	61 e0       	ldi	r22, 0x01	; 1
    358e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <TIMER1_voidOutputCompareInit>

	OCR1A = ((Copy_u16Time * 1000) - 1);
    3592:	ea e4       	ldi	r30, 0x4A	; 74
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	29 81       	ldd	r18, Y+1	; 0x01
    3598:	3a 81       	ldd	r19, Y+2	; 0x02
    359a:	88 ee       	ldi	r24, 0xE8	; 232
    359c:	93 e0       	ldi	r25, 0x03	; 3
    359e:	ac 01       	movw	r20, r24
    35a0:	24 9f       	mul	r18, r20
    35a2:	c0 01       	movw	r24, r0
    35a4:	25 9f       	mul	r18, r21
    35a6:	90 0d       	add	r25, r0
    35a8:	34 9f       	mul	r19, r20
    35aa:	90 0d       	add	r25, r0
    35ac:	11 24       	eor	r1, r1
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	91 83       	std	Z+1, r25	; 0x01
    35b2:	80 83       	st	Z, r24

	TIMER1_voidOCA_SetCallBack(Local_Fptr);
    35b4:	8b 81       	ldd	r24, Y+3	; 0x03
    35b6:	9c 81       	ldd	r25, Y+4	; 0x04
    35b8:	0e 94 93 1b 	call	0x3726	; 0x3726 <TIMER1_voidOCA_SetCallBack>

	TIMER1_voidOCA_InterruptEnable();
    35bc:	0e 94 49 1b 	call	0x3692	; 0x3692 <TIMER1_voidOCA_InterruptEnable>

}
    35c0:	0f 90       	pop	r0
    35c2:	0f 90       	pop	r0
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	cf 91       	pop	r28
    35ca:	df 91       	pop	r29
    35cc:	08 95       	ret

000035ce <TIMER1_voidSetTime_us>:

/******************************************************************************
* Description 	: TIMER1 Set Interrupt Time (us) Function.		              *
******************************************************************************/

void TIMER1_voidSetTime_us(uint16 Copy_u16Time, void(*Local_Fptr)(void)){
    35ce:	df 93       	push	r29
    35d0:	cf 93       	push	r28
    35d2:	00 d0       	rcall	.+0      	; 0x35d4 <TIMER1_voidSetTime_us+0x6>
    35d4:	00 d0       	rcall	.+0      	; 0x35d6 <TIMER1_voidSetTime_us+0x8>
    35d6:	cd b7       	in	r28, 0x3d	; 61
    35d8:	de b7       	in	r29, 0x3e	; 62
    35da:	9a 83       	std	Y+2, r25	; 0x02
    35dc:	89 83       	std	Y+1, r24	; 0x01
    35de:	7c 83       	std	Y+4, r23	; 0x04
    35e0:	6b 83       	std	Y+3, r22	; 0x03

	TIMER1_voidInit(TIMER1_CTC_OCR1A_MODE, TIMER1_SCALER_8);
    35e2:	84 e0       	ldi	r24, 0x04	; 4
    35e4:	62 e0       	ldi	r22, 0x02	; 2
    35e6:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <TIMER1_voidInit>
	TIMER1_voidOutputCompareInit(TIMER1_OC1_DISCONNECTED_MODE, TIMER1_OCR1A);
    35ea:	80 e0       	ldi	r24, 0x00	; 0
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <TIMER1_voidOutputCompareInit>
	TIMER1_voidOutputCompareInit(TIMER1_OC1_DISCONNECTED_MODE, TIMER1_OCR1B);
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	61 e0       	ldi	r22, 0x01	; 1
    35f6:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <TIMER1_voidOutputCompareInit>

	OCR1A = (Copy_u16Time - 1);
    35fa:	ea e4       	ldi	r30, 0x4A	; 74
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	9a 81       	ldd	r25, Y+2	; 0x02
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	91 83       	std	Z+1, r25	; 0x01
    3606:	80 83       	st	Z, r24

	TIMER1_voidOCA_SetCallBack(Local_Fptr);
    3608:	8b 81       	ldd	r24, Y+3	; 0x03
    360a:	9c 81       	ldd	r25, Y+4	; 0x04
    360c:	0e 94 93 1b 	call	0x3726	; 0x3726 <TIMER1_voidOCA_SetCallBack>

	TIMER1_voidOCA_InterruptEnable();
    3610:	0e 94 49 1b 	call	0x3692	; 0x3692 <TIMER1_voidOCA_InterruptEnable>

}
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <TIMER1_voidICU_InterruptEnable>:

/******************************************************************************
* Description 	: TIMER1 Input Capture Unit Interrupt Enable Function.		  *
******************************************************************************/

void TIMER1_voidICU_InterruptEnable(void){
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62

	/* Enable Input Capture Unit mode interrupt */
	SET_BIT(TIMSK, TICIE1);
    362a:	a9 e5       	ldi	r26, 0x59	; 89
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	e9 e5       	ldi	r30, 0x59	; 89
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	80 62       	ori	r24, 0x20	; 32
    3636:	8c 93       	st	X, r24
}
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	08 95       	ret

0000363e <TIMER1_voidICU_InterruptDisable>:

/******************************************************************************
* Description 	: TIMER1 Input Capture Unit Interrupt Disable Function.		  *
******************************************************************************/

void TIMER1_voidICU_InterruptDisable(void){
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62

	/* Disable Input Capture Unit mode interrupt */
	CLR_BIT(TIMSK, TICIE1);
    3646:	a9 e5       	ldi	r26, 0x59	; 89
    3648:	b0 e0       	ldi	r27, 0x00	; 0
    364a:	e9 e5       	ldi	r30, 0x59	; 89
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	80 81       	ld	r24, Z
    3650:	8f 7d       	andi	r24, 0xDF	; 223
    3652:	8c 93       	st	X, r24
}
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <TIMER1_voidOVF_InterruptEnable>:

/******************************************************************************
* Description 	: TIMER1 Overflow Interrupt Enable Function.		          *
******************************************************************************/

void TIMER1_voidOVF_InterruptEnable(void){
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62

	/* Enable overflow mode interrupt */
	SET_BIT(TIMSK, TOIE1);
    3662:	a9 e5       	ldi	r26, 0x59	; 89
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	e9 e5       	ldi	r30, 0x59	; 89
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	80 81       	ld	r24, Z
    366c:	84 60       	ori	r24, 0x04	; 4
    366e:	8c 93       	st	X, r24
}
    3670:	cf 91       	pop	r28
    3672:	df 91       	pop	r29
    3674:	08 95       	ret

00003676 <TIMER1_voidOVF_InterruptDisable>:

/******************************************************************************
* Description 	: TIMER1 Overflow Interrupt Disable Function.		          *
******************************************************************************/

void TIMER1_voidOVF_InterruptDisable(void){
    3676:	df 93       	push	r29
    3678:	cf 93       	push	r28
    367a:	cd b7       	in	r28, 0x3d	; 61
    367c:	de b7       	in	r29, 0x3e	; 62

	/* Disable overflow mode interrupt */
	CLR_BIT(TIMSK, TOIE1);
    367e:	a9 e5       	ldi	r26, 0x59	; 89
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	e9 e5       	ldi	r30, 0x59	; 89
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	80 81       	ld	r24, Z
    3688:	8b 7f       	andi	r24, 0xFB	; 251
    368a:	8c 93       	st	X, r24
}
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	08 95       	ret

00003692 <TIMER1_voidOCA_InterruptEnable>:

/******************************************************************************
* Description 	: TIMER1 Output Compare A Interrupt Enable Function.		  *
******************************************************************************/

void TIMER1_voidOCA_InterruptEnable(void){
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62

	/* Enable Output Compare A mode interrupt */
	SET_BIT(TIMSK, OCIE1A);
    369a:	a9 e5       	ldi	r26, 0x59	; 89
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	e9 e5       	ldi	r30, 0x59	; 89
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	80 81       	ld	r24, Z
    36a4:	80 61       	ori	r24, 0x10	; 16
    36a6:	8c 93       	st	X, r24
}
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	08 95       	ret

000036ae <TIMER1_voidOCA_InterruptDisable>:

/******************************************************************************
* Description 	: TIMER1 Output Compare A Interrupt Disable Function.		  *
******************************************************************************/

void TIMER1_voidOCA_InterruptDisable(void){
    36ae:	df 93       	push	r29
    36b0:	cf 93       	push	r28
    36b2:	cd b7       	in	r28, 0x3d	; 61
    36b4:	de b7       	in	r29, 0x3e	; 62

	/* Disable overflow mode interrupt */
	CLR_BIT(TIMSK, OCIE1A);
    36b6:	a9 e5       	ldi	r26, 0x59	; 89
    36b8:	b0 e0       	ldi	r27, 0x00	; 0
    36ba:	e9 e5       	ldi	r30, 0x59	; 89
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	80 81       	ld	r24, Z
    36c0:	8f 7e       	andi	r24, 0xEF	; 239
    36c2:	8c 93       	st	X, r24
}
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <TIMER1_voidOCB_InterruptEnable>:

/******************************************************************************
* Description 	: TIMER1 Output Compare B Interrupt Enable Function.		  *
******************************************************************************/

void TIMER1_voidOCB_InterruptEnable(void){
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62

	/* Enable Output Compare B mode interrupt */
	SET_BIT(TIMSK, OCIE1B);
    36d2:	a9 e5       	ldi	r26, 0x59	; 89
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	e9 e5       	ldi	r30, 0x59	; 89
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 81       	ld	r24, Z
    36dc:	88 60       	ori	r24, 0x08	; 8
    36de:	8c 93       	st	X, r24
}
    36e0:	cf 91       	pop	r28
    36e2:	df 91       	pop	r29
    36e4:	08 95       	ret

000036e6 <TIMER1_voidOCB_InterruptDisable>:

/******************************************************************************
* Description 	: TIMER1 Output Compare B Interrupt Disable Function.		  *
******************************************************************************/

void TIMER1_voidOCB_InterruptDisable(void){
    36e6:	df 93       	push	r29
    36e8:	cf 93       	push	r28
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62

	/* Disable Output Compare B mode interrupt */
	CLR_BIT(TIMSK, OCIE1B);
    36ee:	a9 e5       	ldi	r26, 0x59	; 89
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	e9 e5       	ldi	r30, 0x59	; 89
    36f4:	f0 e0       	ldi	r31, 0x00	; 0
    36f6:	80 81       	ld	r24, Z
    36f8:	87 7f       	andi	r24, 0xF7	; 247
    36fa:	8c 93       	st	X, r24
}
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <TIMER1_voidOCB_SetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER1 OCB) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER1_voidOCB_SetCallBack(void(*Local_Fptr)(void)){
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	00 d0       	rcall	.+0      	; 0x3708 <TIMER1_voidOCB_SetCallBack+0x6>
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	9a 83       	std	Y+2, r25	; 0x02
    370e:	89 83       	std	Y+1, r24	; 0x01

	/* Output Compare B CallBack function TIMER1 */
	TIMER1_OCB_CallBack = Local_Fptr;
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	9a 81       	ldd	r25, Y+2	; 0x02
    3714:	90 93 d1 01 	sts	0x01D1, r25
    3718:	80 93 d0 01 	sts	0x01D0, r24

}
    371c:	0f 90       	pop	r0
    371e:	0f 90       	pop	r0
    3720:	cf 91       	pop	r28
    3722:	df 91       	pop	r29
    3724:	08 95       	ret

00003726 <TIMER1_voidOCA_SetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER1 OCA) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER1_voidOCA_SetCallBack(void(*Local_Fptr)(void)){
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	00 d0       	rcall	.+0      	; 0x372c <TIMER1_voidOCA_SetCallBack+0x6>
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	9a 83       	std	Y+2, r25	; 0x02
    3732:	89 83       	std	Y+1, r24	; 0x01

	/* Output Compare A CallBack function TIMER1 */
	TIMER1_OCA_CallBack = Local_Fptr;
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	9a 81       	ldd	r25, Y+2	; 0x02
    3738:	90 93 d3 01 	sts	0x01D3, r25
    373c:	80 93 d2 01 	sts	0x01D2, r24

}
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	cf 91       	pop	r28
    3746:	df 91       	pop	r29
    3748:	08 95       	ret

0000374a <TIMER1_voidICU_SetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER1 ICU) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER1_voidICU_SetCallBack(void(*Local_Fptr)(void)){
    374a:	df 93       	push	r29
    374c:	cf 93       	push	r28
    374e:	00 d0       	rcall	.+0      	; 0x3750 <TIMER1_voidICU_SetCallBack+0x6>
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	9a 83       	std	Y+2, r25	; 0x02
    3756:	89 83       	std	Y+1, r24	; 0x01

	/* Input Capture Unit CallBack function TIMER1 */
	TIMER1_ICU_CallBack = Local_Fptr;
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	9a 81       	ldd	r25, Y+2	; 0x02
    375c:	90 93 d5 01 	sts	0x01D5, r25
    3760:	80 93 d4 01 	sts	0x01D4, r24

}
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	08 95       	ret

0000376e <TIMER1_voidOVF_SetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER1 OVF) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER1_voidOVF_SetCallBack(void(*Local_Fptr)(void)){
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	00 d0       	rcall	.+0      	; 0x3774 <TIMER1_voidOVF_SetCallBack+0x6>
    3774:	cd b7       	in	r28, 0x3d	; 61
    3776:	de b7       	in	r29, 0x3e	; 62
    3778:	9a 83       	std	Y+2, r25	; 0x02
    377a:	89 83       	std	Y+1, r24	; 0x01

	/* Overflow CallBack function TIMER1 */
	TIMER1_OVF_CallBack = Local_Fptr;
    377c:	89 81       	ldd	r24, Y+1	; 0x01
    377e:	9a 81       	ldd	r25, Y+2	; 0x02
    3780:	90 93 cf 01 	sts	0x01CF, r25
    3784:	80 93 ce 01 	sts	0x01CE, r24

}
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	cf 91       	pop	r28
    378e:	df 91       	pop	r29
    3790:	08 95       	ret

00003792 <__vector_9>:

/******************************************************************************
* !comment  :  ISR Function Overflow interrupt.  						      *
******************************************************************************/

ISR(TIMER1_OVF_VECT){
    3792:	1f 92       	push	r1
    3794:	0f 92       	push	r0
    3796:	0f b6       	in	r0, 0x3f	; 63
    3798:	0f 92       	push	r0
    379a:	11 24       	eor	r1, r1
    379c:	2f 93       	push	r18
    379e:	3f 93       	push	r19
    37a0:	4f 93       	push	r20
    37a2:	5f 93       	push	r21
    37a4:	6f 93       	push	r22
    37a6:	7f 93       	push	r23
    37a8:	8f 93       	push	r24
    37aa:	9f 93       	push	r25
    37ac:	af 93       	push	r26
    37ae:	bf 93       	push	r27
    37b0:	ef 93       	push	r30
    37b2:	ff 93       	push	r31
    37b4:	df 93       	push	r29
    37b6:	cf 93       	push	r28
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER1_OVF_CallBack){
    37bc:	80 91 ce 01 	lds	r24, 0x01CE
    37c0:	90 91 cf 01 	lds	r25, 0x01CF
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	29 f0       	breq	.+10     	; 0x37d2 <__vector_9+0x40>

		TIMER1_OVF_CallBack();
    37c8:	e0 91 ce 01 	lds	r30, 0x01CE
    37cc:	f0 91 cf 01 	lds	r31, 0x01CF
    37d0:	09 95       	icall
	}
	else{ /* return error */ }

}
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	ff 91       	pop	r31
    37d8:	ef 91       	pop	r30
    37da:	bf 91       	pop	r27
    37dc:	af 91       	pop	r26
    37de:	9f 91       	pop	r25
    37e0:	8f 91       	pop	r24
    37e2:	7f 91       	pop	r23
    37e4:	6f 91       	pop	r22
    37e6:	5f 91       	pop	r21
    37e8:	4f 91       	pop	r20
    37ea:	3f 91       	pop	r19
    37ec:	2f 91       	pop	r18
    37ee:	0f 90       	pop	r0
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	0f 90       	pop	r0
    37f4:	1f 90       	pop	r1
    37f6:	18 95       	reti

000037f8 <__vector_7>:

/******************************************************************************
* !comment  :  ISR Function Output Compare A interrupt.  					  *
******************************************************************************/

ISR(TIMER1_OCA_VECT){
    37f8:	1f 92       	push	r1
    37fa:	0f 92       	push	r0
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	0f 92       	push	r0
    3800:	11 24       	eor	r1, r1
    3802:	2f 93       	push	r18
    3804:	3f 93       	push	r19
    3806:	4f 93       	push	r20
    3808:	5f 93       	push	r21
    380a:	6f 93       	push	r22
    380c:	7f 93       	push	r23
    380e:	8f 93       	push	r24
    3810:	9f 93       	push	r25
    3812:	af 93       	push	r26
    3814:	bf 93       	push	r27
    3816:	ef 93       	push	r30
    3818:	ff 93       	push	r31
    381a:	df 93       	push	r29
    381c:	cf 93       	push	r28
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER1_OCA_CallBack){
    3822:	80 91 d2 01 	lds	r24, 0x01D2
    3826:	90 91 d3 01 	lds	r25, 0x01D3
    382a:	00 97       	sbiw	r24, 0x00	; 0
    382c:	29 f0       	breq	.+10     	; 0x3838 <__vector_7+0x40>

		TIMER1_OCA_CallBack();
    382e:	e0 91 d2 01 	lds	r30, 0x01D2
    3832:	f0 91 d3 01 	lds	r31, 0x01D3
    3836:	09 95       	icall
	}
	else{ /* return error */ }

}
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	ff 91       	pop	r31
    383e:	ef 91       	pop	r30
    3840:	bf 91       	pop	r27
    3842:	af 91       	pop	r26
    3844:	9f 91       	pop	r25
    3846:	8f 91       	pop	r24
    3848:	7f 91       	pop	r23
    384a:	6f 91       	pop	r22
    384c:	5f 91       	pop	r21
    384e:	4f 91       	pop	r20
    3850:	3f 91       	pop	r19
    3852:	2f 91       	pop	r18
    3854:	0f 90       	pop	r0
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	0f 90       	pop	r0
    385a:	1f 90       	pop	r1
    385c:	18 95       	reti

0000385e <__vector_8>:

/******************************************************************************
* !comment  :  ISR Function Output Compare B interrupt.  					  *
******************************************************************************/

ISR(TIMER1_OCB_VECT){
    385e:	1f 92       	push	r1
    3860:	0f 92       	push	r0
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	0f 92       	push	r0
    3866:	11 24       	eor	r1, r1
    3868:	2f 93       	push	r18
    386a:	3f 93       	push	r19
    386c:	4f 93       	push	r20
    386e:	5f 93       	push	r21
    3870:	6f 93       	push	r22
    3872:	7f 93       	push	r23
    3874:	8f 93       	push	r24
    3876:	9f 93       	push	r25
    3878:	af 93       	push	r26
    387a:	bf 93       	push	r27
    387c:	ef 93       	push	r30
    387e:	ff 93       	push	r31
    3880:	df 93       	push	r29
    3882:	cf 93       	push	r28
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER1_OCB_CallBack){
    3888:	80 91 d0 01 	lds	r24, 0x01D0
    388c:	90 91 d1 01 	lds	r25, 0x01D1
    3890:	00 97       	sbiw	r24, 0x00	; 0
    3892:	29 f0       	breq	.+10     	; 0x389e <__vector_8+0x40>

		TIMER1_OCB_CallBack();
    3894:	e0 91 d0 01 	lds	r30, 0x01D0
    3898:	f0 91 d1 01 	lds	r31, 0x01D1
    389c:	09 95       	icall
	}
	else{ /* return error */ }

}
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	ff 91       	pop	r31
    38a4:	ef 91       	pop	r30
    38a6:	bf 91       	pop	r27
    38a8:	af 91       	pop	r26
    38aa:	9f 91       	pop	r25
    38ac:	8f 91       	pop	r24
    38ae:	7f 91       	pop	r23
    38b0:	6f 91       	pop	r22
    38b2:	5f 91       	pop	r21
    38b4:	4f 91       	pop	r20
    38b6:	3f 91       	pop	r19
    38b8:	2f 91       	pop	r18
    38ba:	0f 90       	pop	r0
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	0f 90       	pop	r0
    38c0:	1f 90       	pop	r1
    38c2:	18 95       	reti

000038c4 <__vector_6>:

/******************************************************************************
* !comment  :  ISR Function Input Capture Unit interrupt.  					  *
******************************************************************************/

ISR(TIMER1_ICU_VECT){
    38c4:	1f 92       	push	r1
    38c6:	0f 92       	push	r0
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	0f 92       	push	r0
    38cc:	11 24       	eor	r1, r1
    38ce:	2f 93       	push	r18
    38d0:	3f 93       	push	r19
    38d2:	4f 93       	push	r20
    38d4:	5f 93       	push	r21
    38d6:	6f 93       	push	r22
    38d8:	7f 93       	push	r23
    38da:	8f 93       	push	r24
    38dc:	9f 93       	push	r25
    38de:	af 93       	push	r26
    38e0:	bf 93       	push	r27
    38e2:	ef 93       	push	r30
    38e4:	ff 93       	push	r31
    38e6:	df 93       	push	r29
    38e8:	cf 93       	push	r28
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER1_ICU_CallBack){
    38ee:	80 91 d4 01 	lds	r24, 0x01D4
    38f2:	90 91 d5 01 	lds	r25, 0x01D5
    38f6:	00 97       	sbiw	r24, 0x00	; 0
    38f8:	29 f0       	breq	.+10     	; 0x3904 <__vector_6+0x40>

		TIMER1_ICU_CallBack();
    38fa:	e0 91 d4 01 	lds	r30, 0x01D4
    38fe:	f0 91 d5 01 	lds	r31, 0x01D5
    3902:	09 95       	icall
	}
	else{ /* return error */ }

}
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	ff 91       	pop	r31
    390a:	ef 91       	pop	r30
    390c:	bf 91       	pop	r27
    390e:	af 91       	pop	r26
    3910:	9f 91       	pop	r25
    3912:	8f 91       	pop	r24
    3914:	7f 91       	pop	r23
    3916:	6f 91       	pop	r22
    3918:	5f 91       	pop	r21
    391a:	4f 91       	pop	r20
    391c:	3f 91       	pop	r19
    391e:	2f 91       	pop	r18
    3920:	0f 90       	pop	r0
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	0f 90       	pop	r0
    3926:	1f 90       	pop	r1
    3928:	18 95       	reti

0000392a <main>:
static uint16 PeriodTicks = 0;
static uint16 OnTicks = 0;

void ICU_SW(void);

int main(void){
    392a:	df 93       	push	r29
    392c:	cf 93       	push	r28
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	2e 97       	sbiw	r28, 0x0e	; 14
    3934:	0f b6       	in	r0, 0x3f	; 63
    3936:	f8 94       	cli
    3938:	de bf       	out	0x3e, r29	; 62
    393a:	0f be       	out	0x3f, r0	; 63
    393c:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(DIO_PINB3, DIO_OUTPUT);
    393e:	8b e0       	ldi	r24, 0x0B	; 11
    3940:	61 e0       	ldi	r22, 0x01	; 1
    3942:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PIND2, DIO_INPUT );
    3946:	8a e1       	ldi	r24, 0x1A	; 26
    3948:	60 e0       	ldi	r22, 0x00	; 0
    394a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_PIND0, DIO_OUTPUT);
    394e:	88 e1       	ldi	r24, 0x18	; 24
    3950:	61 e0       	ldi	r22, 0x01	; 1
    3952:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>

	EXTI0_voidSetCallBack(&ICU_SW);
    3956:	81 e6       	ldi	r24, 0x61	; 97
    3958:	9d e1       	ldi	r25, 0x1D	; 29
    395a:	0e 94 47 0b 	call	0x168e	; 0x168e <EXTI0_voidSetCallBack>
	EXIT0_voidEnable();
    395e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <EXIT0_voidEnable>
	EXIT0_voidTriggerEdge(RISING_EDGE);
    3962:	83 e0       	ldi	r24, 0x03	; 3
    3964:	0e 94 4d 0a 	call	0x149a	; 0x149a <EXIT0_voidTriggerEdge>

	TIMER1_voidInit(TIMER1_NORMAL_MODE, TIMER1_SCALER_8);
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	62 e0       	ldi	r22, 0x02	; 2
    396c:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <TIMER1_voidInit>

	TIMER0_voidInit(TIMER0_FAST_PWM_MODE, TIMER0_SCALER_8);
    3970:	83 e0       	ldi	r24, 0x03	; 3
    3972:	62 e0       	ldi	r22, 0x02	; 2
    3974:	0e 94 71 13 	call	0x26e2	; 0x26e2 <TIMER0_voidInit>
	TIMER0_voidOutputCompareInit(TIMER0_OC0_NON_INVERTING_MODE);
    3978:	82 e0       	ldi	r24, 0x02	; 2
    397a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <TIMER0_voidOutputCompareInit>
	TIMER0_voidSetOutputCompareValue(64);
    397e:	80 e4       	ldi	r24, 0x40	; 64
    3980:	0e 94 68 14 	call	0x28d0	; 0x28d0 <TIMER0_voidSetOutputCompareValue>



	LCD_voidInit();
    3984:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidInit>

	GIE_voidEnable();
    3988:	0e 94 16 0c 	call	0x182c	; 0x182c <GIE_voidEnable>

	while(1){

		/* Wait until period ticks and on ticks are measured */
		while((PeriodTicks == 0)&&(OnTicks == 0));
    398c:	80 91 dc 01 	lds	r24, 0x01DC
    3990:	90 91 dd 01 	lds	r25, 0x01DD
    3994:	00 97       	sbiw	r24, 0x00	; 0
    3996:	31 f4       	brne	.+12     	; 0x39a4 <main+0x7a>
    3998:	80 91 de 01 	lds	r24, 0x01DE
    399c:	90 91 df 01 	lds	r25, 0x01DF
    39a0:	00 97       	sbiw	r24, 0x00	; 0
    39a2:	a1 f3       	breq	.-24     	; 0x398c <main+0x62>

		LCD_voidSetPosition(0, 0);
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	60 e0       	ldi	r22, 0x00	; 0
    39a8:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_voidSetPosition>
		LCD_voidWriteString("Period Time= ");
    39ac:	80 e6       	ldi	r24, 0x60	; 96
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidWriteString>
		LCD_voidWriteNumber(PeriodTicks);
    39b4:	80 91 dc 01 	lds	r24, 0x01DC
    39b8:	90 91 dd 01 	lds	r25, 0x01DD
    39bc:	0e 94 28 12 	call	0x2450	; 0x2450 <LCD_voidWriteNumber>

		LCD_voidSetPosition(1, 0);
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	60 e0       	ldi	r22, 0x00	; 0
    39c4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_voidSetPosition>
		LCD_voidWriteString("On Ticks = ");
    39c8:	8e e6       	ldi	r24, 0x6E	; 110
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidWriteString>
		LCD_voidWriteNumber(OnTicks);
    39d0:	80 91 de 01 	lds	r24, 0x01DE
    39d4:	90 91 df 01 	lds	r25, 0x01DF
    39d8:	0e 94 28 12 	call	0x2450	; 0x2450 <LCD_voidWriteNumber>
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	aa ef       	ldi	r26, 0xFA	; 250
    39e2:	b3 e4       	ldi	r27, 0x43	; 67
    39e4:	8b 87       	std	Y+11, r24	; 0x0b
    39e6:	9c 87       	std	Y+12, r25	; 0x0c
    39e8:	ad 87       	std	Y+13, r26	; 0x0d
    39ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	4a ef       	ldi	r20, 0xFA	; 250
    39fa:	54 e4       	ldi	r21, 0x44	; 68
    39fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	8f 83       	std	Y+7, r24	; 0x07
    3a06:	98 87       	std	Y+8, r25	; 0x08
    3a08:	a9 87       	std	Y+9, r26	; 0x09
    3a0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a0e:	78 85       	ldd	r23, Y+8	; 0x08
    3a10:	89 85       	ldd	r24, Y+9	; 0x09
    3a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	40 e8       	ldi	r20, 0x80	; 128
    3a1a:	5f e3       	ldi	r21, 0x3F	; 63
    3a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a20:	88 23       	and	r24, r24
    3a22:	2c f4       	brge	.+10     	; 0x3a2e <main+0x104>
		__ticks = 1;
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	9e 83       	std	Y+6, r25	; 0x06
    3a2a:	8d 83       	std	Y+5, r24	; 0x05
    3a2c:	3f c0       	rjmp	.+126    	; 0x3aac <main+0x182>
	else if (__tmp > 65535)
    3a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a30:	78 85       	ldd	r23, Y+8	; 0x08
    3a32:	89 85       	ldd	r24, Y+9	; 0x09
    3a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	3f ef       	ldi	r19, 0xFF	; 255
    3a3a:	4f e7       	ldi	r20, 0x7F	; 127
    3a3c:	57 e4       	ldi	r21, 0x47	; 71
    3a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a42:	18 16       	cp	r1, r24
    3a44:	4c f5       	brge	.+82     	; 0x3a98 <main+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e2       	ldi	r20, 0x20	; 32
    3a54:	51 e4       	ldi	r21, 0x41	; 65
    3a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	bc 01       	movw	r22, r24
    3a60:	cd 01       	movw	r24, r26
    3a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	9e 83       	std	Y+6, r25	; 0x06
    3a6c:	8d 83       	std	Y+5, r24	; 0x05
    3a6e:	0f c0       	rjmp	.+30     	; 0x3a8e <main+0x164>
    3a70:	88 ec       	ldi	r24, 0xC8	; 200
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	9c 83       	std	Y+4, r25	; 0x04
    3a76:	8b 83       	std	Y+3, r24	; 0x03
    3a78:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	f1 f7       	brne	.-4      	; 0x3a7c <main+0x152>
    3a80:	9c 83       	std	Y+4, r25	; 0x04
    3a82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a84:	8d 81       	ldd	r24, Y+5	; 0x05
    3a86:	9e 81       	ldd	r25, Y+6	; 0x06
    3a88:	01 97       	sbiw	r24, 0x01	; 1
    3a8a:	9e 83       	std	Y+6, r25	; 0x06
    3a8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a90:	9e 81       	ldd	r25, Y+6	; 0x06
    3a92:	00 97       	sbiw	r24, 0x00	; 0
    3a94:	69 f7       	brne	.-38     	; 0x3a70 <main+0x146>
    3a96:	7a cf       	rjmp	.-268    	; 0x398c <main+0x62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a98:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9a:	78 85       	ldd	r23, Y+8	; 0x08
    3a9c:	89 85       	ldd	r24, Y+9	; 0x09
    3a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9e 83       	std	Y+6, r25	; 0x06
    3aaa:	8d 83       	std	Y+5, r24	; 0x05
    3aac:	8d 81       	ldd	r24, Y+5	; 0x05
    3aae:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab0:	9a 83       	std	Y+2, r25	; 0x02
    3ab2:	89 83       	std	Y+1, r24	; 0x01
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	f1 f7       	brne	.-4      	; 0x3ab8 <main+0x18e>
    3abc:	9a 83       	std	Y+2, r25	; 0x02
    3abe:	89 83       	std	Y+1, r24	; 0x01
    3ac0:	65 cf       	rjmp	.-310    	; 0x398c <main+0x62>

00003ac2 <ICU_SW>:
	return 0;
}



void ICU_SW(void){
    3ac2:	df 93       	push	r29
    3ac4:	cf 93       	push	r28
    3ac6:	cd b7       	in	r28, 0x3d	; 61
    3ac8:	de b7       	in	r29, 0x3e	; 62

	static uint8 Local_u8Counter = 0;
	Local_u8Counter++;
    3aca:	80 91 e0 01 	lds	r24, 0x01E0
    3ace:	8f 5f       	subi	r24, 0xFF	; 255
    3ad0:	80 93 e0 01 	sts	0x01E0, r24

	if(1 == Local_u8Counter){
    3ad4:	80 91 e0 01 	lds	r24, 0x01E0
    3ad8:	81 30       	cpi	r24, 0x01	; 1
    3ada:	29 f4       	brne	.+10     	; 0x3ae6 <ICU_SW+0x24>

		/* First rising edge */
		TIMER1_voidSetTimerValue(0);
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	0e 94 c9 18 	call	0x3192	; 0x3192 <TIMER1_voidSetTimerValue>
    3ae4:	2a c0       	rjmp	.+84     	; 0x3b3a <ICU_SW+0x78>
	}
	else if(2 == Local_u8Counter){
    3ae6:	80 91 e0 01 	lds	r24, 0x01E0
    3aea:	82 30       	cpi	r24, 0x02	; 2
    3aec:	51 f4       	brne	.+20     	; 0x3b02 <ICU_SW+0x40>

		PeriodTicks = TIMER1_voidReadTimerValue();
    3aee:	0e 94 db 18 	call	0x31b6	; 0x31b6 <TIMER1_voidReadTimerValue>
    3af2:	90 93 dd 01 	sts	0x01DD, r25
    3af6:	80 93 dc 01 	sts	0x01DC, r24

		/* Change trigger to falling edge */
		EXIT0_voidTriggerEdge(FALLING_EDGE);
    3afa:	82 e0       	ldi	r24, 0x02	; 2
    3afc:	0e 94 4d 0a 	call	0x149a	; 0x149a <EXIT0_voidTriggerEdge>
    3b00:	1c c0       	rjmp	.+56     	; 0x3b3a <ICU_SW+0x78>
	}
	else if(3 == Local_u8Counter){
    3b02:	80 91 e0 01 	lds	r24, 0x01E0
    3b06:	83 30       	cpi	r24, 0x03	; 3
    3b08:	c1 f4       	brne	.+48     	; 0x3b3a <ICU_SW+0x78>

		/* Timer reading now is period ticks + on ticks */
		OnTicks = TIMER1_voidReadTimerValue();
    3b0a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <TIMER1_voidReadTimerValue>
    3b0e:	90 93 df 01 	sts	0x01DF, r25
    3b12:	80 93 de 01 	sts	0x01DE, r24
		OnTicks -= PeriodTicks;
    3b16:	20 91 de 01 	lds	r18, 0x01DE
    3b1a:	30 91 df 01 	lds	r19, 0x01DF
    3b1e:	80 91 dc 01 	lds	r24, 0x01DC
    3b22:	90 91 dd 01 	lds	r25, 0x01DD
    3b26:	a9 01       	movw	r20, r18
    3b28:	48 1b       	sub	r20, r24
    3b2a:	59 0b       	sbc	r21, r25
    3b2c:	ca 01       	movw	r24, r20
    3b2e:	90 93 df 01 	sts	0x01DF, r25
    3b32:	80 93 de 01 	sts	0x01DE, r24

		/* Disable INT0 interrupt */
		EXIT0_voidDisable();
    3b36:	0e 94 07 0a 	call	0x140e	; 0x140e <EXIT0_voidDisable>
	}

}
    3b3a:	cf 91       	pop	r28
    3b3c:	df 91       	pop	r29
    3b3e:	08 95       	ret

00003b40 <__mulsi3>:
    3b40:	62 9f       	mul	r22, r18
    3b42:	d0 01       	movw	r26, r0
    3b44:	73 9f       	mul	r23, r19
    3b46:	f0 01       	movw	r30, r0
    3b48:	82 9f       	mul	r24, r18
    3b4a:	e0 0d       	add	r30, r0
    3b4c:	f1 1d       	adc	r31, r1
    3b4e:	64 9f       	mul	r22, r20
    3b50:	e0 0d       	add	r30, r0
    3b52:	f1 1d       	adc	r31, r1
    3b54:	92 9f       	mul	r25, r18
    3b56:	f0 0d       	add	r31, r0
    3b58:	83 9f       	mul	r24, r19
    3b5a:	f0 0d       	add	r31, r0
    3b5c:	74 9f       	mul	r23, r20
    3b5e:	f0 0d       	add	r31, r0
    3b60:	65 9f       	mul	r22, r21
    3b62:	f0 0d       	add	r31, r0
    3b64:	99 27       	eor	r25, r25
    3b66:	72 9f       	mul	r23, r18
    3b68:	b0 0d       	add	r27, r0
    3b6a:	e1 1d       	adc	r30, r1
    3b6c:	f9 1f       	adc	r31, r25
    3b6e:	63 9f       	mul	r22, r19
    3b70:	b0 0d       	add	r27, r0
    3b72:	e1 1d       	adc	r30, r1
    3b74:	f9 1f       	adc	r31, r25
    3b76:	bd 01       	movw	r22, r26
    3b78:	cf 01       	movw	r24, r30
    3b7a:	11 24       	eor	r1, r1
    3b7c:	08 95       	ret

00003b7e <__udivmodhi4>:
    3b7e:	aa 1b       	sub	r26, r26
    3b80:	bb 1b       	sub	r27, r27
    3b82:	51 e1       	ldi	r21, 0x11	; 17
    3b84:	07 c0       	rjmp	.+14     	; 0x3b94 <__udivmodhi4_ep>

00003b86 <__udivmodhi4_loop>:
    3b86:	aa 1f       	adc	r26, r26
    3b88:	bb 1f       	adc	r27, r27
    3b8a:	a6 17       	cp	r26, r22
    3b8c:	b7 07       	cpc	r27, r23
    3b8e:	10 f0       	brcs	.+4      	; 0x3b94 <__udivmodhi4_ep>
    3b90:	a6 1b       	sub	r26, r22
    3b92:	b7 0b       	sbc	r27, r23

00003b94 <__udivmodhi4_ep>:
    3b94:	88 1f       	adc	r24, r24
    3b96:	99 1f       	adc	r25, r25
    3b98:	5a 95       	dec	r21
    3b9a:	a9 f7       	brne	.-22     	; 0x3b86 <__udivmodhi4_loop>
    3b9c:	80 95       	com	r24
    3b9e:	90 95       	com	r25
    3ba0:	bc 01       	movw	r22, r24
    3ba2:	cd 01       	movw	r24, r26
    3ba4:	08 95       	ret

00003ba6 <__udivmodsi4>:
    3ba6:	a1 e2       	ldi	r26, 0x21	; 33
    3ba8:	1a 2e       	mov	r1, r26
    3baa:	aa 1b       	sub	r26, r26
    3bac:	bb 1b       	sub	r27, r27
    3bae:	fd 01       	movw	r30, r26
    3bb0:	0d c0       	rjmp	.+26     	; 0x3bcc <__udivmodsi4_ep>

00003bb2 <__udivmodsi4_loop>:
    3bb2:	aa 1f       	adc	r26, r26
    3bb4:	bb 1f       	adc	r27, r27
    3bb6:	ee 1f       	adc	r30, r30
    3bb8:	ff 1f       	adc	r31, r31
    3bba:	a2 17       	cp	r26, r18
    3bbc:	b3 07       	cpc	r27, r19
    3bbe:	e4 07       	cpc	r30, r20
    3bc0:	f5 07       	cpc	r31, r21
    3bc2:	20 f0       	brcs	.+8      	; 0x3bcc <__udivmodsi4_ep>
    3bc4:	a2 1b       	sub	r26, r18
    3bc6:	b3 0b       	sbc	r27, r19
    3bc8:	e4 0b       	sbc	r30, r20
    3bca:	f5 0b       	sbc	r31, r21

00003bcc <__udivmodsi4_ep>:
    3bcc:	66 1f       	adc	r22, r22
    3bce:	77 1f       	adc	r23, r23
    3bd0:	88 1f       	adc	r24, r24
    3bd2:	99 1f       	adc	r25, r25
    3bd4:	1a 94       	dec	r1
    3bd6:	69 f7       	brne	.-38     	; 0x3bb2 <__udivmodsi4_loop>
    3bd8:	60 95       	com	r22
    3bda:	70 95       	com	r23
    3bdc:	80 95       	com	r24
    3bde:	90 95       	com	r25
    3be0:	9b 01       	movw	r18, r22
    3be2:	ac 01       	movw	r20, r24
    3be4:	bd 01       	movw	r22, r26
    3be6:	cf 01       	movw	r24, r30
    3be8:	08 95       	ret

00003bea <__prologue_saves__>:
    3bea:	2f 92       	push	r2
    3bec:	3f 92       	push	r3
    3bee:	4f 92       	push	r4
    3bf0:	5f 92       	push	r5
    3bf2:	6f 92       	push	r6
    3bf4:	7f 92       	push	r7
    3bf6:	8f 92       	push	r8
    3bf8:	9f 92       	push	r9
    3bfa:	af 92       	push	r10
    3bfc:	bf 92       	push	r11
    3bfe:	cf 92       	push	r12
    3c00:	df 92       	push	r13
    3c02:	ef 92       	push	r14
    3c04:	ff 92       	push	r15
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	cf 93       	push	r28
    3c0c:	df 93       	push	r29
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	ca 1b       	sub	r28, r26
    3c14:	db 0b       	sbc	r29, r27
    3c16:	0f b6       	in	r0, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	de bf       	out	0x3e, r29	; 62
    3c1c:	0f be       	out	0x3f, r0	; 63
    3c1e:	cd bf       	out	0x3d, r28	; 61
    3c20:	09 94       	ijmp

00003c22 <__epilogue_restores__>:
    3c22:	2a 88       	ldd	r2, Y+18	; 0x12
    3c24:	39 88       	ldd	r3, Y+17	; 0x11
    3c26:	48 88       	ldd	r4, Y+16	; 0x10
    3c28:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c30:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c32:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c34:	b9 84       	ldd	r11, Y+9	; 0x09
    3c36:	c8 84       	ldd	r12, Y+8	; 0x08
    3c38:	df 80       	ldd	r13, Y+7	; 0x07
    3c3a:	ee 80       	ldd	r14, Y+6	; 0x06
    3c3c:	fd 80       	ldd	r15, Y+5	; 0x05
    3c3e:	0c 81       	ldd	r16, Y+4	; 0x04
    3c40:	1b 81       	ldd	r17, Y+3	; 0x03
    3c42:	aa 81       	ldd	r26, Y+2	; 0x02
    3c44:	b9 81       	ldd	r27, Y+1	; 0x01
    3c46:	ce 0f       	add	r28, r30
    3c48:	d1 1d       	adc	r29, r1
    3c4a:	0f b6       	in	r0, 0x3f	; 63
    3c4c:	f8 94       	cli
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	0f be       	out	0x3f, r0	; 63
    3c52:	cd bf       	out	0x3d, r28	; 61
    3c54:	ed 01       	movw	r28, r26
    3c56:	08 95       	ret

00003c58 <_exit>:
    3c58:	f8 94       	cli

00003c5a <__stop_program>:
    3c5a:	ff cf       	rjmp	.-2      	; 0x3c5a <__stop_program>
