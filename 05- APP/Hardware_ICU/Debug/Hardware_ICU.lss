
Hardware_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  00003880  00003914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008001c2  008001c2  00003a76  2**0
                  ALLOC
  3 .stab         000030b4  00000000  00000000  00003a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d72  00000000  00000000  00006b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000889e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00008a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00008bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000ac00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000bd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000cd74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000cf14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000d1d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000da83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__vector_6>
      1c:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__vector_7>
      20:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__vector_8>
      24:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__vector_9>
      28:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__vector_10>
      2c:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3e       	cpi	r26, 0xE1	; 225
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 98 1a 	call	0x3530	; 0x3530 <main>
      8a:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ee 57       	subi	r30, 0x7E	; 126
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <DIO_voidSetPinDirection>:

/******************************************************************************
**************************** Function Implementation **************************
******************************************************************************/

void DIO_voidSetPinDirection(uint8 Copy_u8Pin, uint8 Copy_u8Mode){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <DIO_voidSetPinDirection+0x6>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	6a 83       	std	Y+2, r22	; 0x02

	if(DIO_OUTPUT == Copy_u8Mode){
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	09 f0       	breq	.+2      	; 0xcec <DIO_voidSetPinDirection+0x16>
     cea:	70 c0       	rjmp	.+224    	; 0xdcc <DIO_voidSetPinDirection+0xf6>
	
		if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	88 30       	cpi	r24, 0x08	; 8
     cf0:	a0 f4       	brcc	.+40     	; 0xd1a <DIO_voidSetPinDirection+0x44>

			SET_BIT(DDRA, Copy_u8Pin);
     cf2:	aa e3       	ldi	r26, 0x3A	; 58
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ea e3       	ldi	r30, 0x3A	; 58
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_voidSetPinDirection+0x3a>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_voidSetPinDirection+0x36>
     d14:	84 2b       	or	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	ce c0       	rjmp	.+412    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}

		else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	88 30       	cpi	r24, 0x08	; 8
     d1e:	d0 f0       	brcs	.+52     	; 0xd54 <DIO_voidSetPinDirection+0x7e>
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	80 31       	cpi	r24, 0x10	; 16
     d24:	b8 f4       	brcc	.+46     	; 0xd54 <DIO_voidSetPinDirection+0x7e>

			SET_BIT(DDRB, (Copy_u8Pin-8));
     d26:	a7 e3       	ldi	r26, 0x37	; 55
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e3       	ldi	r30, 0x37	; 55
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	9c 01       	movw	r18, r24
     d3a:	28 50       	subi	r18, 0x08	; 8
     d3c:	30 40       	sbci	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_voidSetPinDirection+0x74>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <DIO_voidSetPinDirection+0x70>
     d4e:	84 2b       	or	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	b1 c0       	rjmp	.+354    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}

		else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	80 31       	cpi	r24, 0x10	; 16
     d58:	d0 f0       	brcs	.+52     	; 0xd8e <DIO_voidSetPinDirection+0xb8>
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	88 31       	cpi	r24, 0x18	; 24
     d5e:	b8 f4       	brcc	.+46     	; 0xd8e <DIO_voidSetPinDirection+0xb8>

			SET_BIT(DDRC, (Copy_u8Pin-16));
     d60:	a4 e3       	ldi	r26, 0x34	; 52
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e4 e3       	ldi	r30, 0x34	; 52
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9c 01       	movw	r18, r24
     d74:	20 51       	subi	r18, 0x10	; 16
     d76:	30 40       	sbci	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_voidSetPinDirection+0xae>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_voidSetPinDirection+0xaa>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	94 c0       	rjmp	.+296    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}
		
		else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	88 31       	cpi	r24, 0x18	; 24
     d92:	08 f4       	brcc	.+2      	; 0xd96 <DIO_voidSetPinDirection+0xc0>
     d94:	90 c0       	rjmp	.+288    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	80 32       	cpi	r24, 0x20	; 32
     d9a:	08 f0       	brcs	.+2      	; 0xd9e <DIO_voidSetPinDirection+0xc8>
     d9c:	8c c0       	rjmp	.+280    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>

			SET_BIT(DDRD, (Copy_u8Pin-24));
     d9e:	a1 e3       	ldi	r26, 0x31	; 49
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e1 e3       	ldi	r30, 0x31	; 49
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9c 01       	movw	r18, r24
     db2:	28 51       	subi	r18, 0x18	; 24
     db4:	30 40       	sbci	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_voidSetPinDirection+0xec>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_voidSetPinDirection+0xe8>
     dc6:	84 2b       	or	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	75 c0       	rjmp	.+234    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>

		else{    /* return error  */   }

	}
	
	else if(DIO_INPUT == Copy_u8Mode){
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	88 23       	and	r24, r24
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <DIO_voidSetPinDirection+0xfe>
     dd2:	71 c0       	rjmp	.+226    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
	
		if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	88 30       	cpi	r24, 0x08	; 8
     dd8:	a8 f4       	brcc	.+42     	; 0xe04 <DIO_voidSetPinDirection+0x12e>

			CLR_BIT(DDRA, Copy_u8Pin);
     dda:	aa e3       	ldi	r26, 0x3A	; 58
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ea e3       	ldi	r30, 0x3A	; 58
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_voidSetPinDirection+0x122>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_voidSetPinDirection+0x11e>
     dfc:	80 95       	com	r24
     dfe:	84 23       	and	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	59 c0       	rjmp	.+178    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}

		else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	88 30       	cpi	r24, 0x08	; 8
     e08:	d8 f0       	brcs	.+54     	; 0xe40 <DIO_voidSetPinDirection+0x16a>
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	80 31       	cpi	r24, 0x10	; 16
     e0e:	c0 f4       	brcc	.+48     	; 0xe40 <DIO_voidSetPinDirection+0x16a>

			CLR_BIT(DDRB, (Copy_u8Pin-8));
     e10:	a7 e3       	ldi	r26, 0x37	; 55
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e3       	ldi	r30, 0x37	; 55
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9c 01       	movw	r18, r24
     e24:	28 50       	subi	r18, 0x08	; 8
     e26:	30 40       	sbci	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_voidSetPinDirection+0x15e>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_voidSetPinDirection+0x15a>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	3b c0       	rjmp	.+118    	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}

		else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	80 31       	cpi	r24, 0x10	; 16
     e44:	d8 f0       	brcs	.+54     	; 0xe7c <DIO_voidSetPinDirection+0x1a6>
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 31       	cpi	r24, 0x18	; 24
     e4a:	c0 f4       	brcc	.+48     	; 0xe7c <DIO_voidSetPinDirection+0x1a6>

			CLR_BIT(DDRC, (Copy_u8Pin-16));
     e4c:	a4 e3       	ldi	r26, 0x34	; 52
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e4 e3       	ldi	r30, 0x34	; 52
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9c 01       	movw	r18, r24
     e60:	20 51       	subi	r18, 0x10	; 16
     e62:	30 40       	sbci	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_voidSetPinDirection+0x19a>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_voidSetPinDirection+0x196>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	1d c0       	rjmp	.+58     	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
		}
		
		else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	88 31       	cpi	r24, 0x18	; 24
     e80:	d0 f0       	brcs	.+52     	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	80 32       	cpi	r24, 0x20	; 32
     e86:	b8 f4       	brcc	.+46     	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>

			CLR_BIT(DDRD, (Copy_u8Pin-24));
     e88:	a1 e3       	ldi	r26, 0x31	; 49
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e1 e3       	ldi	r30, 0x31	; 49
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	9c 01       	movw	r18, r24
     e9c:	28 51       	subi	r18, 0x18	; 24
     e9e:	30 40       	sbci	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_voidSetPinDirection+0x1d6>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_voidSetPinDirection+0x1d2>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
		else{    /* return error  */   }
	}
	
	else{    /* return error  */   }

}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(uint8 Copy_u8Pin, uint8 Copy_u8Value){
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <DIO_voidSetPinValue+0x6>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	6a 83       	std	Y+2, r22	; 0x02

	if(DIO_HIGH == Copy_u8Value){
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	09 f0       	breq	.+2      	; 0xed6 <DIO_voidSetPinValue+0x16>
     ed4:	70 c0       	rjmp	.+224    	; 0xfb6 <DIO_voidSetPinValue+0xf6>
	
		if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	88 30       	cpi	r24, 0x08	; 8
     eda:	a0 f4       	brcc	.+40     	; 0xf04 <DIO_voidSetPinValue+0x44>

			SET_BIT(PORTA, Copy_u8Pin);
     edc:	ab e3       	ldi	r26, 0x3B	; 59
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	eb e3       	ldi	r30, 0x3B	; 59
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_voidSetPinValue+0x3a>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_voidSetPinValue+0x36>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	ce c0       	rjmp	.+412    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}

		else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	d0 f0       	brcs	.+52     	; 0xf3e <DIO_voidSetPinValue+0x7e>
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	80 31       	cpi	r24, 0x10	; 16
     f0e:	b8 f4       	brcc	.+46     	; 0xf3e <DIO_voidSetPinValue+0x7e>

			SET_BIT(PORTB, (Copy_u8Pin-8));
     f10:	a8 e3       	ldi	r26, 0x38	; 56
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e8 e3       	ldi	r30, 0x38	; 56
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9c 01       	movw	r18, r24
     f24:	28 50       	subi	r18, 0x08	; 8
     f26:	30 40       	sbci	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetPinValue+0x74>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetPinValue+0x70>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	b1 c0       	rjmp	.+354    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}

		else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	80 31       	cpi	r24, 0x10	; 16
     f42:	d0 f0       	brcs	.+52     	; 0xf78 <DIO_voidSetPinValue+0xb8>
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	88 31       	cpi	r24, 0x18	; 24
     f48:	b8 f4       	brcc	.+46     	; 0xf78 <DIO_voidSetPinValue+0xb8>

			SET_BIT(PORTC, (Copy_u8Pin-16));
     f4a:	a5 e3       	ldi	r26, 0x35	; 53
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e5 e3       	ldi	r30, 0x35	; 53
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	9c 01       	movw	r18, r24
     f5e:	20 51       	subi	r18, 0x10	; 16
     f60:	30 40       	sbci	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_voidSetPinValue+0xae>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_voidSetPinValue+0xaa>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	94 c0       	rjmp	.+296    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}
		
		else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	88 31       	cpi	r24, 0x18	; 24
     f7c:	08 f4       	brcc	.+2      	; 0xf80 <DIO_voidSetPinValue+0xc0>
     f7e:	90 c0       	rjmp	.+288    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	80 32       	cpi	r24, 0x20	; 32
     f84:	08 f0       	brcs	.+2      	; 0xf88 <DIO_voidSetPinValue+0xc8>
     f86:	8c c0       	rjmp	.+280    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>

			SET_BIT(PORTD, (Copy_u8Pin-24));
     f88:	a2 e3       	ldi	r26, 0x32	; 50
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e2 e3       	ldi	r30, 0x32	; 50
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9c 01       	movw	r18, r24
     f9c:	28 51       	subi	r18, 0x18	; 24
     f9e:	30 40       	sbci	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_voidSetPinValue+0xec>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_voidSetPinValue+0xe8>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	75 c0       	rjmp	.+234    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}

		else{    /* return error  */   }
	}
	
	else if(DIO_LOW == Copy_u8Value){
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	88 23       	and	r24, r24
     fba:	09 f0       	breq	.+2      	; 0xfbe <DIO_voidSetPinValue+0xfe>
     fbc:	71 c0       	rjmp	.+226    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>

		if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	88 30       	cpi	r24, 0x08	; 8
     fc2:	a8 f4       	brcc	.+42     	; 0xfee <DIO_voidSetPinValue+0x12e>

			CLR_BIT(PORTA, Copy_u8Pin);
     fc4:	ab e3       	ldi	r26, 0x3B	; 59
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	eb e3       	ldi	r30, 0x3B	; 59
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_voidSetPinValue+0x122>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_voidSetPinValue+0x11e>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	59 c0       	rjmp	.+178    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}

		else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	88 30       	cpi	r24, 0x08	; 8
     ff2:	d8 f0       	brcs	.+54     	; 0x102a <DIO_voidSetPinValue+0x16a>
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	80 31       	cpi	r24, 0x10	; 16
     ff8:	c0 f4       	brcc	.+48     	; 0x102a <DIO_voidSetPinValue+0x16a>

			CLR_BIT(PORTB, (Copy_u8Pin-8));
     ffa:	a8 e3       	ldi	r26, 0x38	; 56
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e8 e3       	ldi	r30, 0x38	; 56
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9c 01       	movw	r18, r24
    100e:	28 50       	subi	r18, 0x08	; 8
    1010:	30 40       	sbci	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_voidSetPinValue+0x15e>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_voidSetPinValue+0x15a>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	3b c0       	rjmp	.+118    	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}

		else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	80 31       	cpi	r24, 0x10	; 16
    102e:	d8 f0       	brcs	.+54     	; 0x1066 <DIO_voidSetPinValue+0x1a6>
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	88 31       	cpi	r24, 0x18	; 24
    1034:	c0 f4       	brcc	.+48     	; 0x1066 <DIO_voidSetPinValue+0x1a6>

			CLR_BIT(PORTC, (Copy_u8Pin-16));
    1036:	a5 e3       	ldi	r26, 0x35	; 53
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e3       	ldi	r30, 0x35	; 53
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9c 01       	movw	r18, r24
    104a:	20 51       	subi	r18, 0x10	; 16
    104c:	30 40       	sbci	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_voidSetPinValue+0x19a>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_voidSetPinValue+0x196>
    105e:	80 95       	com	r24
    1060:	84 23       	and	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	1d c0       	rjmp	.+58     	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
		}
		
		else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	88 31       	cpi	r24, 0x18	; 24
    106a:	d0 f0       	brcs	.+52     	; 0x10a0 <DIO_voidSetPinValue+0x1e0>
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	80 32       	cpi	r24, 0x20	; 32
    1070:	b8 f4       	brcc	.+46     	; 0x10a0 <DIO_voidSetPinValue+0x1e0>

			CLR_BIT(PORTD, (Copy_u8Pin-24));
    1072:	a2 e3       	ldi	r26, 0x32	; 50
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e2 e3       	ldi	r30, 0x32	; 50
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9c 01       	movw	r18, r24
    1086:	28 51       	subi	r18, 0x18	; 24
    1088:	30 40       	sbci	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_voidSetPinValue+0x1d6>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_voidSetPinValue+0x1d2>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24

	}
	
	else{    /* return error  */   }

}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <DIO_u8GetPinValue>:


uint8 DIO_u8GetPinValue(uint8 Copy_u8Pin){
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <DIO_u8GetPinValue+0x6>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Result = 0; 
    10b6:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	88 30       	cpi	r24, 0x08	; 8
    10bc:	90 f4       	brcc	.+36     	; 0x10e2 <DIO_u8GetPinValue+0x38>

		Local_u8Result = GET_BIT(PINA, Copy_u8Pin);
    10be:	e9 e3       	ldi	r30, 0x39	; 57
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a9 01       	movw	r20, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_u8GetPinValue+0x2c>
    10d2:	55 95       	asr	r21
    10d4:	47 95       	ror	r20
    10d6:	8a 95       	dec	r24
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_u8GetPinValue+0x28>
    10da:	ca 01       	movw	r24, r20
    10dc:	81 70       	andi	r24, 0x01	; 1
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	47 c0       	rjmp	.+142    	; 0x1170 <DIO_u8GetPinValue+0xc6>
	}
	else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	88 30       	cpi	r24, 0x08	; 8
    10e6:	a8 f0       	brcs	.+42     	; 0x1112 <DIO_u8GetPinValue+0x68>
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	80 31       	cpi	r24, 0x10	; 16
    10ec:	90 f4       	brcc	.+36     	; 0x1112 <DIO_u8GetPinValue+0x68>

		Local_u8Result = GET_BIT(PINB, Copy_u8Pin);
    10ee:	e6 e3       	ldi	r30, 0x36	; 54
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a9 01       	movw	r20, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_u8GetPinValue+0x5c>
    1102:	55 95       	asr	r21
    1104:	47 95       	ror	r20
    1106:	8a 95       	dec	r24
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_u8GetPinValue+0x58>
    110a:	ca 01       	movw	r24, r20
    110c:	81 70       	andi	r24, 0x01	; 1
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	2f c0       	rjmp	.+94     	; 0x1170 <DIO_u8GetPinValue+0xc6>
	}
	else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 31       	cpi	r24, 0x10	; 16
    1116:	a8 f0       	brcs	.+42     	; 0x1142 <DIO_u8GetPinValue+0x98>
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	88 31       	cpi	r24, 0x18	; 24
    111c:	90 f4       	brcc	.+36     	; 0x1142 <DIO_u8GetPinValue+0x98>

		Local_u8Result = GET_BIT(PINC, Copy_u8Pin);
    111e:	e3 e3       	ldi	r30, 0x33	; 51
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a9 01       	movw	r20, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_u8GetPinValue+0x8c>
    1132:	55 95       	asr	r21
    1134:	47 95       	ror	r20
    1136:	8a 95       	dec	r24
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_u8GetPinValue+0x88>
    113a:	ca 01       	movw	r24, r20
    113c:	81 70       	andi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	17 c0       	rjmp	.+46     	; 0x1170 <DIO_u8GetPinValue+0xc6>
	}
	else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	88 31       	cpi	r24, 0x18	; 24
    1146:	a0 f0       	brcs	.+40     	; 0x1170 <DIO_u8GetPinValue+0xc6>
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	80 32       	cpi	r24, 0x20	; 32
    114c:	88 f4       	brcc	.+34     	; 0x1170 <DIO_u8GetPinValue+0xc6>
		
		Local_u8Result = GET_BIT(PIND, Copy_u8Pin);
    114e:	e0 e3       	ldi	r30, 0x30	; 48
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_u8GetPinValue+0xbc>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_u8GetPinValue+0xb8>
    116a:	ca 01       	movw	r24, r20
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Result;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Mode){
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <DIO_voidSetPortDirection+0x6>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <DIO_voidSetPortDirection+0x8>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_u8Port){ 
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3c 83       	std	Y+4, r19	; 0x04
    1194:	2b 83       	std	Y+3, r18	; 0x03
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	d1 f0       	breq	.+52     	; 0x11d4 <DIO_voidSetPortDirection+0x58>
    11a0:	2b 81       	ldd	r18, Y+3	; 0x03
    11a2:	3c 81       	ldd	r19, Y+4	; 0x04
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <DIO_voidSetPortDirection+0x38>
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	61 f0       	breq	.+24     	; 0x11ca <DIO_voidSetPortDirection+0x4e>
    11b2:	1e c0       	rjmp	.+60     	; 0x11f0 <DIO_voidSetPortDirection+0x74>
    11b4:	2b 81       	ldd	r18, Y+3	; 0x03
    11b6:	3c 81       	ldd	r19, Y+4	; 0x04
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	81 f0       	breq	.+32     	; 0x11de <DIO_voidSetPortDirection+0x62>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	83 30       	cpi	r24, 0x03	; 3
    11c4:	91 05       	cpc	r25, r1
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <DIO_voidSetPortDirection+0x6c>
    11c8:	13 c0       	rjmp	.+38     	; 0x11f0 <DIO_voidSetPortDirection+0x74>
	
		case DIO_PORTA:		DDRA = Copy_u8Mode;		break;
    11ca:	ea e3       	ldi	r30, 0x3A	; 58
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	80 83       	st	Z, r24
    11d2:	0e c0       	rjmp	.+28     	; 0x11f0 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB:		DDRB = Copy_u8Mode;		break;
    11d4:	e7 e3       	ldi	r30, 0x37	; 55
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	80 83       	st	Z, r24
    11dc:	09 c0       	rjmp	.+18     	; 0x11f0 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC:		DDRC = Copy_u8Mode;		break;
    11de:	e4 e3       	ldi	r30, 0x34	; 52
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD:		DDRD = Copy_u8Mode;		break;
    11e8:	e1 e3       	ldi	r30, 0x31	; 49
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	80 83       	st	Z, r24
		
	}
	
}
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value){
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <DIO_voidSetPortValue+0x6>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <DIO_voidSetPortValue+0x8>
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8Port){ 
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	3c 83       	std	Y+4, r19	; 0x04
    1216:	2b 83       	std	Y+3, r18	; 0x03
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	91 05       	cpc	r25, r1
    1220:	d1 f0       	breq	.+52     	; 0x1256 <DIO_voidSetPortValue+0x58>
    1222:	2b 81       	ldd	r18, Y+3	; 0x03
    1224:	3c 81       	ldd	r19, Y+4	; 0x04
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	2c f4       	brge	.+10     	; 0x1236 <DIO_voidSetPortValue+0x38>
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	61 f0       	breq	.+24     	; 0x124c <DIO_voidSetPortValue+0x4e>
    1234:	1e c0       	rjmp	.+60     	; 0x1272 <DIO_voidSetPortValue+0x74>
    1236:	2b 81       	ldd	r18, Y+3	; 0x03
    1238:	3c 81       	ldd	r19, Y+4	; 0x04
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	81 f0       	breq	.+32     	; 0x1260 <DIO_voidSetPortValue+0x62>
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <DIO_voidSetPortValue+0x6c>
    124a:	13 c0       	rjmp	.+38     	; 0x1272 <DIO_voidSetPortValue+0x74>
	
		case DIO_PORTA:		PORTA = Copy_u8Value;		break;
    124c:	eb e3       	ldi	r30, 0x3B	; 59
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	80 83       	st	Z, r24
    1254:	0e c0       	rjmp	.+28     	; 0x1272 <DIO_voidSetPortValue+0x74>
		case DIO_PORTB:		PORTB = Copy_u8Value;		break;
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	80 83       	st	Z, r24
    125e:	09 c0       	rjmp	.+18     	; 0x1272 <DIO_voidSetPortValue+0x74>
		case DIO_PORTC:		PORTC = Copy_u8Value;		break;
    1260:	e5 e3       	ldi	r30, 0x35	; 53
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	80 83       	st	Z, r24
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <DIO_voidSetPortValue+0x74>
		case DIO_PORTD:		PORTD = Copy_u8Value;		break;
    126a:	e2 e3       	ldi	r30, 0x32	; 50
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	80 83       	st	Z, r24
			
	}
	
}
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <DIO_voidTogglePin>:


void DIO_voidTogglePin(uint8 Copy_u8Pin){
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	0f 92       	push	r0
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Pin >= 0) && (Copy_u8Pin <= 7)){
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	88 30       	cpi	r24, 0x08	; 8
    1290:	a0 f4       	brcc	.+40     	; 0x12ba <DIO_voidTogglePin+0x3a>

		TOG_BIT(PORTA, Copy_u8Pin);
    1292:	ab e3       	ldi	r26, 0x3B	; 59
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	eb e3       	ldi	r30, 0x3B	; 59
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_voidTogglePin+0x30>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_voidTogglePin+0x2c>
    12b4:	84 27       	eor	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	56 c0       	rjmp	.+172    	; 0x1366 <DIO_voidTogglePin+0xe6>
	}

	else if((Copy_u8Pin >= 8) && (Copy_u8Pin <= 15)){
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	d0 f0       	brcs	.+52     	; 0x12f4 <DIO_voidTogglePin+0x74>
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	80 31       	cpi	r24, 0x10	; 16
    12c4:	b8 f4       	brcc	.+46     	; 0x12f4 <DIO_voidTogglePin+0x74>

		TOG_BIT(PORTB, (Copy_u8Pin-8));
    12c6:	a8 e3       	ldi	r26, 0x38	; 56
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e8 e3       	ldi	r30, 0x38	; 56
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9c 01       	movw	r18, r24
    12da:	28 50       	subi	r18, 0x08	; 8
    12dc:	30 40       	sbci	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_voidTogglePin+0x6a>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_voidTogglePin+0x66>
    12ee:	84 27       	eor	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	39 c0       	rjmp	.+114    	; 0x1366 <DIO_voidTogglePin+0xe6>
	}

	else if((Copy_u8Pin >= 16) && (Copy_u8Pin <= 23)){
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	80 31       	cpi	r24, 0x10	; 16
    12f8:	d0 f0       	brcs	.+52     	; 0x132e <DIO_voidTogglePin+0xae>
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	88 31       	cpi	r24, 0x18	; 24
    12fe:	b8 f4       	brcc	.+46     	; 0x132e <DIO_voidTogglePin+0xae>

		TOG_BIT(PORTC, (Copy_u8Pin-16));
    1300:	a5 e3       	ldi	r26, 0x35	; 53
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e3       	ldi	r30, 0x35	; 53
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9c 01       	movw	r18, r24
    1314:	20 51       	subi	r18, 0x10	; 16
    1316:	30 40       	sbci	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_voidTogglePin+0xa4>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_voidTogglePin+0xa0>
    1328:	84 27       	eor	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	1c c0       	rjmp	.+56     	; 0x1366 <DIO_voidTogglePin+0xe6>
	}
	
	else if((Copy_u8Pin >= 24) && (Copy_u8Pin <= 31)){
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	88 31       	cpi	r24, 0x18	; 24
    1332:	c8 f0       	brcs	.+50     	; 0x1366 <DIO_voidTogglePin+0xe6>
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	80 32       	cpi	r24, 0x20	; 32
    1338:	b0 f4       	brcc	.+44     	; 0x1366 <DIO_voidTogglePin+0xe6>

		TOG_BIT(PORTD, (Copy_u8Pin-24));
    133a:	a2 e3       	ldi	r26, 0x32	; 50
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9c 01       	movw	r18, r24
    134e:	28 51       	subi	r18, 0x18	; 24
    1350:	30 40       	sbci	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_voidTogglePin+0xde>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_voidTogglePin+0xda>
    1362:	84 27       	eor	r24, r20
    1364:	8c 93       	st	X, r24
	}

	else{    /* return error  */   }

}
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_u8GetPortValue>:

uint8 DIO_u8GetPortValue(uint8 Copy_u8Port){
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <DIO_u8GetPortValue+0x6>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <DIO_u8GetPortValue+0x8>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Result = 0x00;
    137c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	3c 83       	std	Y+4, r19	; 0x04
    1386:	2b 83       	std	Y+3, r18	; 0x03
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	d1 f0       	breq	.+52     	; 0x13c6 <DIO_u8GetPortValue+0x58>
    1392:	2b 81       	ldd	r18, Y+3	; 0x03
    1394:	3c 81       	ldd	r19, Y+4	; 0x04
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	2c f4       	brge	.+10     	; 0x13a6 <DIO_u8GetPortValue+0x38>
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	61 f0       	breq	.+24     	; 0x13bc <DIO_u8GetPortValue+0x4e>
    13a4:	1e c0       	rjmp	.+60     	; 0x13e2 <DIO_u8GetPortValue+0x74>
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	81 f0       	breq	.+32     	; 0x13d0 <DIO_u8GetPortValue+0x62>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	91 05       	cpc	r25, r1
    13b8:	81 f0       	breq	.+32     	; 0x13da <DIO_u8GetPortValue+0x6c>
    13ba:	13 c0       	rjmp	.+38     	; 0x13e2 <DIO_u8GetPortValue+0x74>

		case DIO_PORTA:		Local_u8Result = PINA;		break;
    13bc:	e9 e3       	ldi	r30, 0x39	; 57
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	0e c0       	rjmp	.+28     	; 0x13e2 <DIO_u8GetPortValue+0x74>
		case DIO_PORTB:		Local_u8Result = PINB;		break;
    13c6:	e6 e3       	ldi	r30, 0x36	; 54
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	09 c0       	rjmp	.+18     	; 0x13e2 <DIO_u8GetPortValue+0x74>
		case DIO_PORTC:		Local_u8Result = PINC;		break;
    13d0:	e3 e3       	ldi	r30, 0x33	; 51
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <DIO_u8GetPortValue+0x74>
		case DIO_PORTD:		Local_u8Result = PIND;		break;
    13da:	e0 e3       	ldi	r30, 0x30	; 48
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8Result;
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <GIE_voidEnable>:

/******************************************************************************
* Description : Global Interrupt Enable (GIE) Function.		                  *
******************************************************************************/

void GIE_voidEnable(void){
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62

	/* Enable global interrupt */
	SET_BIT(SREG, GIE);
    13fa:	af e5       	ldi	r26, 0x5F	; 95
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ef e5       	ldi	r30, 0x5F	; 95
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	8c 93       	st	X, r24
	
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <GIE_voidDisable>:

/******************************************************************************
* Description : Global Interrupt Disable (GIE) Function.		              *
******************************************************************************/

void GIE_voidDisable(void){
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62

	/* Disable global interrupt */
	CLR_BIT(SREG, GIE);
    1416:	af e5       	ldi	r26, 0x5F	; 95
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ef e5       	ldi	r30, 0x5F	; 95
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 77       	andi	r24, 0x7F	; 127
    1422:	8c 93       	st	X, r24
	
}
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <LCD_voidWriteData>:

/******************************************************************************
* Description 	: LCD Display Char on LCD Function.						      *
******************************************************************************/

void LCD_voidWriteData(uint8 Copy_u8Data){
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	6d 97       	sbiw	r28, 0x1d	; 29
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidSetPinValue(LCD_RS_PIN, DIO_HIGH);
    1440:	80 e1       	ldi	r24, 0x10	; 16
    1442:	61 e0       	ldi	r22, 0x01	; 1
    1444:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_RW_PIN, DIO_LOW );
    1448:	81 e1       	ldi	r24, 0x11	; 17
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>

	if(LCD_MODE == MODE_8_BIT){
		
		DIO_voidSetPortValue(LCD_PORT_DATA, Copy_u8Data);
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1454:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(LCD_EN_PIN, DIO_HIGH);
    1458:	82 e1       	ldi	r24, 0x12	; 18
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 e8       	ldi	r26, 0x80	; 128
    1466:	bf e3       	ldi	r27, 0x3F	; 63
    1468:	89 8f       	std	Y+25, r24	; 0x19
    146a:	9a 8f       	std	Y+26, r25	; 0x1a
    146c:	ab 8f       	std	Y+27, r26	; 0x1b
    146e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	69 8d       	ldd	r22, Y+25	; 0x19
    1472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a ef       	ldi	r20, 0xFA	; 250
    147e:	54 e4       	ldi	r21, 0x44	; 68
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8d 8b       	std	Y+21, r24	; 0x15
    148a:	9e 8b       	std	Y+22, r25	; 0x16
    148c:	af 8b       	std	Y+23, r26	; 0x17
    148e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1490:	6d 89       	ldd	r22, Y+21	; 0x15
    1492:	7e 89       	ldd	r23, Y+22	; 0x16
    1494:	8f 89       	ldd	r24, Y+23	; 0x17
    1496:	98 8d       	ldd	r25, Y+24	; 0x18
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <LCD_voidWriteData+0x88>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9c 8b       	std	Y+20, r25	; 0x14
    14ae:	8b 8b       	std	Y+19, r24	; 0x13
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <LCD_voidWriteData+0x106>
	else if (__tmp > 65535)
    14b2:	6d 89       	ldd	r22, Y+21	; 0x15
    14b4:	7e 89       	ldd	r23, Y+22	; 0x16
    14b6:	8f 89       	ldd	r24, Y+23	; 0x17
    14b8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <LCD_voidWriteData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	69 8d       	ldd	r22, Y+25	; 0x19
    14cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <LCD_voidWriteData+0xe8>
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9a 8b       	std	Y+18, r25	; 0x12
    14fa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14fc:	89 89       	ldd	r24, Y+17	; 0x11
    14fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <LCD_voidWriteData+0xd6>
    1504:	9a 8b       	std	Y+18, r25	; 0x12
    1506:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	8b 89       	ldd	r24, Y+19	; 0x13
    150a:	9c 89       	ldd	r25, Y+20	; 0x14
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9c 8b       	std	Y+20, r25	; 0x14
    1510:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	8b 89       	ldd	r24, Y+19	; 0x13
    1514:	9c 89       	ldd	r25, Y+20	; 0x14
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <LCD_voidWriteData+0xca>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <LCD_voidWriteData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6d 89       	ldd	r22, Y+21	; 0x15
    151e:	7e 89       	ldd	r23, Y+22	; 0x16
    1520:	8f 89       	ldd	r24, Y+23	; 0x17
    1522:	98 8d       	ldd	r25, Y+24	; 0x18
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9c 8b       	std	Y+20, r25	; 0x14
    152e:	8b 8b       	std	Y+19, r24	; 0x13
    1530:	8b 89       	ldd	r24, Y+19	; 0x13
    1532:	9c 89       	ldd	r25, Y+20	; 0x14
    1534:	98 8b       	std	Y+16, r25	; 0x10
    1536:	8f 87       	std	Y+15, r24	; 0x0f
    1538:	8f 85       	ldd	r24, Y+15	; 0x0f
    153a:	98 89       	ldd	r25, Y+16	; 0x10
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <LCD_voidWriteData+0x112>
    1540:	98 8b       	std	Y+16, r25	; 0x10
    1542:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		
		DIO_voidSetPinValue(LCD_EN_PIN, DIO_LOW);
    1544:	82 e1       	ldi	r24, 0x12	; 18
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a0 e8       	ldi	r26, 0x80	; 128
    1552:	bf e3       	ldi	r27, 0x3F	; 63
    1554:	8b 87       	std	Y+11, r24	; 0x0b
    1556:	9c 87       	std	Y+12, r25	; 0x0c
    1558:	ad 87       	std	Y+13, r26	; 0x0d
    155a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155c:	6b 85       	ldd	r22, Y+11	; 0x0b
    155e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1560:	8d 85       	ldd	r24, Y+13	; 0x0d
    1562:	9e 85       	ldd	r25, Y+14	; 0x0e
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	4a ef       	ldi	r20, 0xFA	; 250
    156a:	54 e4       	ldi	r21, 0x44	; 68
    156c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	8f 83       	std	Y+7, r24	; 0x07
    1576:	98 87       	std	Y+8, r25	; 0x08
    1578:	a9 87       	std	Y+9, r26	; 0x09
    157a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    157c:	6f 81       	ldd	r22, Y+7	; 0x07
    157e:	78 85       	ldd	r23, Y+8	; 0x08
    1580:	89 85       	ldd	r24, Y+9	; 0x09
    1582:	9a 85       	ldd	r25, Y+10	; 0x0a
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e8       	ldi	r20, 0x80	; 128
    158a:	5f e3       	ldi	r21, 0x3F	; 63
    158c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1590:	88 23       	and	r24, r24
    1592:	2c f4       	brge	.+10     	; 0x159e <LCD_voidWriteData+0x174>
		__ticks = 1;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	9e 83       	std	Y+6, r25	; 0x06
    159a:	8d 83       	std	Y+5, r24	; 0x05
    159c:	3f c0       	rjmp	.+126    	; 0x161c <LCD_voidWriteData+0x1f2>
	else if (__tmp > 65535)
    159e:	6f 81       	ldd	r22, Y+7	; 0x07
    15a0:	78 85       	ldd	r23, Y+8	; 0x08
    15a2:	89 85       	ldd	r24, Y+9	; 0x09
    15a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	3f ef       	ldi	r19, 0xFF	; 255
    15aa:	4f e7       	ldi	r20, 0x7F	; 127
    15ac:	57 e4       	ldi	r21, 0x47	; 71
    15ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b2:	18 16       	cp	r1, r24
    15b4:	4c f5       	brge	.+82     	; 0x1608 <LCD_voidWriteData+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    15bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e2       	ldi	r20, 0x20	; 32
    15c4:	51 e4       	ldi	r21, 0x41	; 65
    15c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	bc 01       	movw	r22, r24
    15d0:	cd 01       	movw	r24, r26
    15d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	9e 83       	std	Y+6, r25	; 0x06
    15dc:	8d 83       	std	Y+5, r24	; 0x05
    15de:	0f c0       	rjmp	.+30     	; 0x15fe <LCD_voidWriteData+0x1d4>
    15e0:	88 ec       	ldi	r24, 0xC8	; 200
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	9c 83       	std	Y+4, r25	; 0x04
    15e6:	8b 83       	std	Y+3, r24	; 0x03
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <LCD_voidWriteData+0x1c2>
    15f0:	9c 83       	std	Y+4, r25	; 0x04
    15f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	69 f7       	brne	.-38     	; 0x15e0 <LCD_voidWriteData+0x1b6>
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <LCD_voidWriteData+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1608:	6f 81       	ldd	r22, Y+7	; 0x07
    160a:	78 85       	ldd	r23, Y+8	; 0x08
    160c:	89 85       	ldd	r24, Y+9	; 0x09
    160e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	9e 83       	std	Y+6, r25	; 0x06
    161a:	8d 83       	std	Y+5, r24	; 0x05
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <LCD_voidWriteData+0x1fe>
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	89 83       	std	Y+1, r24	; 0x01
		
	}	
	
	else{  /* return error */  }
		
}
    1630:	6d 96       	adiw	r28, 0x1d	; 29
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <LCD_voidSendCommand>:

/******************************************************************************
* Description 	: LCD Send Command Function.						          *
******************************************************************************/

void LCD_voidSendCommand(uint8 Copy_u8Command){
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	6d 97       	sbiw	r28, 0x1d	; 29
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidSetPinValue (LCD_RS_PIN, DIO_LOW);
    1658:	80 e1       	ldi	r24, 0x10	; 16
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_RW_PIN, DIO_LOW);
    1660:	81 e1       	ldi	r24, 0x11	; 17
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
	
	if(LCD_MODE == MODE_8_BIT){
		
		DIO_voidSetPortValue(LCD_PORT_DATA, Copy_u8Command);
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    166c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(LCD_EN_PIN, DIO_HIGH);
    1670:	82 e1       	ldi	r24, 0x12	; 18
    1672:	61 e0       	ldi	r22, 0x01	; 1
    1674:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 e8       	ldi	r26, 0x80	; 128
    167e:	bf e3       	ldi	r27, 0x3F	; 63
    1680:	89 8f       	std	Y+25, r24	; 0x19
    1682:	9a 8f       	std	Y+26, r25	; 0x1a
    1684:	ab 8f       	std	Y+27, r26	; 0x1b
    1686:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	69 8d       	ldd	r22, Y+25	; 0x19
    168a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    168c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a ef       	ldi	r20, 0xFA	; 250
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8d 8b       	std	Y+21, r24	; 0x15
    16a2:	9e 8b       	std	Y+22, r25	; 0x16
    16a4:	af 8b       	std	Y+23, r26	; 0x17
    16a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16a8:	6d 89       	ldd	r22, Y+21	; 0x15
    16aa:	7e 89       	ldd	r23, Y+22	; 0x16
    16ac:	8f 89       	ldd	r24, Y+23	; 0x17
    16ae:	98 8d       	ldd	r25, Y+24	; 0x18
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <LCD_voidSendCommand+0x88>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9c 8b       	std	Y+20, r25	; 0x14
    16c6:	8b 8b       	std	Y+19, r24	; 0x13
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <LCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    16ca:	6d 89       	ldd	r22, Y+21	; 0x15
    16cc:	7e 89       	ldd	r23, Y+22	; 0x16
    16ce:	8f 89       	ldd	r24, Y+23	; 0x17
    16d0:	98 8d       	ldd	r25, Y+24	; 0x18
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <LCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	69 8d       	ldd	r22, Y+25	; 0x19
    16e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9c 8b       	std	Y+20, r25	; 0x14
    1708:	8b 8b       	std	Y+19, r24	; 0x13
    170a:	0f c0       	rjmp	.+30     	; 0x172a <LCD_voidSendCommand+0xe8>
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9a 8b       	std	Y+18, r25	; 0x12
    1712:	89 8b       	std	Y+17, r24	; 0x11
    1714:	89 89       	ldd	r24, Y+17	; 0x11
    1716:	9a 89       	ldd	r25, Y+18	; 0x12
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_voidSendCommand+0xd6>
    171c:	9a 8b       	std	Y+18, r25	; 0x12
    171e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8b 89       	ldd	r24, Y+19	; 0x13
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9c 8b       	std	Y+20, r25	; 0x14
    1728:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8b 89       	ldd	r24, Y+19	; 0x13
    172c:	9c 89       	ldd	r25, Y+20	; 0x14
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <LCD_voidSendCommand+0xca>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <LCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6d 89       	ldd	r22, Y+21	; 0x15
    1736:	7e 89       	ldd	r23, Y+22	; 0x16
    1738:	8f 89       	ldd	r24, Y+23	; 0x17
    173a:	98 8d       	ldd	r25, Y+24	; 0x18
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9c 8b       	std	Y+20, r25	; 0x14
    1746:	8b 8b       	std	Y+19, r24	; 0x13
    1748:	8b 89       	ldd	r24, Y+19	; 0x13
    174a:	9c 89       	ldd	r25, Y+20	; 0x14
    174c:	98 8b       	std	Y+16, r25	; 0x10
    174e:	8f 87       	std	Y+15, r24	; 0x0f
    1750:	8f 85       	ldd	r24, Y+15	; 0x0f
    1752:	98 89       	ldd	r25, Y+16	; 0x10
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCD_voidSendCommand+0x112>
    1758:	98 8b       	std	Y+16, r25	; 0x10
    175a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		
		DIO_voidSetPinValue(LCD_EN_PIN, DIO_LOW);
    175c:	82 e1       	ldi	r24, 0x12	; 18
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a0 e8       	ldi	r26, 0x80	; 128
    176a:	bf e3       	ldi	r27, 0x3F	; 63
    176c:	8b 87       	std	Y+11, r24	; 0x0b
    176e:	9c 87       	std	Y+12, r25	; 0x0c
    1770:	ad 87       	std	Y+13, r26	; 0x0d
    1772:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1774:	6b 85       	ldd	r22, Y+11	; 0x0b
    1776:	7c 85       	ldd	r23, Y+12	; 0x0c
    1778:	8d 85       	ldd	r24, Y+13	; 0x0d
    177a:	9e 85       	ldd	r25, Y+14	; 0x0e
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a ef       	ldi	r20, 0xFA	; 250
    1782:	54 e4       	ldi	r21, 0x44	; 68
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8f 83       	std	Y+7, r24	; 0x07
    178e:	98 87       	std	Y+8, r25	; 0x08
    1790:	a9 87       	std	Y+9, r26	; 0x09
    1792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <LCD_voidSendCommand+0x174>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	3f c0       	rjmp	.+126    	; 0x1834 <LCD_voidSendCommand+0x1f2>
	else if (__tmp > 65535)
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	4c f5       	brge	.+82     	; 0x1820 <LCD_voidSendCommand+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <LCD_voidSendCommand+0x1d4>
    17f8:	88 ec       	ldi	r24, 0xC8	; 200
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8b 83       	std	Y+3, r24	; 0x03
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_voidSendCommand+0x1c2>
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	69 f7       	brne	.-38     	; 0x17f8 <LCD_voidSendCommand+0x1b6>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <LCD_voidSendCommand+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <LCD_voidSendCommand+0x1fe>
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
		
	}	
	
	else{  /* return error */  }

}
    1848:	6d 96       	adiw	r28, 0x1d	; 29
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <LCD_voidInit>:

/******************************************************************************
* Description 	: LCD Initialization Function.						          *
******************************************************************************/

void LCD_voidInit(void){
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	e8 97       	sbiw	r28, 0x38	; 56
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61

	/* set port data as output */
	DIO_voidSetPortDirection(LCD_PORT_DATA, 0xFF);
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	6f ef       	ldi	r22, 0xFF	; 255
    1872:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_voidSetPortDirection>
		
	/* set RS, RW, EN pins  as output */
	DIO_voidSetPinDirection(LCD_RS_PIN, DIO_OUTPUT);
    1876:	80 e1       	ldi	r24, 0x10	; 16
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PIN, DIO_OUTPUT);
    187e:	81 e1       	ldi	r24, 0x11	; 17
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_EN_PIN, DIO_OUTPUT);
    1886:	82 e1       	ldi	r24, 0x12	; 18
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
		
	/* Init data port & EN by zero */
	DIO_voidSetPortValue(LCD_PORT_DATA, DIO_LOW);
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_EN_PIN, DIO_LOW);
    1896:	82 e1       	ldi	r24, 0x12	; 18
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a0 ef       	ldi	r26, 0xF0	; 240
    18a4:	b1 e4       	ldi	r27, 0x41	; 65
    18a6:	8d ab       	std	Y+53, r24	; 0x35
    18a8:	9e ab       	std	Y+54, r25	; 0x36
    18aa:	af ab       	std	Y+55, r26	; 0x37
    18ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	6d a9       	ldd	r22, Y+53	; 0x35
    18b0:	7e a9       	ldd	r23, Y+54	; 0x36
    18b2:	8f a9       	ldd	r24, Y+55	; 0x37
    18b4:	98 ad       	ldd	r25, Y+56	; 0x38
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a ef       	ldi	r20, 0xFA	; 250
    18bc:	54 e4       	ldi	r21, 0x44	; 68
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	89 ab       	std	Y+49, r24	; 0x31
    18c8:	9a ab       	std	Y+50, r25	; 0x32
    18ca:	ab ab       	std	Y+51, r26	; 0x33
    18cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18ce:	69 a9       	ldd	r22, Y+49	; 0x31
    18d0:	7a a9       	ldd	r23, Y+50	; 0x32
    18d2:	8b a9       	ldd	r24, Y+51	; 0x33
    18d4:	9c a9       	ldd	r25, Y+52	; 0x34
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <LCD_voidInit+0x96>
		__ticks = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	98 ab       	std	Y+48, r25	; 0x30
    18ec:	8f a7       	std	Y+47, r24	; 0x2f
    18ee:	3f c0       	rjmp	.+126    	; 0x196e <LCD_voidInit+0x114>
	else if (__tmp > 65535)
    18f0:	69 a9       	ldd	r22, Y+49	; 0x31
    18f2:	7a a9       	ldd	r23, Y+50	; 0x32
    18f4:	8b a9       	ldd	r24, Y+51	; 0x33
    18f6:	9c a9       	ldd	r25, Y+52	; 0x34
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	4c f5       	brge	.+82     	; 0x195a <LCD_voidInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	6d a9       	ldd	r22, Y+53	; 0x35
    190a:	7e a9       	ldd	r23, Y+54	; 0x36
    190c:	8f a9       	ldd	r24, Y+55	; 0x37
    190e:	98 ad       	ldd	r25, Y+56	; 0x38
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	98 ab       	std	Y+48, r25	; 0x30
    192e:	8f a7       	std	Y+47, r24	; 0x2f
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <LCD_voidInit+0xf6>
    1932:	88 ec       	ldi	r24, 0xC8	; 200
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9e a7       	std	Y+46, r25	; 0x2e
    1938:	8d a7       	std	Y+45, r24	; 0x2d
    193a:	8d a5       	ldd	r24, Y+45	; 0x2d
    193c:	9e a5       	ldd	r25, Y+46	; 0x2e
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <LCD_voidInit+0xe4>
    1942:	9e a7       	std	Y+46, r25	; 0x2e
    1944:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1946:	8f a5       	ldd	r24, Y+47	; 0x2f
    1948:	98 a9       	ldd	r25, Y+48	; 0x30
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	98 ab       	std	Y+48, r25	; 0x30
    194e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1950:	8f a5       	ldd	r24, Y+47	; 0x2f
    1952:	98 a9       	ldd	r25, Y+48	; 0x30
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	69 f7       	brne	.-38     	; 0x1932 <LCD_voidInit+0xd8>
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <LCD_voidInit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	69 a9       	ldd	r22, Y+49	; 0x31
    195c:	7a a9       	ldd	r23, Y+50	; 0x32
    195e:	8b a9       	ldd	r24, Y+51	; 0x33
    1960:	9c a9       	ldd	r25, Y+52	; 0x34
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	98 ab       	std	Y+48, r25	; 0x30
    196c:	8f a7       	std	Y+47, r24	; 0x2f
    196e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1970:	98 a9       	ldd	r25, Y+48	; 0x30
    1972:	9c a7       	std	Y+44, r25	; 0x2c
    1974:	8b a7       	std	Y+43, r24	; 0x2b
    1976:	8b a5       	ldd	r24, Y+43	; 0x2b
    1978:	9c a5       	ldd	r25, Y+44	; 0x2c
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <LCD_voidInit+0x120>
    197e:	9c a7       	std	Y+44, r25	; 0x2c
    1980:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(30);

	
	#if LCD_MODE == MODE_8_BIT

		LCD_voidSendCommand(FUNCTION_SET);
    1982:	88 e3       	ldi	r24, 0x38	; 56
    1984:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_voidSendCommand>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	a0 e8       	ldi	r26, 0x80	; 128
    198e:	bf e3       	ldi	r27, 0x3F	; 63
    1990:	8f a3       	std	Y+39, r24	; 0x27
    1992:	98 a7       	std	Y+40, r25	; 0x28
    1994:	a9 a7       	std	Y+41, r26	; 0x29
    1996:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1998:	6f a1       	ldd	r22, Y+39	; 0x27
    199a:	78 a5       	ldd	r23, Y+40	; 0x28
    199c:	89 a5       	ldd	r24, Y+41	; 0x29
    199e:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4a ef       	ldi	r20, 0xFA	; 250
    19a6:	54 e4       	ldi	r21, 0x44	; 68
    19a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	8b a3       	std	Y+35, r24	; 0x23
    19b2:	9c a3       	std	Y+36, r25	; 0x24
    19b4:	ad a3       	std	Y+37, r26	; 0x25
    19b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19b8:	6b a1       	ldd	r22, Y+35	; 0x23
    19ba:	7c a1       	ldd	r23, Y+36	; 0x24
    19bc:	8d a1       	ldd	r24, Y+37	; 0x25
    19be:	9e a1       	ldd	r25, Y+38	; 0x26
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e8       	ldi	r20, 0x80	; 128
    19c6:	5f e3       	ldi	r21, 0x3F	; 63
    19c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19cc:	88 23       	and	r24, r24
    19ce:	2c f4       	brge	.+10     	; 0x19da <LCD_voidInit+0x180>
		__ticks = 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9a a3       	std	Y+34, r25	; 0x22
    19d6:	89 a3       	std	Y+33, r24	; 0x21
    19d8:	3f c0       	rjmp	.+126    	; 0x1a58 <LCD_voidInit+0x1fe>
	else if (__tmp > 65535)
    19da:	6b a1       	ldd	r22, Y+35	; 0x23
    19dc:	7c a1       	ldd	r23, Y+36	; 0x24
    19de:	8d a1       	ldd	r24, Y+37	; 0x25
    19e0:	9e a1       	ldd	r25, Y+38	; 0x26
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	4f e7       	ldi	r20, 0x7F	; 127
    19e8:	57 e4       	ldi	r21, 0x47	; 71
    19ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	4c f5       	brge	.+82     	; 0x1a44 <LCD_voidInit+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f2:	6f a1       	ldd	r22, Y+39	; 0x27
    19f4:	78 a5       	ldd	r23, Y+40	; 0x28
    19f6:	89 a5       	ldd	r24, Y+41	; 0x29
    19f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e2       	ldi	r20, 0x20	; 32
    1a00:	51 e4       	ldi	r21, 0x41	; 65
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9a a3       	std	Y+34, r25	; 0x22
    1a18:	89 a3       	std	Y+33, r24	; 0x21
    1a1a:	0f c0       	rjmp	.+30     	; 0x1a3a <LCD_voidInit+0x1e0>
    1a1c:	88 ec       	ldi	r24, 0xC8	; 200
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	98 a3       	std	Y+32, r25	; 0x20
    1a22:	8f 8f       	std	Y+31, r24	; 0x1f
    1a24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a26:	98 a1       	ldd	r25, Y+32	; 0x20
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_voidInit+0x1ce>
    1a2c:	98 a3       	std	Y+32, r25	; 0x20
    1a2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a30:	89 a1       	ldd	r24, Y+33	; 0x21
    1a32:	9a a1       	ldd	r25, Y+34	; 0x22
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	9a a3       	std	Y+34, r25	; 0x22
    1a38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <LCD_voidInit+0x1c2>
    1a42:	14 c0       	rjmp	.+40     	; 0x1a6c <LCD_voidInit+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a44:	6b a1       	ldd	r22, Y+35	; 0x23
    1a46:	7c a1       	ldd	r23, Y+36	; 0x24
    1a48:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9a a3       	std	Y+34, r25	; 0x22
    1a56:	89 a3       	std	Y+33, r24	; 0x21
    1a58:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <LCD_voidInit+0x20a>
    1a68:	9e 8f       	std	Y+30, r25	; 0x1e
    1a6a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		LCD_voidSendCommand(DISPLAY_ON_OFF);
    1a6c:	8e e0       	ldi	r24, 0x0E	; 14
    1a6e:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_voidSendCommand>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a0 e8       	ldi	r26, 0x80	; 128
    1a78:	bf e3       	ldi	r27, 0x3F	; 63
    1a7a:	89 8f       	std	Y+25, r24	; 0x19
    1a7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a82:	69 8d       	ldd	r22, Y+25	; 0x19
    1a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a ef       	ldi	r20, 0xFA	; 250
    1a90:	54 e4       	ldi	r21, 0x44	; 68
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8d 8b       	std	Y+21, r24	; 0x15
    1a9c:	9e 8b       	std	Y+22, r25	; 0x16
    1a9e:	af 8b       	std	Y+23, r26	; 0x17
    1aa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <LCD_voidInit+0x26a>
		__ticks = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9c 8b       	std	Y+20, r25	; 0x14
    1ac0:	8b 8b       	std	Y+19, r24	; 0x13
    1ac2:	3f c0       	rjmp	.+126    	; 0x1b42 <LCD_voidInit+0x2e8>
	else if (__tmp > 65535)
    1ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aca:	98 8d       	ldd	r25, Y+24	; 0x18
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	4c f5       	brge	.+82     	; 0x1b2e <LCD_voidInit+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9c 8b       	std	Y+20, r25	; 0x14
    1b02:	8b 8b       	std	Y+19, r24	; 0x13
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <LCD_voidInit+0x2ca>
    1b06:	88 ec       	ldi	r24, 0xC8	; 200
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9a 8b       	std	Y+18, r25	; 0x12
    1b0c:	89 8b       	std	Y+17, r24	; 0x11
    1b0e:	89 89       	ldd	r24, Y+17	; 0x11
    1b10:	9a 89       	ldd	r25, Y+18	; 0x12
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <LCD_voidInit+0x2b8>
    1b16:	9a 8b       	std	Y+18, r25	; 0x12
    1b18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	9c 8b       	std	Y+20, r25	; 0x14
    1b22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	8b 89       	ldd	r24, Y+19	; 0x13
    1b26:	9c 89       	ldd	r25, Y+20	; 0x14
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <LCD_voidInit+0x2ac>
    1b2c:	14 c0       	rjmp	.+40     	; 0x1b56 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b30:	7e 89       	ldd	r23, Y+22	; 0x16
    1b32:	8f 89       	ldd	r24, Y+23	; 0x17
    1b34:	98 8d       	ldd	r25, Y+24	; 0x18
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9c 8b       	std	Y+20, r25	; 0x14
    1b40:	8b 8b       	std	Y+19, r24	; 0x13
    1b42:	8b 89       	ldd	r24, Y+19	; 0x13
    1b44:	9c 89       	ldd	r25, Y+20	; 0x14
    1b46:	98 8b       	std	Y+16, r25	; 0x10
    1b48:	8f 87       	std	Y+15, r24	; 0x0f
    1b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b4c:	98 89       	ldd	r25, Y+16	; 0x10
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_voidInit+0x2f4>
    1b52:	98 8b       	std	Y+16, r25	; 0x10
    1b54:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		LCD_voidSendCommand(DISPLAY_CLEAR);
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_voidSendCommand>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a0 e0       	ldi	r26, 0x00	; 0
    1b62:	b0 e4       	ldi	r27, 0x40	; 64
    1b64:	8b 87       	std	Y+11, r24	; 0x0b
    1b66:	9c 87       	std	Y+12, r25	; 0x0c
    1b68:	ad 87       	std	Y+13, r26	; 0x0d
    1b6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4a ef       	ldi	r20, 0xFA	; 250
    1b7a:	54 e4       	ldi	r21, 0x44	; 68
    1b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	8f 83       	std	Y+7, r24	; 0x07
    1b86:	98 87       	std	Y+8, r25	; 0x08
    1b88:	a9 87       	std	Y+9, r26	; 0x09
    1b8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8e:	78 85       	ldd	r23, Y+8	; 0x08
    1b90:	89 85       	ldd	r24, Y+9	; 0x09
    1b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e8       	ldi	r20, 0x80	; 128
    1b9a:	5f e3       	ldi	r21, 0x3F	; 63
    1b9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba0:	88 23       	and	r24, r24
    1ba2:	2c f4       	brge	.+10     	; 0x1bae <LCD_voidInit+0x354>
		__ticks = 1;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9e 83       	std	Y+6, r25	; 0x06
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	3f c0       	rjmp	.+126    	; 0x1c2c <LCD_voidInit+0x3d2>
	else if (__tmp > 65535)
    1bae:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb0:	78 85       	ldd	r23, Y+8	; 0x08
    1bb2:	89 85       	ldd	r24, Y+9	; 0x09
    1bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	3f ef       	ldi	r19, 0xFF	; 255
    1bba:	4f e7       	ldi	r20, 0x7F	; 127
    1bbc:	57 e4       	ldi	r21, 0x47	; 71
    1bbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc2:	18 16       	cp	r1, r24
    1bc4:	4c f5       	brge	.+82     	; 0x1c18 <LCD_voidInit+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e2       	ldi	r20, 0x20	; 32
    1bd4:	51 e4       	ldi	r21, 0x41	; 65
    1bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9e 83       	std	Y+6, r25	; 0x06
    1bec:	8d 83       	std	Y+5, r24	; 0x05
    1bee:	0f c0       	rjmp	.+30     	; 0x1c0e <LCD_voidInit+0x3b4>
    1bf0:	88 ec       	ldi	r24, 0xC8	; 200
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9c 83       	std	Y+4, r25	; 0x04
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_voidInit+0x3a2>
    1c00:	9c 83       	std	Y+4, r25	; 0x04
    1c02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	9e 81       	ldd	r25, Y+6	; 0x06
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	69 f7       	brne	.-38     	; 0x1bf0 <LCD_voidInit+0x396>
    1c16:	14 c0       	rjmp	.+40     	; 0x1c40 <LCD_voidInit+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c18:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1a:	78 85       	ldd	r23, Y+8	; 0x08
    1c1c:	89 85       	ldd	r24, Y+9	; 0x09
    1c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	9e 83       	std	Y+6, r25	; 0x06
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	9a 81       	ldd	r25, Y+2	; 0x02
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <LCD_voidInit+0x3de>
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(0x06);
		
	#else 
		#erroe("You Chosed Wrong LCD Mode")
	#endif
}
    1c40:	e8 96       	adiw	r28, 0x38	; 56
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <LCD_voidClearScreen>:

/******************************************************************************
* Description 	: LCD Clear Screen Function.						          *
******************************************************************************/

void LCD_voidClearScreen(void){
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61

	LCD_voidSendCommand(DISPLAY_CLEAR);
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_voidSendCommand>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a0 e0       	ldi	r26, 0x00	; 0
    1c72:	b0 e4       	ldi	r27, 0x40	; 64
    1c74:	8b 87       	std	Y+11, r24	; 0x0b
    1c76:	9c 87       	std	Y+12, r25	; 0x0c
    1c78:	ad 87       	std	Y+13, r26	; 0x0d
    1c7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	4a ef       	ldi	r20, 0xFA	; 250
    1c8a:	54 e4       	ldi	r21, 0x44	; 68
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	8f 83       	std	Y+7, r24	; 0x07
    1c96:	98 87       	std	Y+8, r25	; 0x08
    1c98:	a9 87       	std	Y+9, r26	; 0x09
    1c9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e8       	ldi	r20, 0x80	; 128
    1caa:	5f e3       	ldi	r21, 0x3F	; 63
    1cac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb0:	88 23       	and	r24, r24
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	3f c0       	rjmp	.+126    	; 0x1d3c <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    1cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc0:	78 85       	ldd	r23, Y+8	; 0x08
    1cc2:	89 85       	ldd	r24, Y+9	; 0x09
    1cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	4c f5       	brge	.+82     	; 0x1d28 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e2       	ldi	r20, 0x20	; 32
    1ce4:	51 e4       	ldi	r21, 0x41	; 65
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
    1cfe:	0f c0       	rjmp	.+30     	; 0x1d1e <LCD_voidClearScreen+0xcc>
    1d00:	88 ec       	ldi	r24, 0xC8	; 200
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9c 83       	std	Y+4, r25	; 0x04
    1d06:	8b 83       	std	Y+3, r24	; 0x03
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <LCD_voidClearScreen+0xba>
    1d10:	9c 83       	std	Y+4, r25	; 0x04
    1d12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d14:	8d 81       	ldd	r24, Y+5	; 0x05
    1d16:	9e 81       	ldd	r25, Y+6	; 0x06
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	69 f7       	brne	.-38     	; 0x1d00 <LCD_voidClearScreen+0xae>
    1d26:	14 c0       	rjmp	.+40     	; 0x1d50 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d28:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2a:	78 85       	ldd	r23, Y+8	; 0x08
    1d2c:	89 85       	ldd	r24, Y+9	; 0x09
    1d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <LCD_voidClearScreen+0xf6>
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1d50:	2e 96       	adiw	r28, 0x0e	; 14
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <LCD_voidWriteString>:

/******************************************************************************
* Description 	: LCD Write String Function.						          *
******************************************************************************/

void LCD_voidWriteString(uint8 *Copy_u8Ptr){
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <LCD_voidWriteString+0x6>
    1d68:	0f 92       	push	r0
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	9b 83       	std	Y+3, r25	; 0x03
    1d70:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8 Local_u8Counter = 0;
    1d72:	19 82       	std	Y+1, r1	; 0x01
    1d74:	0e c0       	rjmp	.+28     	; 0x1d92 <LCD_voidWriteString+0x30>

	while(Copy_u8Ptr[Local_u8Counter] != 0){
	
		LCD_voidWriteData(Copy_u8Ptr[Local_u8Counter]);
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d80:	fc 01       	movw	r30, r24
    1d82:	e2 0f       	add	r30, r18
    1d84:	f3 1f       	adc	r31, r19
    1d86:	80 81       	ld	r24, Z
    1d88:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_voidWriteData>
		Local_u8Counter++;
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(uint8 *Copy_u8Ptr){
	
	uint8 Local_u8Counter = 0;

	while(Copy_u8Ptr[Local_u8Counter] != 0){
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	e2 0f       	add	r30, r18
    1da0:	f3 1f       	adc	r31, r19
    1da2:	80 81       	ld	r24, Z
    1da4:	88 23       	and	r24, r24
    1da6:	39 f7       	brne	.-50     	; 0x1d76 <LCD_voidWriteString+0x14>
		LCD_voidWriteData(Copy_u8Ptr[Local_u8Counter]);
		Local_u8Counter++;
	
	}

}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <LCD_voidSetPosition>:

/******************************************************************************
* Description 	: LCD Set Cursor Function.						              *
******************************************************************************/

void LCD_voidSetPosition(uint8 Copy_u8Row, uint8 Copy_u8Col){
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <LCD_voidSetPosition+0x6>
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	6a 83       	std	Y+2, r22	; 0x02

	if(0 == Copy_u8Row){
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	88 23       	and	r24, r24
    1dc6:	29 f4       	brne	.+10     	; 0x1dd2 <LCD_voidSetPosition+0x1e>

		/* set ddram */
		LCD_voidSendCommand(128 + Copy_u8Col);
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	80 58       	subi	r24, 0x80	; 128
    1dcc:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_voidSendCommand>
    1dd0:	07 c0       	rjmp	.+14     	; 0x1de0 <LCD_voidSetPosition+0x2c>
	}

	else if(1 == Copy_u8Row){
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	21 f4       	brne	.+8      	; 0x1de0 <LCD_voidSetPosition+0x2c>

		/* set ddram */
		LCD_voidSendCommand(128 + 64 + Copy_u8Col);
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	80 54       	subi	r24, 0x40	; 64
    1ddc:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_voidSendCommand>
	}

	else{  /* return error */ }

}
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <LCD_voidDisplayLoop>:

/******************************************************************************
* Description 	: LCD Display Loop String or Char on lcd Function             *
******************************************************************************/

void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, uint8 *Copy_u8Ptr){
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	a1 97       	sbiw	r28, 0x21	; 33
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	8e 8f       	std	Y+30, r24	; 0x1e
    1e00:	6f 8f       	std	Y+31, r22	; 0x1f
    1e02:	59 a3       	std	Y+33, r21	; 0x21
    1e04:	48 a3       	std	Y+32, r20	; 0x20

	for(uint8 i=0; i<15; i++){
    1e06:	1d 8e       	std	Y+29, r1	; 0x1d
    1e08:	f9 c0       	rjmp	.+498    	; 0x1ffc <LCD_voidDisplayLoop+0x212>

		LCD_voidSetPosition(Copy_u8Row, i);
    1e0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e0c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e0e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidSetPosition>

		LCD_voidWriteString(Copy_u8Ptr);
    1e12:	88 a1       	ldd	r24, Y+32	; 0x20
    1e14:	99 a1       	ldd	r25, Y+33	; 0x21
    1e16:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_voidWriteString>
		_delay_ms(Copy_u8Speed);
    1e1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a0 e0       	ldi	r26, 0x00	; 0
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	89 8f       	std	Y+25, r24	; 0x19
    1e32:	9a 8f       	std	Y+26, r25	; 0x1a
    1e34:	ab 8f       	std	Y+27, r26	; 0x1b
    1e36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	69 8d       	ldd	r22, Y+25	; 0x19
    1e3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a ef       	ldi	r20, 0xFA	; 250
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8d 8b       	std	Y+21, r24	; 0x15
    1e52:	9e 8b       	std	Y+22, r25	; 0x16
    1e54:	af 8b       	std	Y+23, r26	; 0x17
    1e56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e58:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <LCD_voidDisplayLoop+0x90>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9c 8b       	std	Y+20, r25	; 0x14
    1e76:	8b 8b       	std	Y+19, r24	; 0x13
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <LCD_voidDisplayLoop+0x10e>
	else if (__tmp > 65535)
    1e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e80:	98 8d       	ldd	r25, Y+24	; 0x18
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <LCD_voidDisplayLoop+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	69 8d       	ldd	r22, Y+25	; 0x19
    1e94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9c 8b       	std	Y+20, r25	; 0x14
    1eb8:	8b 8b       	std	Y+19, r24	; 0x13
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <LCD_voidDisplayLoop+0xf0>
    1ebc:	88 ec       	ldi	r24, 0xC8	; 200
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9a 8b       	std	Y+18, r25	; 0x12
    1ec2:	89 8b       	std	Y+17, r24	; 0x11
    1ec4:	89 89       	ldd	r24, Y+17	; 0x11
    1ec6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_voidDisplayLoop+0xde>
    1ecc:	9a 8b       	std	Y+18, r25	; 0x12
    1ece:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9c 8b       	std	Y+20, r25	; 0x14
    1ed8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	8b 89       	ldd	r24, Y+19	; 0x13
    1edc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <LCD_voidDisplayLoop+0xd2>
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <LCD_voidDisplayLoop+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eea:	98 8d       	ldd	r25, Y+24	; 0x18
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9c 8b       	std	Y+20, r25	; 0x14
    1ef6:	8b 8b       	std	Y+19, r24	; 0x13
    1ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    1efa:	9c 89       	ldd	r25, Y+20	; 0x14
    1efc:	98 8b       	std	Y+16, r25	; 0x10
    1efe:	8f 87       	std	Y+15, r24	; 0x0f
    1f00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f02:	98 89       	ldd	r25, Y+16	; 0x10
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_voidDisplayLoop+0x11a>
    1f08:	98 8b       	std	Y+16, r25	; 0x10
    1f0a:	8f 87       	std	Y+15, r24	; 0x0f

		LCD_voidSendCommand(DISPLAY_CLEAR);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_voidSendCommand>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 e0       	ldi	r26, 0x00	; 0
    1f18:	b0 e4       	ldi	r27, 0x40	; 64
    1f1a:	8b 87       	std	Y+11, r24	; 0x0b
    1f1c:	9c 87       	std	Y+12, r25	; 0x0c
    1f1e:	ad 87       	std	Y+13, r26	; 0x0d
    1f20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a ef       	ldi	r20, 0xFA	; 250
    1f30:	54 e4       	ldi	r21, 0x44	; 68
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	8f 83       	std	Y+7, r24	; 0x07
    1f3c:	98 87       	std	Y+8, r25	; 0x08
    1f3e:	a9 87       	std	Y+9, r26	; 0x09
    1f40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f42:	6f 81       	ldd	r22, Y+7	; 0x07
    1f44:	78 85       	ldd	r23, Y+8	; 0x08
    1f46:	89 85       	ldd	r24, Y+9	; 0x09
    1f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e8       	ldi	r20, 0x80	; 128
    1f50:	5f e3       	ldi	r21, 0x3F	; 63
    1f52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f56:	88 23       	and	r24, r24
    1f58:	2c f4       	brge	.+10     	; 0x1f64 <LCD_voidDisplayLoop+0x17a>
		__ticks = 1;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9e 83       	std	Y+6, r25	; 0x06
    1f60:	8d 83       	std	Y+5, r24	; 0x05
    1f62:	3f c0       	rjmp	.+126    	; 0x1fe2 <LCD_voidDisplayLoop+0x1f8>
	else if (__tmp > 65535)
    1f64:	6f 81       	ldd	r22, Y+7	; 0x07
    1f66:	78 85       	ldd	r23, Y+8	; 0x08
    1f68:	89 85       	ldd	r24, Y+9	; 0x09
    1f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	3f ef       	ldi	r19, 0xFF	; 255
    1f70:	4f e7       	ldi	r20, 0x7F	; 127
    1f72:	57 e4       	ldi	r21, 0x47	; 71
    1f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f78:	18 16       	cp	r1, r24
    1f7a:	4c f5       	brge	.+82     	; 0x1fce <LCD_voidDisplayLoop+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e2       	ldi	r20, 0x20	; 32
    1f8a:	51 e4       	ldi	r21, 0x41	; 65
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	bc 01       	movw	r22, r24
    1f96:	cd 01       	movw	r24, r26
    1f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9e 83       	std	Y+6, r25	; 0x06
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
    1fa4:	0f c0       	rjmp	.+30     	; 0x1fc4 <LCD_voidDisplayLoop+0x1da>
    1fa6:	88 ec       	ldi	r24, 0xC8	; 200
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9c 83       	std	Y+4, r25	; 0x04
    1fac:	8b 83       	std	Y+3, r24	; 0x03
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <LCD_voidDisplayLoop+0x1c8>
    1fb6:	9c 83       	std	Y+4, r25	; 0x04
    1fb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	9e 83       	std	Y+6, r25	; 0x06
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	69 f7       	brne	.-38     	; 0x1fa6 <LCD_voidDisplayLoop+0x1bc>
    1fcc:	14 c0       	rjmp	.+40     	; 0x1ff6 <LCD_voidDisplayLoop+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fce:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd0:	78 85       	ldd	r23, Y+8	; 0x08
    1fd2:	89 85       	ldd	r24, Y+9	; 0x09
    1fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9e 83       	std	Y+6, r25	; 0x06
    1fe0:	8d 83       	std	Y+5, r24	; 0x05
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_voidDisplayLoop+0x204>
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
* Description 	: LCD Display Loop String or Char on lcd Function             *
******************************************************************************/

void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, uint8 *Copy_u8Ptr){

	for(uint8 i=0; i<15; i++){
    1ff6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff8:	8f 5f       	subi	r24, 0xFF	; 255
    1ffa:	8d 8f       	std	Y+29, r24	; 0x1d
    1ffc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ffe:	8f 30       	cpi	r24, 0x0F	; 15
    2000:	08 f4       	brcc	.+2      	; 0x2004 <LCD_voidDisplayLoop+0x21a>
    2002:	03 cf       	rjmp	.-506    	; 0x1e0a <LCD_voidDisplayLoop+0x20>

		LCD_voidSendCommand(DISPLAY_CLEAR);
		_delay_ms(2);

	}
}
    2004:	a1 96       	adiw	r28, 0x21	; 33
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <LCD_voidWriteNumber>:

/******************************************************************************
* Description 	: LCD Number on lcd Function                                  *
******************************************************************************/

void LCD_voidWriteNumber(uint16 Copy_u16Number){
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	27 97       	sbiw	r28, 0x07	; 7
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	cd bf       	out	0x3d, r28	; 61
    202a:	9f 83       	std	Y+7, r25	; 0x07
    202c:	8e 83       	std	Y+6, r24	; 0x06

	uint8 Local_u8Counter = 0, Local_u8Digits = 0, Local_u8Current;
    202e:	1d 82       	std	Y+5, r1	; 0x05
    2030:	1c 82       	std	Y+4, r1	; 0x04
	uint16 Local_u16CopyNumber = Copy_u16Number;
    2032:	8e 81       	ldd	r24, Y+6	; 0x06
    2034:	9f 81       	ldd	r25, Y+7	; 0x07
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01

	if(0 == Copy_u16Number){
    203a:	8e 81       	ldd	r24, Y+6	; 0x06
    203c:	9f 81       	ldd	r25, Y+7	; 0x07
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	89 f4       	brne	.+34     	; 0x2064 <LCD_voidWriteNumber+0x4e>

		LCD_voidWriteData('0');
    2042:	80 e3       	ldi	r24, 0x30	; 48
    2044:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_voidWriteData>
    2048:	48 c0       	rjmp	.+144    	; 0x20da <LCD_voidWriteNumber+0xc4>

	else{

		while(Local_u16CopyNumber){

			Local_u16CopyNumber /= 10;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	2a e0       	ldi	r18, 0x0A	; 10
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	b9 01       	movw	r22, r18
    2054:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    2058:	cb 01       	movw	r24, r22
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01
			Local_u8Digits++;
    205e:	8c 81       	ldd	r24, Y+4	; 0x04
    2060:	8f 5f       	subi	r24, 0xFF	; 255
    2062:	8c 83       	std	Y+4, r24	; 0x04
		LCD_voidWriteData('0');
	}

	else{

		while(Local_u16CopyNumber){
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	79 f7       	brne	.-34     	; 0x204a <LCD_voidWriteNumber+0x34>

			Local_u16CopyNumber /= 10;
			Local_u8Digits++;
		}
		Local_u16CopyNumber = Copy_u16Number;
    206c:	8e 81       	ldd	r24, Y+6	; 0x06
    206e:	9f 81       	ldd	r25, Y+7	; 0x07
    2070:	9a 83       	std	Y+2, r25	; 0x02
    2072:	89 83       	std	Y+1, r24	; 0x01

		for(Local_u8Counter = 0; Local_u8Counter < Local_u8Digits; Local_u8Counter++){
    2074:	1d 82       	std	Y+5, r1	; 0x05
    2076:	2d c0       	rjmp	.+90     	; 0x20d2 <LCD_voidWriteNumber+0xbc>

			Local_u8Current = Local_u16CopyNumber / (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	29 2f       	mov	r18, r25
    207e:	28 1b       	sub	r18, r24
    2080:	82 2f       	mov	r24, r18
    2082:	98 2f       	mov	r25, r24
    2084:	91 50       	subi	r25, 0x01	; 1
    2086:	8a e0       	ldi	r24, 0x0A	; 10
    2088:	69 2f       	mov	r22, r25
    208a:	0e 94 24 11 	call	0x2248	; 0x2248 <Private_u16GetPower>
    208e:	9c 01       	movw	r18, r24
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	b9 01       	movw	r22, r18
    2096:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    209a:	cb 01       	movw	r24, r22
    209c:	8b 83       	std	Y+3, r24	; 0x03
			LCD_voidWriteData(Local_u8Current + '0');
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	80 5d       	subi	r24, 0xD0	; 208
    20a2:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_voidWriteData>
			Local_u16CopyNumber %= (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
    20a6:	9c 81       	ldd	r25, Y+4	; 0x04
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	29 2f       	mov	r18, r25
    20ac:	28 1b       	sub	r18, r24
    20ae:	82 2f       	mov	r24, r18
    20b0:	98 2f       	mov	r25, r24
    20b2:	91 50       	subi	r25, 0x01	; 1
    20b4:	8a e0       	ldi	r24, 0x0A	; 10
    20b6:	69 2f       	mov	r22, r25
    20b8:	0e 94 24 11 	call	0x2248	; 0x2248 <Private_u16GetPower>
    20bc:	9c 01       	movw	r18, r24
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	b9 01       	movw	r22, r18
    20c4:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    20c8:	9a 83       	std	Y+2, r25	; 0x02
    20ca:	89 83       	std	Y+1, r24	; 0x01
			Local_u16CopyNumber /= 10;
			Local_u8Digits++;
		}
		Local_u16CopyNumber = Copy_u16Number;

		for(Local_u8Counter = 0; Local_u8Counter < Local_u8Digits; Local_u8Counter++){
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	8f 5f       	subi	r24, 0xFF	; 255
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	9d 81       	ldd	r25, Y+5	; 0x05
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	98 17       	cp	r25, r24
    20d8:	78 f2       	brcs	.-98     	; 0x2078 <LCD_voidWriteNumber+0x62>
			Local_u8Current = Local_u16CopyNumber / (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
			LCD_voidWriteData(Local_u8Current + '0');
			Local_u16CopyNumber %= (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
		}
	}
}
    20da:	27 96       	adiw	r28, 0x07	; 7
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <LCD_voidWriteExtraChar>:

/******************************************************************************
* Description 	: LCD Writr Char (CGRAM) Function                             *
******************************************************************************/

void LCD_voidWriteExtraChar(uint8 Copy_u8Row, uint8 Copy_u8Col){
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	62 97       	sbiw	r28, 0x12	; 18
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	89 8b       	std	Y+17, r24	; 0x11
    2102:	6a 8b       	std	Y+18, r22	; 0x12

	uint8 Local_u8Iteration1, Local_u8Iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCommand(64);
    2104:	80 e4       	ldi	r24, 0x40	; 64
    2106:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_voidSendCommand>

	for(Local_u8Iteration1 = 0 ; Local_u8Iteration1 < 64; Local_u8Iteration1++){
    210a:	18 8a       	std	Y+16, r1	; 0x10
    210c:	0c c0       	rjmp	.+24     	; 0x2126 <LCD_voidWriteExtraChar+0x3a>

		LCD_voidWriteData(ExtraChar[Local_u8Iteration1]);
    210e:	88 89       	ldd	r24, Y+16	; 0x10
    2110:	88 2f       	mov	r24, r24
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	fc 01       	movw	r30, r24
    2116:	ee 57       	subi	r30, 0x7E	; 126
    2118:	fe 4f       	sbci	r31, 0xFE	; 254
    211a:	80 81       	ld	r24, Z
    211c:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_voidWriteData>
	uint8 Local_u8Iteration1, Local_u8Iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCommand(64);

	for(Local_u8Iteration1 = 0 ; Local_u8Iteration1 < 64; Local_u8Iteration1++){
    2120:	88 89       	ldd	r24, Y+16	; 0x10
    2122:	8f 5f       	subi	r24, 0xFF	; 255
    2124:	88 8b       	std	Y+16, r24	; 0x10
    2126:	88 89       	ldd	r24, Y+16	; 0x10
    2128:	80 34       	cpi	r24, 0x40	; 64
    212a:	88 f3       	brcs	.-30     	; 0x210e <LCD_voidWriteExtraChar+0x22>

		LCD_voidWriteData(ExtraChar[Local_u8Iteration1]);
	}

	/*CGRAM-->DDRAM*/
	LCD_voidSendCommand(128);
    212c:	80 e8       	ldi	r24, 0x80	; 128
    212e:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_voidSendCommand>
	LCD_voidSetPosition(Copy_u8Row, Copy_u8Col);
    2132:	89 89       	ldd	r24, Y+17	; 0x11
    2134:	6a 89       	ldd	r22, Y+18	; 0x12
    2136:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidSetPosition>

	/*First eight character which saved at CGRAM*/
	for (Local_u8Iteration2 = 0; Local_u8Iteration2 <= 7; Local_u8Iteration2++){
    213a:	1f 86       	std	Y+15, r1	; 0x0f
    213c:	78 c0       	rjmp	.+240    	; 0x222e <LCD_voidWriteExtraChar+0x142>

		/* Write bytes of DDRAM */
		LCD_voidWriteData(Local_u8Iteration2);
    213e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2140:	0e 94 15 0a 	call	0x142a	; 0x142a <LCD_voidWriteData>
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a0 ea       	ldi	r26, 0xA0	; 160
    214a:	b0 e4       	ldi	r27, 0x40	; 64
    214c:	8b 87       	std	Y+11, r24	; 0x0b
    214e:	9c 87       	std	Y+12, r25	; 0x0c
    2150:	ad 87       	std	Y+13, r26	; 0x0d
    2152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2154:	6b 85       	ldd	r22, Y+11	; 0x0b
    2156:	7c 85       	ldd	r23, Y+12	; 0x0c
    2158:	8d 85       	ldd	r24, Y+13	; 0x0d
    215a:	9e 85       	ldd	r25, Y+14	; 0x0e
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a ef       	ldi	r20, 0xFA	; 250
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	8f 83       	std	Y+7, r24	; 0x07
    216e:	98 87       	std	Y+8, r25	; 0x08
    2170:	a9 87       	std	Y+9, r26	; 0x09
    2172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2174:	6f 81       	ldd	r22, Y+7	; 0x07
    2176:	78 85       	ldd	r23, Y+8	; 0x08
    2178:	89 85       	ldd	r24, Y+9	; 0x09
    217a:	9a 85       	ldd	r25, Y+10	; 0x0a
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e8       	ldi	r20, 0x80	; 128
    2182:	5f e3       	ldi	r21, 0x3F	; 63
    2184:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2188:	88 23       	and	r24, r24
    218a:	2c f4       	brge	.+10     	; 0x2196 <LCD_voidWriteExtraChar+0xaa>
		__ticks = 1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	3f c0       	rjmp	.+126    	; 0x2214 <LCD_voidWriteExtraChar+0x128>
	else if (__tmp > 65535)
    2196:	6f 81       	ldd	r22, Y+7	; 0x07
    2198:	78 85       	ldd	r23, Y+8	; 0x08
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21aa:	18 16       	cp	r1, r24
    21ac:	4c f5       	brge	.+82     	; 0x2200 <LCD_voidWriteExtraChar+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <LCD_voidWriteExtraChar+0x10a>
    21d8:	88 ec       	ldi	r24, 0xC8	; 200
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	8b 83       	std	Y+3, r24	; 0x03
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <LCD_voidWriteExtraChar+0xf8>
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	8d 81       	ldd	r24, Y+5	; 0x05
    21ee:	9e 81       	ldd	r25, Y+6	; 0x06
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <LCD_voidWriteExtraChar+0xec>
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <LCD_voidWriteExtraChar+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2200:	6f 81       	ldd	r22, Y+7	; 0x07
    2202:	78 85       	ldd	r23, Y+8	; 0x08
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	9a 85       	ldd	r25, Y+10	; 0x0a
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <LCD_voidWriteExtraChar+0x134>
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	89 83       	std	Y+1, r24	; 0x01
	/*CGRAM-->DDRAM*/
	LCD_voidSendCommand(128);
	LCD_voidSetPosition(Copy_u8Row, Copy_u8Col);

	/*First eight character which saved at CGRAM*/
	for (Local_u8Iteration2 = 0; Local_u8Iteration2 <= 7; Local_u8Iteration2++){
    2228:	8f 85       	ldd	r24, Y+15	; 0x0f
    222a:	8f 5f       	subi	r24, 0xFF	; 255
    222c:	8f 87       	std	Y+15, r24	; 0x0f
    222e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2230:	88 30       	cpi	r24, 0x08	; 8
    2232:	08 f4       	brcc	.+2      	; 0x2236 <LCD_voidWriteExtraChar+0x14a>
    2234:	84 cf       	rjmp	.-248    	; 0x213e <LCD_voidWriteExtraChar+0x52>

		/* Write bytes of DDRAM */
		LCD_voidWriteData(Local_u8Iteration2);
		_delay_ms(5);
	}
}
    2236:	62 96       	adiw	r28, 0x12	; 18
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <Private_u16GetPower>:

/******************************************************************************
* Description 	: Get Power Private Function.					              *
******************************************************************************/

static uint16 Private_u16GetPower(uint8 Copy_u8Number1, uint8 Copy_u8Number2){
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	00 d0       	rcall	.+0      	; 0x224e <Private_u16GetPower+0x6>
    224e:	00 d0       	rcall	.+0      	; 0x2250 <Private_u16GetPower+0x8>
    2250:	0f 92       	push	r0
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	8c 83       	std	Y+4, r24	; 0x04
    2258:	6d 83       	std	Y+5, r22	; 0x05

	uint16 Local_u16Result = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9b 83       	std	Y+3, r25	; 0x03
    2260:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter = 0;
    2262:	19 82       	std	Y+1, r1	; 0x01

	for(Local_u8Counter = 0; Local_u8Counter < Copy_u8Number2; Local_u8Counter++){
    2264:	19 82       	std	Y+1, r1	; 0x01
    2266:	12 c0       	rjmp	.+36     	; 0x228c <Private_u16GetPower+0x44>

		Local_u16Result *= Copy_u8Number1;
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	9b 81       	ldd	r25, Y+3	; 0x03
    2272:	ac 01       	movw	r20, r24
    2274:	42 9f       	mul	r20, r18
    2276:	c0 01       	movw	r24, r0
    2278:	43 9f       	mul	r20, r19
    227a:	90 0d       	add	r25, r0
    227c:	52 9f       	mul	r21, r18
    227e:	90 0d       	add	r25, r0
    2280:	11 24       	eor	r1, r1
    2282:	9b 83       	std	Y+3, r25	; 0x03
    2284:	8a 83       	std	Y+2, r24	; 0x02
static uint16 Private_u16GetPower(uint8 Copy_u8Number1, uint8 Copy_u8Number2){

	uint16 Local_u16Result = 1;
	uint8 Local_u8Counter = 0;

	for(Local_u8Counter = 0; Local_u8Counter < Copy_u8Number2; Local_u8Counter++){
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	8f 5f       	subi	r24, 0xFF	; 255
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	99 81       	ldd	r25, Y+1	; 0x01
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	98 17       	cp	r25, r24
    2292:	50 f3       	brcs	.-44     	; 0x2268 <Private_u16GetPower+0x20>

		Local_u16Result *= Copy_u8Number1;
	}
	return Local_u16Result;
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <TIMER0_voidInit>:
/******************************************************************************
* Description 	: TIMER0 Initialization Function to select timer mode         *
*			      & Prescaler vale.                                           *
******************************************************************************/

void TIMER0_voidInit(Timer0Mode_t Mode, Timer0Scaler_t Prescaler){
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <TIMER0_voidInit+0x6>
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <TIMER0_voidInit+0x8>
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	6a 83       	std	Y+2, r22	; 0x02

	switch(Mode){
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	3c 83       	std	Y+4, r19	; 0x04
    22c0:	2b 83       	std	Y+3, r18	; 0x03
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	91 05       	cpc	r25, r1
    22ca:	21 f1       	breq	.+72     	; 0x2314 <TIMER0_voidInit+0x6c>
    22cc:	2b 81       	ldd	r18, Y+3	; 0x03
    22ce:	3c 81       	ldd	r19, Y+4	; 0x04
    22d0:	22 30       	cpi	r18, 0x02	; 2
    22d2:	31 05       	cpc	r19, r1
    22d4:	2c f4       	brge	.+10     	; 0x22e0 <TIMER0_voidInit+0x38>
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	61 f0       	breq	.+24     	; 0x22f6 <TIMER0_voidInit+0x4e>
    22de:	46 c0       	rjmp	.+140    	; 0x236c <TIMER0_voidInit+0xc4>
    22e0:	2b 81       	ldd	r18, Y+3	; 0x03
    22e2:	3c 81       	ldd	r19, Y+4	; 0x04
    22e4:	22 30       	cpi	r18, 0x02	; 2
    22e6:	31 05       	cpc	r19, r1
    22e8:	21 f1       	breq	.+72     	; 0x2332 <TIMER0_voidInit+0x8a>
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	83 30       	cpi	r24, 0x03	; 3
    22f0:	91 05       	cpc	r25, r1
    22f2:	71 f1       	breq	.+92     	; 0x2350 <TIMER0_voidInit+0xa8>
    22f4:	3b c0       	rjmp	.+118    	; 0x236c <TIMER0_voidInit+0xc4>
	
		case TIMER0_NORMAL_MODE :
			/* Select Normal mode or overflow mode */
			CLR_BIT(TCCR0, WGM01);	CLR_BIT(TCCR0, WGM00);
    22f6:	a3 e5       	ldi	r26, 0x53	; 83
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e3 e5       	ldi	r30, 0x53	; 83
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	87 7f       	andi	r24, 0xF7	; 247
    2302:	8c 93       	st	X, r24
    2304:	a3 e5       	ldi	r26, 0x53	; 83
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e3 e5       	ldi	r30, 0x53	; 83
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	8f 7b       	andi	r24, 0xBF	; 191
    2310:	8c 93       	st	X, r24
    2312:	2c c0       	rjmp	.+88     	; 0x236c <TIMER0_voidInit+0xc4>
		break;	
		
		case TIMER0_PHASE_CORRECT_MODE :
			/* Select mode */
			SET_BIT(TCCR0, WGM00);	CLR_BIT(TCCR0, WGM01);
    2314:	a3 e5       	ldi	r26, 0x53	; 83
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e3 e5       	ldi	r30, 0x53	; 83
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	80 64       	ori	r24, 0x40	; 64
    2320:	8c 93       	st	X, r24
    2322:	a3 e5       	ldi	r26, 0x53	; 83
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e3 e5       	ldi	r30, 0x53	; 83
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	87 7f       	andi	r24, 0xF7	; 247
    232e:	8c 93       	st	X, r24
    2330:	1d c0       	rjmp	.+58     	; 0x236c <TIMER0_voidInit+0xc4>
		break;	
		
		case TIMER0_CTC_MODE :
			/* Select CTC mode  */
			CLR_BIT(TCCR0, WGM00);	SET_BIT(TCCR0, WGM01);
    2332:	a3 e5       	ldi	r26, 0x53	; 83
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e3 e5       	ldi	r30, 0x53	; 83
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	8f 7b       	andi	r24, 0xBF	; 191
    233e:	8c 93       	st	X, r24
    2340:	a3 e5       	ldi	r26, 0x53	; 83
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e3 e5       	ldi	r30, 0x53	; 83
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	88 60       	ori	r24, 0x08	; 8
    234c:	8c 93       	st	X, r24
    234e:	0e c0       	rjmp	.+28     	; 0x236c <TIMER0_voidInit+0xc4>
		break;
		
		case TIMER0_FAST_PWM_MODE :
			/* Select PWM, Fast mode */
			SET_BIT(TCCR0, WGM00);	SET_BIT(TCCR0, WGM01);
    2350:	a3 e5       	ldi	r26, 0x53	; 83
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e3 e5       	ldi	r30, 0x53	; 83
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	80 64       	ori	r24, 0x40	; 64
    235c:	8c 93       	st	X, r24
    235e:	a3 e5       	ldi	r26, 0x53	; 83
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e3 e5       	ldi	r30, 0x53	; 83
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	88 60       	ori	r24, 0x08	; 8
    236a:	8c 93       	st	X, r24
		
		default:   break;
	}
	
	/* Prescaler mask */
	TCCR0 &= PRESCALER_MASK;
    236c:	a3 e5       	ldi	r26, 0x53	; 83
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e3 e5       	ldi	r30, 0x53	; 83
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	88 7f       	andi	r24, 0xF8	; 248
    2378:	8c 93       	st	X, r24
	
	/* Set prescaler value */
	TCCR0 |= Prescaler;
    237a:	a3 e5       	ldi	r26, 0x53	; 83
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e3 e5       	ldi	r30, 0x53	; 83
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	90 81       	ld	r25, Z
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	89 2b       	or	r24, r25
    2388:	8c 93       	st	X, r24

}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <TIMER0_voidOutputCompareInit>:
/******************************************************************************
* Description 	: TIMER0 Output Compare initialization Function to            *
*                 Select Output Compare Mode.                                 *
******************************************************************************/

void TIMER0_voidOutputCompareInit(Timer0_OutputCompareMode_t OC0Mode){
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	00 d0       	rcall	.+0      	; 0x239e <TIMER0_voidOutputCompareInit+0x6>
    239e:	0f 92       	push	r0
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	89 83       	std	Y+1, r24	; 0x01

	switch(OC0Mode){
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	3b 83       	std	Y+3, r19	; 0x03
    23ae:	2a 83       	std	Y+2, r18	; 0x02
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	9b 81       	ldd	r25, Y+3	; 0x03
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	91 05       	cpc	r25, r1
    23b8:	21 f1       	breq	.+72     	; 0x2402 <TIMER0_voidOutputCompareInit+0x6a>
    23ba:	2a 81       	ldd	r18, Y+2	; 0x02
    23bc:	3b 81       	ldd	r19, Y+3	; 0x03
    23be:	22 30       	cpi	r18, 0x02	; 2
    23c0:	31 05       	cpc	r19, r1
    23c2:	2c f4       	brge	.+10     	; 0x23ce <TIMER0_voidOutputCompareInit+0x36>
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	9b 81       	ldd	r25, Y+3	; 0x03
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	61 f0       	breq	.+24     	; 0x23e4 <TIMER0_voidOutputCompareInit+0x4c>
    23cc:	46 c0       	rjmp	.+140    	; 0x245a <TIMER0_voidOutputCompareInit+0xc2>
    23ce:	2a 81       	ldd	r18, Y+2	; 0x02
    23d0:	3b 81       	ldd	r19, Y+3	; 0x03
    23d2:	22 30       	cpi	r18, 0x02	; 2
    23d4:	31 05       	cpc	r19, r1
    23d6:	21 f1       	breq	.+72     	; 0x2420 <TIMER0_voidOutputCompareInit+0x88>
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	9b 81       	ldd	r25, Y+3	; 0x03
    23dc:	83 30       	cpi	r24, 0x03	; 3
    23de:	91 05       	cpc	r25, r1
    23e0:	71 f1       	breq	.+92     	; 0x243e <TIMER0_voidOutputCompareInit+0xa6>
    23e2:	3b c0       	rjmp	.+118    	; 0x245a <TIMER0_voidOutputCompareInit+0xc2>

		case TIMER0_OC0_DISCONNECTED_MODE :
			// OC0 disconnected
			CLR_BIT(TCCR0, COM00);	CLR_BIT(TCCR0, COM01);
    23e4:	a3 e5       	ldi	r26, 0x53	; 83
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e3 e5       	ldi	r30, 0x53	; 83
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	8f 7e       	andi	r24, 0xEF	; 239
    23f0:	8c 93       	st	X, r24
    23f2:	a3 e5       	ldi	r26, 0x53	; 83
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e3 e5       	ldi	r30, 0x53	; 83
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	8f 7d       	andi	r24, 0xDF	; 223
    23fe:	8c 93       	st	X, r24
    2400:	2c c0       	rjmp	.+88     	; 0x245a <TIMER0_voidOutputCompareInit+0xc2>
		break;

		case TIMER0_OC0_TOGGLE_MODE :
			// Toggle OC0 on compare match
			SET_BIT(TCCR0, COM00);	CLR_BIT(TCCR0, COM01);
    2402:	a3 e5       	ldi	r26, 0x53	; 83
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e3 e5       	ldi	r30, 0x53	; 83
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	80 61       	ori	r24, 0x10	; 16
    240e:	8c 93       	st	X, r24
    2410:	a3 e5       	ldi	r26, 0x53	; 83
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e3 e5       	ldi	r30, 0x53	; 83
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	8f 7d       	andi	r24, 0xDF	; 223
    241c:	8c 93       	st	X, r24
    241e:	1d c0       	rjmp	.+58     	; 0x245a <TIMER0_voidOutputCompareInit+0xc2>
		break;

		case TIMER0_OC0_NON_INVERTING_MODE :
			// Non inverting OC0
			CLR_BIT(TCCR0, COM00);	SET_BIT(TCCR0, COM01);
    2420:	a3 e5       	ldi	r26, 0x53	; 83
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e3 e5       	ldi	r30, 0x53	; 83
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	8f 7e       	andi	r24, 0xEF	; 239
    242c:	8c 93       	st	X, r24
    242e:	a3 e5       	ldi	r26, 0x53	; 83
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e3 e5       	ldi	r30, 0x53	; 83
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	80 62       	ori	r24, 0x20	; 32
    243a:	8c 93       	st	X, r24
    243c:	0e c0       	rjmp	.+28     	; 0x245a <TIMER0_voidOutputCompareInit+0xc2>
		break;

		case TIMER0_OC0_INVERTING_MODE :
			// inverting OC0
			SET_BIT(TCCR0, COM00);	SET_BIT(TCCR0, COM01);
    243e:	a3 e5       	ldi	r26, 0x53	; 83
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e3 e5       	ldi	r30, 0x53	; 83
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	80 61       	ori	r24, 0x10	; 16
    244a:	8c 93       	st	X, r24
    244c:	a3 e5       	ldi	r26, 0x53	; 83
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e3 e5       	ldi	r30, 0x53	; 83
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	80 62       	ori	r24, 0x20	; 32
    2458:	8c 93       	st	X, r24
		break;

		default:   break;
	}
}
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <TIMER0_voidSetTimerCounterValue>:

/******************************************************************************
* Description 	: TIMER0 Set Timer Counter Value Function.				      *
******************************************************************************/

void TIMER0_voidSetTimerCounterValue(uint8 Copy_u8TimerValue){
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	0f 92       	push	r0
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = Copy_u8TimerValue;
    2472:	e2 e5       	ldi	r30, 0x52	; 82
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	80 83       	st	Z, r24
}
    247a:	0f 90       	pop	r0
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <TIMER0_u8GetTimerCounterValue>:

/******************************************************************************
* Description 	: TIMER0 Get Timer Counter Value Function.				      *
******************************************************************************/

uint8 TIMER0_u8GetTimerCounterValue(void){
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62

	return TCNT0;
    248a:	e2 e5       	ldi	r30, 0x52	; 82
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
}
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <TIMER0_voidSetOutputCompareValue>:

/******************************************************************************
* Description 	: TIMER0 Set Output Compare Register Value.				      *
******************************************************************************/

void TIMER0_voidSetOutputCompareValue(uint8 Copy_u8CompareValue){
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	0f 92       	push	r0
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_u8CompareValue;
    24a2:	ec e5       	ldi	r30, 0x5C	; 92
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	80 83       	st	Z, r24
}
    24aa:	0f 90       	pop	r0
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <TIMER0_voidUpdateDutyCycle>:
/******************************************************************************
* Description 	: TIMER0 Update Duty Cycle Value Function                     *
* 			      and put it in the OCR0 register.                            *
******************************************************************************/

void TIMER0_voidUpdateDutyCycle(uint8 Copy_u8DutyCycle){
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <TIMER0_voidUpdateDutyCycle+0x6>
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_u8DutyCycle <= 100){
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	85 36       	cpi	r24, 0x65	; 101
    24c2:	20 f5       	brcc	.+72     	; 0x250c <TIMER0_voidUpdateDutyCycle+0x5a>

		uint8 Local_u8TimeON = ((uint16)Copy_u8DutyCycle * (TIMER0_MAX_COUNT)) / 100;
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	48 2f       	mov	r20, r24
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	ca 01       	movw	r24, r20
    24cc:	9c 01       	movw	r18, r24
    24ce:	22 0f       	add	r18, r18
    24d0:	33 1f       	adc	r19, r19
    24d2:	c9 01       	movw	r24, r18
    24d4:	96 95       	lsr	r25
    24d6:	98 2f       	mov	r25, r24
    24d8:	88 27       	eor	r24, r24
    24da:	97 95       	ror	r25
    24dc:	87 95       	ror	r24
    24de:	82 1b       	sub	r24, r18
    24e0:	93 0b       	sbc	r25, r19
    24e2:	84 0f       	add	r24, r20
    24e4:	95 1f       	adc	r25, r21
    24e6:	24 e6       	ldi	r18, 0x64	; 100
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	b9 01       	movw	r22, r18
    24ec:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    24f0:	cb 01       	movw	r24, r22
    24f2:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u8TimeON > 1){
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	82 30       	cpi	r24, 0x02	; 2
    24f8:	30 f0       	brcs	.+12     	; 0x2506 <TIMER0_voidUpdateDutyCycle+0x54>

			OCR0 = Local_u8TimeON-1;
    24fa:	ec e5       	ldi	r30, 0x5C	; 92
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	81 50       	subi	r24, 0x01	; 1
    2502:	80 83       	st	Z, r24
    2504:	03 c0       	rjmp	.+6      	; 0x250c <TIMER0_voidUpdateDutyCycle+0x5a>
		}
		else{  OCR0 = 0;  }
    2506:	ec e5       	ldi	r30, 0x5C	; 92
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	10 82       	st	Z, r1
	}
	else{ /* return error */}

}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <TIMER0_voidOverflowInterruptEnable>:

/******************************************************************************
* Description 	: TIMER0 Overflow Interrupt Enable Function.		          *
******************************************************************************/

void TIMER0_voidOverflowInterruptEnable(void){
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
	
	/* Enable overflow mode interrupt */
	SET_BIT(TIMSK, TOIE0);
    251e:	a9 e5       	ldi	r26, 0x59	; 89
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e9 e5       	ldi	r30, 0x59	; 89
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	81 60       	ori	r24, 0x01	; 1
    252a:	8c 93       	st	X, r24
}
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <TIMER0_voidOverflowInterruptDisable>:

/******************************************************************************
* Description 	: TIMER0 Overflow Interrupt Disable Function.				  *
******************************************************************************/

void TIMER0_voidOverflowInterruptDisable(void){
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
	
	/* Disable overflow mode interrupt */
	CLR_BIT(TIMSK, TOIE0);
    253a:	a9 e5       	ldi	r26, 0x59	; 89
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e9 e5       	ldi	r30, 0x59	; 89
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	8e 7f       	andi	r24, 0xFE	; 254
    2546:	8c 93       	st	X, r24
}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <TIMER0_voidCompareMatchnterruptEnable>:

/******************************************************************************
* Description 	: TIMER0 Output Compare Interrupt Enable Function.			  *
******************************************************************************/

void TIMER0_voidCompareMatchnterruptEnable(void){
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
	
	/* Output Compare Match interrupt Enable */
	SET_BIT(TIMSK, OCIE0);
    2556:	a9 e5       	ldi	r26, 0x59	; 89
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e9 e5       	ldi	r30, 0x59	; 89
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	82 60       	ori	r24, 0x02	; 2
    2562:	8c 93       	st	X, r24
}
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <TIMER0_voidCompareMatchInterruptDisable>:

/******************************************************************************
* Description 	: TIMER0 Output Compare Interrupt Disable Function.			  *
******************************************************************************/

void TIMER0_voidCompareMatchInterruptDisable(void){
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
	
	/* Output Compare Match interrupt Disable */
	CLR_BIT(TIMSK, OCIE0);
    2572:	a9 e5       	ldi	r26, 0x59	; 89
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e9 e5       	ldi	r30, 0x59	; 89
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	8d 7f       	andi	r24, 0xFD	; 253
    257e:	8c 93       	st	X, r24
}
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <TIMER0_voidOverflowSetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER0 OVF) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER0_voidOverflowSetCallBack(void(*Local_Fptr)(void)){
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	00 d0       	rcall	.+0      	; 0x258c <TIMER0_voidOverflowSetCallBack+0x6>
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_OverflowCallBack = Local_Fptr;
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	90 93 c3 01 	sts	0x01C3, r25
    259c:	80 93 c2 01 	sts	0x01C2, r24

}
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <TIMER0_voidCompareMatchSetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER0 OC0) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER0_voidCompareMatchSetCallBack(void(*Local_Fptr)(void)){
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <TIMER0_voidCompareMatchSetCallBack+0x6>
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_CompareMatchCallBack = Local_Fptr;
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	90 93 c5 01 	sts	0x01C5, r25
    25c0:	80 93 c4 01 	sts	0x01C4, r24

}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <__vector_10>:

/******************************************************************************
* !comment  :  ISR Function output compare interrupt.  						  *
******************************************************************************/

ISR( TIMER0_OC0 ){
    25ce:	1f 92       	push	r1
    25d0:	0f 92       	push	r0
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	0f 92       	push	r0
    25d6:	11 24       	eor	r1, r1
    25d8:	2f 93       	push	r18
    25da:	3f 93       	push	r19
    25dc:	4f 93       	push	r20
    25de:	5f 93       	push	r21
    25e0:	6f 93       	push	r22
    25e2:	7f 93       	push	r23
    25e4:	8f 93       	push	r24
    25e6:	9f 93       	push	r25
    25e8:	af 93       	push	r26
    25ea:	bf 93       	push	r27
    25ec:	ef 93       	push	r30
    25ee:	ff 93       	push	r31
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER0_CompareMatchCallBack){
    25f8:	80 91 c4 01 	lds	r24, 0x01C4
    25fc:	90 91 c5 01 	lds	r25, 0x01C5
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	29 f0       	breq	.+10     	; 0x260e <__vector_10+0x40>

		TIMER0_CompareMatchCallBack();
    2604:	e0 91 c4 01 	lds	r30, 0x01C4
    2608:	f0 91 c5 01 	lds	r31, 0x01C5
    260c:	09 95       	icall
	}
	else{ /* Return error */ }
}
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	ff 91       	pop	r31
    2614:	ef 91       	pop	r30
    2616:	bf 91       	pop	r27
    2618:	af 91       	pop	r26
    261a:	9f 91       	pop	r25
    261c:	8f 91       	pop	r24
    261e:	7f 91       	pop	r23
    2620:	6f 91       	pop	r22
    2622:	5f 91       	pop	r21
    2624:	4f 91       	pop	r20
    2626:	3f 91       	pop	r19
    2628:	2f 91       	pop	r18
    262a:	0f 90       	pop	r0
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	0f 90       	pop	r0
    2630:	1f 90       	pop	r1
    2632:	18 95       	reti

00002634 <__vector_11>:

/******************************************************************************
* !comment  :  ISR Function overflow interrupt.  						      *
******************************************************************************/

ISR( TIMER0_OVF ){
    2634:	1f 92       	push	r1
    2636:	0f 92       	push	r0
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	0f 92       	push	r0
    263c:	11 24       	eor	r1, r1
    263e:	2f 93       	push	r18
    2640:	3f 93       	push	r19
    2642:	4f 93       	push	r20
    2644:	5f 93       	push	r21
    2646:	6f 93       	push	r22
    2648:	7f 93       	push	r23
    264a:	8f 93       	push	r24
    264c:	9f 93       	push	r25
    264e:	af 93       	push	r26
    2650:	bf 93       	push	r27
    2652:	ef 93       	push	r30
    2654:	ff 93       	push	r31
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER0_OverflowCallBack){
    265e:	80 91 c2 01 	lds	r24, 0x01C2
    2662:	90 91 c3 01 	lds	r25, 0x01C3
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	29 f0       	breq	.+10     	; 0x2674 <__vector_11+0x40>

		TIMER0_OverflowCallBack();
    266a:	e0 91 c2 01 	lds	r30, 0x01C2
    266e:	f0 91 c3 01 	lds	r31, 0x01C3
    2672:	09 95       	icall
	}
	else{ /* Return error */ }
}
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	ff 91       	pop	r31
    267a:	ef 91       	pop	r30
    267c:	bf 91       	pop	r27
    267e:	af 91       	pop	r26
    2680:	9f 91       	pop	r25
    2682:	8f 91       	pop	r24
    2684:	7f 91       	pop	r23
    2686:	6f 91       	pop	r22
    2688:	5f 91       	pop	r21
    268a:	4f 91       	pop	r20
    268c:	3f 91       	pop	r19
    268e:	2f 91       	pop	r18
    2690:	0f 90       	pop	r0
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	0f 90       	pop	r0
    2696:	1f 90       	pop	r1
    2698:	18 95       	reti

0000269a <TIMER1_voidInit>:
/******************************************************************************
* Description 	: TIMER1 Initialization Function to select timer mode         *
*			      & Prescaler vale.                                           *
******************************************************************************/

void TIMER1_voidInit(Timer1_Mode_t Mode, Timer1_Scaler_t Prescaler){
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <TIMER1_voidInit+0x6>
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <TIMER1_voidInit+0x8>
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	6a 83       	std	Y+2, r22	; 0x02

	switch(Mode){
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	28 2f       	mov	r18, r24
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	3c 83       	std	Y+4, r19	; 0x04
    26b2:	2b 83       	std	Y+3, r18	; 0x03
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
    26b8:	87 30       	cpi	r24, 0x07	; 7
    26ba:	91 05       	cpc	r25, r1
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <TIMER1_voidInit+0x26>
    26be:	24 c1       	rjmp	.+584    	; 0x2908 <TIMER1_voidInit+0x26e>
    26c0:	2b 81       	ldd	r18, Y+3	; 0x03
    26c2:	3c 81       	ldd	r19, Y+4	; 0x04
    26c4:	28 30       	cpi	r18, 0x08	; 8
    26c6:	31 05       	cpc	r19, r1
    26c8:	4c f5       	brge	.+82     	; 0x271c <TIMER1_voidInit+0x82>
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	9c 81       	ldd	r25, Y+4	; 0x04
    26ce:	83 30       	cpi	r24, 0x03	; 3
    26d0:	91 05       	cpc	r25, r1
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <TIMER1_voidInit+0x3c>
    26d4:	a5 c0       	rjmp	.+330    	; 0x2820 <TIMER1_voidInit+0x186>
    26d6:	2b 81       	ldd	r18, Y+3	; 0x03
    26d8:	3c 81       	ldd	r19, Y+4	; 0x04
    26da:	24 30       	cpi	r18, 0x04	; 4
    26dc:	31 05       	cpc	r19, r1
    26de:	8c f4       	brge	.+34     	; 0x2702 <TIMER1_voidInit+0x68>
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	9c 81       	ldd	r25, Y+4	; 0x04
    26e4:	81 30       	cpi	r24, 0x01	; 1
    26e6:	91 05       	cpc	r25, r1
    26e8:	09 f4       	brne	.+2      	; 0x26ec <TIMER1_voidInit+0x52>
    26ea:	60 c0       	rjmp	.+192    	; 0x27ac <TIMER1_voidInit+0x112>
    26ec:	2b 81       	ldd	r18, Y+3	; 0x03
    26ee:	3c 81       	ldd	r19, Y+4	; 0x04
    26f0:	22 30       	cpi	r18, 0x02	; 2
    26f2:	31 05       	cpc	r19, r1
    26f4:	0c f0       	brlt	.+2      	; 0x26f8 <TIMER1_voidInit+0x5e>
    26f6:	77 c0       	rjmp	.+238    	; 0x27e6 <TIMER1_voidInit+0x14c>
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	9c 81       	ldd	r25, Y+4	; 0x04
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	c9 f1       	breq	.+114    	; 0x2772 <TIMER1_voidInit+0xd8>
    2700:	ea c1       	rjmp	.+980    	; 0x2ad6 <TIMER1_voidInit+0x43c>
    2702:	2b 81       	ldd	r18, Y+3	; 0x03
    2704:	3c 81       	ldd	r19, Y+4	; 0x04
    2706:	25 30       	cpi	r18, 0x05	; 5
    2708:	31 05       	cpc	r19, r1
    270a:	09 f4       	brne	.+2      	; 0x270e <TIMER1_voidInit+0x74>
    270c:	c3 c0       	rjmp	.+390    	; 0x2894 <TIMER1_voidInit+0x1fa>
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	9c 81       	ldd	r25, Y+4	; 0x04
    2712:	86 30       	cpi	r24, 0x06	; 6
    2714:	91 05       	cpc	r25, r1
    2716:	0c f0       	brlt	.+2      	; 0x271a <TIMER1_voidInit+0x80>
    2718:	da c0       	rjmp	.+436    	; 0x28ce <TIMER1_voidInit+0x234>
    271a:	9f c0       	rjmp	.+318    	; 0x285a <TIMER1_voidInit+0x1c0>
    271c:	2b 81       	ldd	r18, Y+3	; 0x03
    271e:	3c 81       	ldd	r19, Y+4	; 0x04
    2720:	2b 30       	cpi	r18, 0x0B	; 11
    2722:	31 05       	cpc	r19, r1
    2724:	09 f4       	brne	.+2      	; 0x2728 <TIMER1_voidInit+0x8e>
    2726:	64 c1       	rjmp	.+712    	; 0x29f0 <TIMER1_voidInit+0x356>
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	9c 81       	ldd	r25, Y+4	; 0x04
    272c:	8c 30       	cpi	r24, 0x0C	; 12
    272e:	91 05       	cpc	r25, r1
    2730:	6c f4       	brge	.+26     	; 0x274c <TIMER1_voidInit+0xb2>
    2732:	2b 81       	ldd	r18, Y+3	; 0x03
    2734:	3c 81       	ldd	r19, Y+4	; 0x04
    2736:	29 30       	cpi	r18, 0x09	; 9
    2738:	31 05       	cpc	r19, r1
    273a:	09 f4       	brne	.+2      	; 0x273e <TIMER1_voidInit+0xa4>
    273c:	1f c1       	rjmp	.+574    	; 0x297c <TIMER1_voidInit+0x2e2>
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	9c 81       	ldd	r25, Y+4	; 0x04
    2742:	8a 30       	cpi	r24, 0x0A	; 10
    2744:	91 05       	cpc	r25, r1
    2746:	0c f0       	brlt	.+2      	; 0x274a <TIMER1_voidInit+0xb0>
    2748:	36 c1       	rjmp	.+620    	; 0x29b6 <TIMER1_voidInit+0x31c>
    274a:	fb c0       	rjmp	.+502    	; 0x2942 <TIMER1_voidInit+0x2a8>
    274c:	2b 81       	ldd	r18, Y+3	; 0x03
    274e:	3c 81       	ldd	r19, Y+4	; 0x04
    2750:	2d 30       	cpi	r18, 0x0D	; 13
    2752:	31 05       	cpc	r19, r1
    2754:	09 f4       	brne	.+2      	; 0x2758 <TIMER1_voidInit+0xbe>
    2756:	86 c1       	rjmp	.+780    	; 0x2a64 <TIMER1_voidInit+0x3ca>
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	8d 30       	cpi	r24, 0x0D	; 13
    275e:	91 05       	cpc	r25, r1
    2760:	0c f4       	brge	.+2      	; 0x2764 <TIMER1_voidInit+0xca>
    2762:	63 c1       	rjmp	.+710    	; 0x2a2a <TIMER1_voidInit+0x390>
    2764:	2b 81       	ldd	r18, Y+3	; 0x03
    2766:	3c 81       	ldd	r19, Y+4	; 0x04
    2768:	2e 30       	cpi	r18, 0x0E	; 14
    276a:	31 05       	cpc	r19, r1
    276c:	09 f4       	brne	.+2      	; 0x2770 <TIMER1_voidInit+0xd6>
    276e:	97 c1       	rjmp	.+814    	; 0x2a9e <TIMER1_voidInit+0x404>
    2770:	b2 c1       	rjmp	.+868    	; 0x2ad6 <TIMER1_voidInit+0x43c>

		case TIMER1_NORMAL_MODE:
			/* Timer1 Mode Normal or Overflow */
			CLR_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    2772:	af e4       	ldi	r26, 0x4F	; 79
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	ef e4       	ldi	r30, 0x4F	; 79
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	8e 7f       	andi	r24, 0xFE	; 254
    277e:	8c 93       	st	X, r24
    2780:	af e4       	ldi	r26, 0x4F	; 79
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	ef e4       	ldi	r30, 0x4F	; 79
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	8d 7f       	andi	r24, 0xFD	; 253
    278c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    278e:	ae e4       	ldi	r26, 0x4E	; 78
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	ee e4       	ldi	r30, 0x4E	; 78
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	87 7f       	andi	r24, 0xF7	; 247
    279a:	8c 93       	st	X, r24
    279c:	ae e4       	ldi	r26, 0x4E	; 78
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	ee e4       	ldi	r30, 0x4E	; 78
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	8f 7e       	andi	r24, 0xEF	; 239
    27a8:	8c 93       	st	X, r24
    27aa:	95 c1       	rjmp	.+810    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PHASE_CORRECT_8BIT_MODE:
			/* Timer1 Mode PWM, Phase Correct, 8-bit */
			SET_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    27ac:	af e4       	ldi	r26, 0x4F	; 79
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	ef e4       	ldi	r30, 0x4F	; 79
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	81 60       	ori	r24, 0x01	; 1
    27b8:	8c 93       	st	X, r24
    27ba:	af e4       	ldi	r26, 0x4F	; 79
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	ef e4       	ldi	r30, 0x4F	; 79
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	8d 7f       	andi	r24, 0xFD	; 253
    27c6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    27c8:	ae e4       	ldi	r26, 0x4E	; 78
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	ee e4       	ldi	r30, 0x4E	; 78
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	87 7f       	andi	r24, 0xF7	; 247
    27d4:	8c 93       	st	X, r24
    27d6:	ae e4       	ldi	r26, 0x4E	; 78
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	ee e4       	ldi	r30, 0x4E	; 78
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	8f 7e       	andi	r24, 0xEF	; 239
    27e2:	8c 93       	st	X, r24
    27e4:	78 c1       	rjmp	.+752    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PHASE_CORRECT_9BIT_MODE:
			/* Timer1 Mode PWM, Phase Correct, 9-bit */
			CLR_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    27e6:	af e4       	ldi	r26, 0x4F	; 79
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	ef e4       	ldi	r30, 0x4F	; 79
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	8e 7f       	andi	r24, 0xFE	; 254
    27f2:	8c 93       	st	X, r24
    27f4:	af e4       	ldi	r26, 0x4F	; 79
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	ef e4       	ldi	r30, 0x4F	; 79
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	82 60       	ori	r24, 0x02	; 2
    2800:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    2802:	ae e4       	ldi	r26, 0x4E	; 78
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	ee e4       	ldi	r30, 0x4E	; 78
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	87 7f       	andi	r24, 0xF7	; 247
    280e:	8c 93       	st	X, r24
    2810:	ae e4       	ldi	r26, 0x4E	; 78
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	ee e4       	ldi	r30, 0x4E	; 78
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8f 7e       	andi	r24, 0xEF	; 239
    281c:	8c 93       	st	X, r24
    281e:	5b c1       	rjmp	.+694    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PHASE_CORRECT_10BIT_MODE:
			/* Timer1 Mode PWM, Phase Correct, 10-bit */
			SET_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    2820:	af e4       	ldi	r26, 0x4F	; 79
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	ef e4       	ldi	r30, 0x4F	; 79
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	81 60       	ori	r24, 0x01	; 1
    282c:	8c 93       	st	X, r24
    282e:	af e4       	ldi	r26, 0x4F	; 79
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	ef e4       	ldi	r30, 0x4F	; 79
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	82 60       	ori	r24, 0x02	; 2
    283a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    283c:	ae e4       	ldi	r26, 0x4E	; 78
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	ee e4       	ldi	r30, 0x4E	; 78
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	87 7f       	andi	r24, 0xF7	; 247
    2848:	8c 93       	st	X, r24
    284a:	ae e4       	ldi	r26, 0x4E	; 78
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	ee e4       	ldi	r30, 0x4E	; 78
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	8f 7e       	andi	r24, 0xEF	; 239
    2856:	8c 93       	st	X, r24
    2858:	3e c1       	rjmp	.+636    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_CTC_OCR1A_MODE:
			/* Timer1 Mode CTC Top OCR1A */
			CLR_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    285a:	af e4       	ldi	r26, 0x4F	; 79
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	ef e4       	ldi	r30, 0x4F	; 79
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	8e 7f       	andi	r24, 0xFE	; 254
    2866:	8c 93       	st	X, r24
    2868:	af e4       	ldi	r26, 0x4F	; 79
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	ef e4       	ldi	r30, 0x4F	; 79
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	8d 7f       	andi	r24, 0xFD	; 253
    2874:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    2876:	ae e4       	ldi	r26, 0x4E	; 78
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	ee e4       	ldi	r30, 0x4E	; 78
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	88 60       	ori	r24, 0x08	; 8
    2882:	8c 93       	st	X, r24
    2884:	ae e4       	ldi	r26, 0x4E	; 78
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	ee e4       	ldi	r30, 0x4E	; 78
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	8f 7e       	andi	r24, 0xEF	; 239
    2890:	8c 93       	st	X, r24
    2892:	21 c1       	rjmp	.+578    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_FAST_PWM_8BIT_MODE:
			/* Timer1 Mode Fast PWM, 8-bit */
			SET_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    2894:	af e4       	ldi	r26, 0x4F	; 79
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	ef e4       	ldi	r30, 0x4F	; 79
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	81 60       	ori	r24, 0x01	; 1
    28a0:	8c 93       	st	X, r24
    28a2:	af e4       	ldi	r26, 0x4F	; 79
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	ef e4       	ldi	r30, 0x4F	; 79
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	8d 7f       	andi	r24, 0xFD	; 253
    28ae:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    28b0:	ae e4       	ldi	r26, 0x4E	; 78
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	ee e4       	ldi	r30, 0x4E	; 78
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	88 60       	ori	r24, 0x08	; 8
    28bc:	8c 93       	st	X, r24
    28be:	ae e4       	ldi	r26, 0x4E	; 78
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	ee e4       	ldi	r30, 0x4E	; 78
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	8f 7e       	andi	r24, 0xEF	; 239
    28ca:	8c 93       	st	X, r24
    28cc:	04 c1       	rjmp	.+520    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_FAST_PWM_9BIT_MODE:
			/* Timer1 Mode Fast PWM, 9-bit */
			CLR_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    28ce:	af e4       	ldi	r26, 0x4F	; 79
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	ef e4       	ldi	r30, 0x4F	; 79
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	8e 7f       	andi	r24, 0xFE	; 254
    28da:	8c 93       	st	X, r24
    28dc:	af e4       	ldi	r26, 0x4F	; 79
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	ef e4       	ldi	r30, 0x4F	; 79
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	82 60       	ori	r24, 0x02	; 2
    28e8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    28ea:	ae e4       	ldi	r26, 0x4E	; 78
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	ee e4       	ldi	r30, 0x4E	; 78
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	88 60       	ori	r24, 0x08	; 8
    28f6:	8c 93       	st	X, r24
    28f8:	ae e4       	ldi	r26, 0x4E	; 78
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	ee e4       	ldi	r30, 0x4E	; 78
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	8f 7e       	andi	r24, 0xEF	; 239
    2904:	8c 93       	st	X, r24
    2906:	e7 c0       	rjmp	.+462    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_FAST_PWM_10BIT_MODE:
			/* Timer1 Mode Fast PWM, 10-bit */
			SET_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    2908:	af e4       	ldi	r26, 0x4F	; 79
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	ef e4       	ldi	r30, 0x4F	; 79
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	81 60       	ori	r24, 0x01	; 1
    2914:	8c 93       	st	X, r24
    2916:	af e4       	ldi	r26, 0x4F	; 79
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	ef e4       	ldi	r30, 0x4F	; 79
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	82 60       	ori	r24, 0x02	; 2
    2922:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		CLR_BIT(TCCR1B, WGM13);
    2924:	ae e4       	ldi	r26, 0x4E	; 78
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	ee e4       	ldi	r30, 0x4E	; 78
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	88 60       	ori	r24, 0x08	; 8
    2930:	8c 93       	st	X, r24
    2932:	ae e4       	ldi	r26, 0x4E	; 78
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	ee e4       	ldi	r30, 0x4E	; 78
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	8f 7e       	andi	r24, 0xEF	; 239
    293e:	8c 93       	st	X, r24
    2940:	ca c0       	rjmp	.+404    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PWM_PHASE_FREQ_CORRECT_ICR1_MODE:
			/* Timer1 Mode PWM, Phase and Frequency Correct Top ICR1 */
			CLR_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    2942:	af e4       	ldi	r26, 0x4F	; 79
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	ef e4       	ldi	r30, 0x4F	; 79
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	8e 7f       	andi	r24, 0xFE	; 254
    294e:	8c 93       	st	X, r24
    2950:	af e4       	ldi	r26, 0x4F	; 79
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	ef e4       	ldi	r30, 0x4F	; 79
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	8d 7f       	andi	r24, 0xFD	; 253
    295c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		SET_BIT(TCCR1B, WGM13);
    295e:	ae e4       	ldi	r26, 0x4E	; 78
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	ee e4       	ldi	r30, 0x4E	; 78
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	87 7f       	andi	r24, 0xF7	; 247
    296a:	8c 93       	st	X, r24
    296c:	ae e4       	ldi	r26, 0x4E	; 78
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	ee e4       	ldi	r30, 0x4E	; 78
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	80 61       	ori	r24, 0x10	; 16
    2978:	8c 93       	st	X, r24
    297a:	ad c0       	rjmp	.+346    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PWM_PHASE_FREQ_CORRECT_OCR1A_MODE:
			/* Timer1 Mode PWM, Phase and Frequency Correct Top OCR1A */
			SET_BIT(TCCR1A, WGM10);		CLR_BIT(TCCR1A, WGM11);
    297c:	af e4       	ldi	r26, 0x4F	; 79
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	ef e4       	ldi	r30, 0x4F	; 79
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	81 60       	ori	r24, 0x01	; 1
    2988:	8c 93       	st	X, r24
    298a:	af e4       	ldi	r26, 0x4F	; 79
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	ef e4       	ldi	r30, 0x4F	; 79
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	8d 7f       	andi	r24, 0xFD	; 253
    2996:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		SET_BIT(TCCR1B, WGM13);
    2998:	ae e4       	ldi	r26, 0x4E	; 78
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	ee e4       	ldi	r30, 0x4E	; 78
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	87 7f       	andi	r24, 0xF7	; 247
    29a4:	8c 93       	st	X, r24
    29a6:	ae e4       	ldi	r26, 0x4E	; 78
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	ee e4       	ldi	r30, 0x4E	; 78
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	80 61       	ori	r24, 0x10	; 16
    29b2:	8c 93       	st	X, r24
    29b4:	90 c0       	rjmp	.+288    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PWM_PHASE_CORRECT_ICR1_MODE:
			/* Timer1 Mode PWM, Phase Correct Top ICR1 */
			CLR_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    29b6:	af e4       	ldi	r26, 0x4F	; 79
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	ef e4       	ldi	r30, 0x4F	; 79
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	8e 7f       	andi	r24, 0xFE	; 254
    29c2:	8c 93       	st	X, r24
    29c4:	af e4       	ldi	r26, 0x4F	; 79
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	ef e4       	ldi	r30, 0x4F	; 79
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	82 60       	ori	r24, 0x02	; 2
    29d0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);		SET_BIT(TCCR1B, WGM13);
    29d2:	ae e4       	ldi	r26, 0x4E	; 78
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	ee e4       	ldi	r30, 0x4E	; 78
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	87 7f       	andi	r24, 0xF7	; 247
    29de:	8c 93       	st	X, r24
    29e0:	ae e4       	ldi	r26, 0x4E	; 78
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	ee e4       	ldi	r30, 0x4E	; 78
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	80 61       	ori	r24, 0x10	; 16
    29ec:	8c 93       	st	X, r24
    29ee:	73 c0       	rjmp	.+230    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_PWM_PHASE_CORRECT_OCR1A_MODE:
			/* Timer1 Mode PWM, Phase Correct Top OCR1A */
			SET_BIT(TCCR1A, WGM10);
    29f0:	af e4       	ldi	r26, 0x4F	; 79
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	ef e4       	ldi	r30, 0x4F	; 79
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	81 60       	ori	r24, 0x01	; 1
    29fc:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    29fe:	af e4       	ldi	r26, 0x4F	; 79
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	ef e4       	ldi	r30, 0x4F	; 79
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	82 60       	ori	r24, 0x02	; 2
    2a0a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);
    2a0c:	ae e4       	ldi	r26, 0x4E	; 78
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	ee e4       	ldi	r30, 0x4E	; 78
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	87 7f       	andi	r24, 0xF7	; 247
    2a18:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    2a1a:	ae e4       	ldi	r26, 0x4E	; 78
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	ee e4       	ldi	r30, 0x4E	; 78
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	80 61       	ori	r24, 0x10	; 16
    2a26:	8c 93       	st	X, r24
    2a28:	56 c0       	rjmp	.+172    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_CTC_ICR1_MODE:
			/* Timer1 Mode CTC Top ICR1 */
			CLR_BIT(TCCR1A, WGM10);
    2a2a:	af e4       	ldi	r26, 0x4F	; 79
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	ef e4       	ldi	r30, 0x4F	; 79
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	8e 7f       	andi	r24, 0xFE	; 254
    2a36:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, WGM11);
    2a38:	af e4       	ldi	r26, 0x4F	; 79
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	ef e4       	ldi	r30, 0x4F	; 79
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	8d 7f       	andi	r24, 0xFD	; 253
    2a44:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2a46:	ae e4       	ldi	r26, 0x4E	; 78
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	ee e4       	ldi	r30, 0x4E	; 78
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	88 60       	ori	r24, 0x08	; 8
    2a52:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    2a54:	ae e4       	ldi	r26, 0x4E	; 78
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	ee e4       	ldi	r30, 0x4E	; 78
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	80 61       	ori	r24, 0x10	; 16
    2a60:	8c 93       	st	X, r24
    2a62:	39 c0       	rjmp	.+114    	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_FAST_PWM_ICR1_MODE:
			/* Timer1 Mode Fast PWM Top ICR1 */
			CLR_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    2a64:	af e4       	ldi	r26, 0x4F	; 79
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	ef e4       	ldi	r30, 0x4F	; 79
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	8e 7f       	andi	r24, 0xFE	; 254
    2a70:	8c 93       	st	X, r24
    2a72:	af e4       	ldi	r26, 0x4F	; 79
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	ef e4       	ldi	r30, 0x4F	; 79
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	82 60       	ori	r24, 0x02	; 2
    2a7e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		SET_BIT(TCCR1B, WGM13);
    2a80:	ae e4       	ldi	r26, 0x4E	; 78
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	ee e4       	ldi	r30, 0x4E	; 78
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	88 60       	ori	r24, 0x08	; 8
    2a8c:	8c 93       	st	X, r24
    2a8e:	ae e4       	ldi	r26, 0x4E	; 78
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	ee e4       	ldi	r30, 0x4E	; 78
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	80 61       	ori	r24, 0x10	; 16
    2a9a:	8c 93       	st	X, r24
    2a9c:	1c c0       	rjmp	.+56     	; 0x2ad6 <TIMER1_voidInit+0x43c>
		break;

		case TIMER1_FAST_PWM_OCR1A_MODE:
			/* Timer1 Mode Fast PWM Top OCR1A */
			SET_BIT(TCCR1A, WGM10);		SET_BIT(TCCR1A, WGM11);
    2a9e:	af e4       	ldi	r26, 0x4F	; 79
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	ef e4       	ldi	r30, 0x4F	; 79
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	81 60       	ori	r24, 0x01	; 1
    2aaa:	8c 93       	st	X, r24
    2aac:	af e4       	ldi	r26, 0x4F	; 79
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	ef e4       	ldi	r30, 0x4F	; 79
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	82 60       	ori	r24, 0x02	; 2
    2ab8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		SET_BIT(TCCR1B, WGM13);
    2aba:	ae e4       	ldi	r26, 0x4E	; 78
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	ee e4       	ldi	r30, 0x4E	; 78
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	88 60       	ori	r24, 0x08	; 8
    2ac6:	8c 93       	st	X, r24
    2ac8:	ae e4       	ldi	r26, 0x4E	; 78
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	ee e4       	ldi	r30, 0x4E	; 78
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	80 61       	ori	r24, 0x10	; 16
    2ad4:	8c 93       	st	X, r24
		break;
		default:    break;
	}

	/* Prescaler mask */
	TCCR1B &= PRESCALER_MASK;
    2ad6:	ae e4       	ldi	r26, 0x4E	; 78
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	ee e4       	ldi	r30, 0x4E	; 78
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	88 7f       	andi	r24, 0xF8	; 248
    2ae2:	8c 93       	st	X, r24
	/* Set prescaler value */
	TCCR1B |= Prescaler;
    2ae4:	ae e4       	ldi	r26, 0x4E	; 78
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	ee e4       	ldi	r30, 0x4E	; 78
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	90 81       	ld	r25, Z
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	89 2b       	or	r24, r25
    2af2:	8c 93       	st	X, r24
	
}
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <TIMER1_voidOutputCompareInit>:
/******************************************************************************
* Description 	: TIMER1 Output Compare initialization Function to            *
*                 Select Output Compare Mode & Channel.                       *
******************************************************************************/

void TIMER1_voidOutputCompareInit(Timer1_OutputCompareMode_t OC1_Mode, Timer1_Channel_t OC1_Channel){
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	2c 97       	sbiw	r28, 0x0c	; 12
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	89 83       	std	Y+1, r24	; 0x01
    2b18:	6a 83       	std	Y+2, r22	; 0x02

	switch(OC1_Mode){
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	3c 87       	std	Y+12, r19	; 0x0c
    2b22:	2b 87       	std	Y+11, r18	; 0x0b
    2b24:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b26:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b28:	81 30       	cpi	r24, 0x01	; 1
    2b2a:	91 05       	cpc	r25, r1
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <TIMER1_voidOutputCompareInit+0x2e>
    2b2e:	44 c0       	rjmp	.+136    	; 0x2bb8 <TIMER1_voidOutputCompareInit+0xb6>
    2b30:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b32:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b34:	22 30       	cpi	r18, 0x02	; 2
    2b36:	31 05       	cpc	r19, r1
    2b38:	2c f4       	brge	.+10     	; 0x2b44 <TIMER1_voidOutputCompareInit+0x42>
    2b3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	71 f0       	breq	.+28     	; 0x2b5e <TIMER1_voidOutputCompareInit+0x5c>
    2b42:	c0 c0       	rjmp	.+384    	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>
    2b44:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b46:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b48:	22 30       	cpi	r18, 0x02	; 2
    2b4a:	31 05       	cpc	r19, r1
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <TIMER1_voidOutputCompareInit+0x4e>
    2b4e:	61 c0       	rjmp	.+194    	; 0x2c12 <TIMER1_voidOutputCompareInit+0x110>
    2b50:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b52:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b54:	83 30       	cpi	r24, 0x03	; 3
    2b56:	91 05       	cpc	r25, r1
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <TIMER1_voidOutputCompareInit+0x5a>
    2b5a:	88 c0       	rjmp	.+272    	; 0x2c6c <TIMER1_voidOutputCompareInit+0x16a>
    2b5c:	b3 c0       	rjmp	.+358    	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>

		case TIMER1_OC1_DISCONNECTED_MODE:

			switch(OC1_Channel){
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	3a 87       	std	Y+10, r19	; 0x0a
    2b66:	29 87       	std	Y+9, r18	; 0x09
    2b68:	89 85       	ldd	r24, Y+9	; 0x09
    2b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	31 f0       	breq	.+12     	; 0x2b7c <TIMER1_voidOutputCompareInit+0x7a>
    2b70:	29 85       	ldd	r18, Y+9	; 0x09
    2b72:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b74:	21 30       	cpi	r18, 0x01	; 1
    2b76:	31 05       	cpc	r19, r1
    2b78:	81 f0       	breq	.+32     	; 0x2b9a <TIMER1_voidOutputCompareInit+0x98>
    2b7a:	a4 c0       	rjmp	.+328    	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>

				case TIMER1_OCR1A:
					/* Select channel A normal */
					CLR_BIT(TCCR1A, COM1A0);		CLR_BIT(TCCR1A, COM1A1);
    2b7c:	af e4       	ldi	r26, 0x4F	; 79
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	ef e4       	ldi	r30, 0x4F	; 79
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	8f 7b       	andi	r24, 0xBF	; 191
    2b88:	8c 93       	st	X, r24
    2b8a:	af e4       	ldi	r26, 0x4F	; 79
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	ef e4       	ldi	r30, 0x4F	; 79
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	8f 77       	andi	r24, 0x7F	; 127
    2b96:	8c 93       	st	X, r24
    2b98:	95 c0       	rjmp	.+298    	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>
				break;

				case TIMER1_OCR1B:
					/* Select channel B normal */
					CLR_BIT(TCCR1A, COM1B0);		CLR_BIT(TCCR1A, COM1B1);
    2b9a:	af e4       	ldi	r26, 0x4F	; 79
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	ef e4       	ldi	r30, 0x4F	; 79
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	8f 7e       	andi	r24, 0xEF	; 239
    2ba6:	8c 93       	st	X, r24
    2ba8:	af e4       	ldi	r26, 0x4F	; 79
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	ef e4       	ldi	r30, 0x4F	; 79
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	8f 7d       	andi	r24, 0xDF	; 223
    2bb4:	8c 93       	st	X, r24
    2bb6:	86 c0       	rjmp	.+268    	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>
			}
		break;

		case TIMER1_OC1_TOGGLE_MODE:

			switch(OC1_Channel){
    2bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bba:	28 2f       	mov	r18, r24
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	38 87       	std	Y+8, r19	; 0x08
    2bc0:	2f 83       	std	Y+7, r18	; 0x07
    2bc2:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc4:	98 85       	ldd	r25, Y+8	; 0x08
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	31 f0       	breq	.+12     	; 0x2bd6 <TIMER1_voidOutputCompareInit+0xd4>
    2bca:	2f 81       	ldd	r18, Y+7	; 0x07
    2bcc:	38 85       	ldd	r19, Y+8	; 0x08
    2bce:	21 30       	cpi	r18, 0x01	; 1
    2bd0:	31 05       	cpc	r19, r1
    2bd2:	81 f0       	breq	.+32     	; 0x2bf4 <TIMER1_voidOutputCompareInit+0xf2>
    2bd4:	77 c0       	rjmp	.+238    	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>

				case TIMER1_OCR1A:
					/* Select Channel A Toggle */
					SET_BIT(TCCR1A, COM1A0);		CLR_BIT(TCCR1A, COM1A1);
    2bd6:	af e4       	ldi	r26, 0x4F	; 79
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	ef e4       	ldi	r30, 0x4F	; 79
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	80 64       	ori	r24, 0x40	; 64
    2be2:	8c 93       	st	X, r24
    2be4:	af e4       	ldi	r26, 0x4F	; 79
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	ef e4       	ldi	r30, 0x4F	; 79
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	8f 77       	andi	r24, 0x7F	; 127
    2bf0:	8c 93       	st	X, r24
    2bf2:	68 c0       	rjmp	.+208    	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>
				break;

				case TIMER1_OCR1B:
					/* Select Channel B Toggle */
					SET_BIT(TCCR1A, COM1B0);		CLR_BIT(TCCR1A, COM1B1);
    2bf4:	af e4       	ldi	r26, 0x4F	; 79
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	ef e4       	ldi	r30, 0x4F	; 79
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	80 61       	ori	r24, 0x10	; 16
    2c00:	8c 93       	st	X, r24
    2c02:	af e4       	ldi	r26, 0x4F	; 79
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	ef e4       	ldi	r30, 0x4F	; 79
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	8f 7d       	andi	r24, 0xDF	; 223
    2c0e:	8c 93       	st	X, r24
    2c10:	59 c0       	rjmp	.+178    	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>
			}
		break;

		case TIMER1_OC1_NON_INVERTING_MODE:

			switch(OC1_Channel){
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	3e 83       	std	Y+6, r19	; 0x06
    2c1a:	2d 83       	std	Y+5, r18	; 0x05
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	31 f0       	breq	.+12     	; 0x2c30 <TIMER1_voidOutputCompareInit+0x12e>
    2c24:	2d 81       	ldd	r18, Y+5	; 0x05
    2c26:	3e 81       	ldd	r19, Y+6	; 0x06
    2c28:	21 30       	cpi	r18, 0x01	; 1
    2c2a:	31 05       	cpc	r19, r1
    2c2c:	81 f0       	breq	.+32     	; 0x2c4e <TIMER1_voidOutputCompareInit+0x14c>
    2c2e:	4a c0       	rjmp	.+148    	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>

				case TIMER1_OCR1A:
					/* Select Channel A Non-inverting */
					CLR_BIT(TCCR1A, COM1A0);		SET_BIT(TCCR1A, COM1A1);
    2c30:	af e4       	ldi	r26, 0x4F	; 79
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	ef e4       	ldi	r30, 0x4F	; 79
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	8f 7b       	andi	r24, 0xBF	; 191
    2c3c:	8c 93       	st	X, r24
    2c3e:	af e4       	ldi	r26, 0x4F	; 79
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	ef e4       	ldi	r30, 0x4F	; 79
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	80 68       	ori	r24, 0x80	; 128
    2c4a:	8c 93       	st	X, r24
    2c4c:	3b c0       	rjmp	.+118    	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>
				break;

				case TIMER1_OCR1B:
					/* Select Channel B Non-inverting */
					CLR_BIT(TCCR1A, COM1B0);		SET_BIT(TCCR1A, COM1B1);
    2c4e:	af e4       	ldi	r26, 0x4F	; 79
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	ef e4       	ldi	r30, 0x4F	; 79
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	80 81       	ld	r24, Z
    2c58:	8f 7e       	andi	r24, 0xEF	; 239
    2c5a:	8c 93       	st	X, r24
    2c5c:	af e4       	ldi	r26, 0x4F	; 79
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	ef e4       	ldi	r30, 0x4F	; 79
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	80 62       	ori	r24, 0x20	; 32
    2c68:	8c 93       	st	X, r24
    2c6a:	2c c0       	rjmp	.+88     	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>
			}
		break;

		case TIMER1_OC1_INVERTING_MODE:

			switch(OC1_Channel){
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	28 2f       	mov	r18, r24
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	3c 83       	std	Y+4, r19	; 0x04
    2c74:	2b 83       	std	Y+3, r18	; 0x03
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	31 f0       	breq	.+12     	; 0x2c8a <TIMER1_voidOutputCompareInit+0x188>
    2c7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c80:	3c 81       	ldd	r19, Y+4	; 0x04
    2c82:	21 30       	cpi	r18, 0x01	; 1
    2c84:	31 05       	cpc	r19, r1
    2c86:	81 f0       	breq	.+32     	; 0x2ca8 <TIMER1_voidOutputCompareInit+0x1a6>
    2c88:	1d c0       	rjmp	.+58     	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>

				case TIMER1_OCR1A:
					/* Select Channel A Inverting */
					SET_BIT(TCCR1A, COM1A0);		SET_BIT(TCCR1A, COM1A1);
    2c8a:	af e4       	ldi	r26, 0x4F	; 79
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	ef e4       	ldi	r30, 0x4F	; 79
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	80 64       	ori	r24, 0x40	; 64
    2c96:	8c 93       	st	X, r24
    2c98:	af e4       	ldi	r26, 0x4F	; 79
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	ef e4       	ldi	r30, 0x4F	; 79
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	80 68       	ori	r24, 0x80	; 128
    2ca4:	8c 93       	st	X, r24
    2ca6:	0e c0       	rjmp	.+28     	; 0x2cc4 <TIMER1_voidOutputCompareInit+0x1c2>
				break;

				case TIMER1_OCR1B:
					/* Select Channel B Inverting */
					SET_BIT(TCCR1A, COM1B0);		SET_BIT(TCCR1A, COM1B1);
    2ca8:	af e4       	ldi	r26, 0x4F	; 79
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	ef e4       	ldi	r30, 0x4F	; 79
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	80 61       	ori	r24, 0x10	; 16
    2cb4:	8c 93       	st	X, r24
    2cb6:	af e4       	ldi	r26, 0x4F	; 79
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	ef e4       	ldi	r30, 0x4F	; 79
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	80 62       	ori	r24, 0x20	; 32
    2cc2:	8c 93       	st	X, r24
				default:  break;
			}
		break;
		default:  break;
	}
}
    2cc4:	2c 96       	adiw	r28, 0x0c	; 12
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	08 95       	ret

00002cd6 <TIMER1_u16GetICR1>:

/******************************************************************************
* Description 	: TIMER1 Get Input Capture Register1 Value Function.		  *
******************************************************************************/

uint16 TIMER1_u16GetICR1(void){
    2cd6:	df 93       	push	r29
    2cd8:	cf 93       	push	r28
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
    2cde:	e6 e4       	ldi	r30, 0x46	; 70
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
}
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <TIMER1_voidSetOCR1A>:

/******************************************************************************
* Description 	: TIMER1 Set Output Compare Register1 A Value.	              *
******************************************************************************/

void TIMER1_voidSetOCR1A(uint16 Copy_u16Value){
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	00 d0       	rcall	.+0      	; 0x2cf2 <TIMER1_voidSetOCR1A+0x6>
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	89 83       	std	Y+1, r24	; 0x01

	OCR1A = Copy_u16Value;
    2cfa:	ea e4       	ldi	r30, 0x4A	; 74
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	9a 81       	ldd	r25, Y+2	; 0x02
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	80 83       	st	Z, r24

}
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <TIMER1_voidSetOCR1B>:

/******************************************************************************
* Description 	: TIMER1 Set Output Compare Register1 B Value.	              *
******************************************************************************/

void TIMER1_voidSetOCR1B(uint16 Copy_u16Value){
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <TIMER1_voidSetOCR1B+0x6>
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	9a 83       	std	Y+2, r25	; 0x02
    2d1c:	89 83       	std	Y+1, r24	; 0x01

	OCR1B = Copy_u16Value;
    2d1e:	e8 e4       	ldi	r30, 0x48	; 72
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	9a 81       	ldd	r25, Y+2	; 0x02
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	80 83       	st	Z, r24

}
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	08 95       	ret

00002d34 <TIMER1_voidSetICR1>:

/******************************************************************************
* Description 	: TIMER1 Set Input Capture Register1 Value.	                  *
******************************************************************************/

void TIMER1_voidSetICR1(uint16 Copy_u16Value){
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	00 d0       	rcall	.+0      	; 0x2d3a <TIMER1_voidSetICR1+0x6>
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	9a 83       	std	Y+2, r25	; 0x02
    2d40:	89 83       	std	Y+1, r24	; 0x01

	 ICR1 = Copy_u16Value;
    2d42:	e6 e4       	ldi	r30, 0x46	; 70
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	80 83       	st	Z, r24
}
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <TIMER1_voidSetTimerValue>:

/******************************************************************************
* Description 	: TIMER1 Set Timer Value(TCNT1).	                          *
******************************************************************************/

void TIMER1_voidSetTimerValue(uint16 Copy_u16Value){
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <TIMER1_voidSetTimerValue+0x6>
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	9a 83       	std	Y+2, r25	; 0x02
    2d64:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Copy_u16Value;
    2d66:	ec e4       	ldi	r30, 0x4C	; 76
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	80 83       	st	Z, r24

}
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <TIMER1_voidReadTimerValue>:

/******************************************************************************
* Description 	: TIMER1 Read Timer Value(TCNT1).	                          *
******************************************************************************/

uint16 TIMER1_voidReadTimerValue(void){
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62

	return TCNT1;
    2d84:	ec e4       	ldi	r30, 0x4C	; 76
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	91 81       	ldd	r25, Z+1	; 0x01

}
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <PWM1_voidInit>:

/******************************************************************************
* Description 	: TIMER1 PWM initialization Function.		                  *
******************************************************************************/

void PWM1_voidInit(void){
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62

	TIMER1_voidInit(TIMER1_FAST_PWM_ICR1_MODE, TIMER1_SCALER_8);
    2d9a:	8d e0       	ldi	r24, 0x0D	; 13
    2d9c:	62 e0       	ldi	r22, 0x02	; 2
    2d9e:	0e 94 4d 13 	call	0x269a	; 0x269a <TIMER1_voidInit>

	TIMER1_voidOutputCompareInit(TIMER1_OC1_NON_INVERTING_MODE, TIMER1_OCR1A);
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TIMER1_voidOutputCompareInit>

}
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <PWM1_voidFreqKHZ>:

/******************************************************************************
* Description 	: TIMER1 Generate PWM @ Frequency (KHZ) Function.		      *
******************************************************************************/

void PWM1_voidFreqKHZ(uint16 Copy_u16Freq){
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	00 d0       	rcall	.+0      	; 0x2db6 <PWM1_voidFreqKHZ+0x6>
    2db6:	00 d0       	rcall	.+0      	; 0x2db8 <PWM1_voidFreqKHZ+0x8>
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	8b 83       	std	Y+3, r24	; 0x03

	if(0 == Copy_u16Freq){
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	d1 f0       	breq	.+52     	; 0x2dfc <PWM1_voidFreqKHZ+0x4c>

		/* return error */
	}
	else{

		uint16 Local_u16TimeTotal = 1000 / Copy_u16Freq;
    2dc8:	88 ee       	ldi	r24, 0xE8	; 232
    2dca:	93 e0       	ldi	r25, 0x03	; 3
    2dcc:	2b 81       	ldd	r18, Y+3	; 0x03
    2dce:	3c 81       	ldd	r19, Y+4	; 0x04
    2dd0:	b9 01       	movw	r22, r18
    2dd2:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9a 83       	std	Y+2, r25	; 0x02
    2dda:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u16TimeTotal >= 1){
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	9a 81       	ldd	r25, Y+2	; 0x02
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	41 f0       	breq	.+16     	; 0x2df4 <PWM1_voidFreqKHZ+0x44>

			ICR1 = Local_u16TimeTotal - 1;
    2de4:	e6 e4       	ldi	r30, 0x46	; 70
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	9a 81       	ldd	r25, Y+2	; 0x02
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	80 83       	st	Z, r24
    2df2:	04 c0       	rjmp	.+8      	; 0x2dfc <PWM1_voidFreqKHZ+0x4c>
		}
		else{ ICR1 = 0; }
    2df4:	e6 e4       	ldi	r30, 0x46	; 70
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	11 82       	std	Z+1, r1	; 0x01
    2dfa:	10 82       	st	Z, r1
	}
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <PWM1_voidFreqHZ>:

/******************************************************************************
* Description 	: TIMER1 Generate PWM @ Frequency (HZ) Function.		      *
******************************************************************************/

void PWM1_voidFreqHZ(uint16 Copy_u16Freq){
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <PWM1_voidFreqHZ+0x6>
    2e10:	00 d0       	rcall	.+0      	; 0x2e12 <PWM1_voidFreqHZ+0x8>
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	9c 83       	std	Y+4, r25	; 0x04
    2e18:	8b 83       	std	Y+3, r24	; 0x03

	if(0 == Copy_u16Freq){
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	09 f1       	breq	.+66     	; 0x2e64 <PWM1_voidFreqHZ+0x5a>

		/* return error */
	}
	else{

		uint16 Local_u16TimeTotal = (uint32)1000000 / Copy_u16Freq;
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	9c 81       	ldd	r25, Y+4	; 0x04
    2e26:	9c 01       	movw	r18, r24
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	50 e0       	ldi	r21, 0x00	; 0
    2e2c:	80 e4       	ldi	r24, 0x40	; 64
    2e2e:	92 e4       	ldi	r25, 0x42	; 66
    2e30:	af e0       	ldi	r26, 0x0F	; 15
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	bc 01       	movw	r22, r24
    2e36:	cd 01       	movw	r24, r26
    2e38:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__udivmodsi4>
    2e3c:	da 01       	movw	r26, r20
    2e3e:	c9 01       	movw	r24, r18
    2e40:	9a 83       	std	Y+2, r25	; 0x02
    2e42:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u16TimeTotal >= 1){
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	9a 81       	ldd	r25, Y+2	; 0x02
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	41 f0       	breq	.+16     	; 0x2e5c <PWM1_voidFreqHZ+0x52>

			ICR1 = Local_u16TimeTotal - 1;
    2e4c:	e6 e4       	ldi	r30, 0x46	; 70
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	9a 81       	ldd	r25, Y+2	; 0x02
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
    2e5a:	04 c0       	rjmp	.+8      	; 0x2e64 <PWM1_voidFreqHZ+0x5a>
		}
		else{ ICR1 = 0; }
    2e5c:	e6 e4       	ldi	r30, 0x46	; 70
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	11 82       	std	Z+1, r1	; 0x01
    2e62:	10 82       	st	Z, r1
	}
}
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <PWM1_voidDutyCycle>:

/******************************************************************************
* Description 	: TIMER1 PWM Duty Cycle Function.		                      *
******************************************************************************/

void PWM1_voidDutyCycle(uint16 Copy_u16Duty){
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <PWM1_voidDutyCycle+0xe>
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <PWM1_voidDutyCycle+0x10>
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u16Duty <= 100){
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8e:	85 36       	cpi	r24, 0x65	; 101
    2e90:	91 05       	cpc	r25, r1
    2e92:	80 f5       	brcc	.+96     	; 0x2ef4 <PWM1_voidDutyCycle+0x82>

		uint16 Local_u16TimeON = ((uint32)Copy_u16Duty * (ICR1 + 1)) / 100;
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	9c 81       	ldd	r25, Y+4	; 0x04
    2e98:	7c 01       	movw	r14, r24
    2e9a:	00 e0       	ldi	r16, 0x00	; 0
    2e9c:	10 e0       	ldi	r17, 0x00	; 0
    2e9e:	e6 e4       	ldi	r30, 0x46	; 70
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	91 81       	ldd	r25, Z+1	; 0x01
    2ea6:	01 96       	adiw	r24, 0x01	; 1
    2ea8:	9c 01       	movw	r18, r24
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	50 e0       	ldi	r21, 0x00	; 0
    2eae:	c8 01       	movw	r24, r16
    2eb0:	b7 01       	movw	r22, r14
    2eb2:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__mulsi3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	24 e6       	ldi	r18, 0x64	; 100
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	bc 01       	movw	r22, r24
    2ec4:	cd 01       	movw	r24, r26
    2ec6:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__udivmodsi4>
    2eca:	da 01       	movw	r26, r20
    2ecc:	c9 01       	movw	r24, r18
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u16TimeON > 1){
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed6:	82 30       	cpi	r24, 0x02	; 2
    2ed8:	91 05       	cpc	r25, r1
    2eda:	40 f0       	brcs	.+16     	; 0x2eec <PWM1_voidDutyCycle+0x7a>

			OCR1A = Local_u16TimeON - 1;
    2edc:	ea e4       	ldi	r30, 0x4A	; 74
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	80 83       	st	Z, r24
    2eea:	04 c0       	rjmp	.+8      	; 0x2ef4 <PWM1_voidDutyCycle+0x82>
		}
		else{ OCR1A = 0; }
    2eec:	ea e4       	ldi	r30, 0x4A	; 74
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	11 82       	std	Z+1, r1	; 0x01
    2ef2:	10 82       	st	Z, r1
	}
	
	else{ /* return error */}
	
}
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	ff 90       	pop	r15
    2f06:	ef 90       	pop	r14
    2f08:	08 95       	ret

00002f0a <ICU1_voidInit>:

/******************************************************************************
* Description 	: TIMER1 Input Capture Init Function.		                  *
******************************************************************************/

void ICU1_voidInit(void){
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62

	/* Set trigger source to rising edge initially */
	SET_BIT(TCCR1B, ICES1);
    2f12:	ae e4       	ldi	r26, 0x4E	; 78
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	ee e4       	ldi	r30, 0x4E	; 78
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	80 64       	ori	r24, 0x40	; 64
    2f1e:	8c 93       	st	X, r24

	/* Enable input capture interrupt */
	SET_BIT(TIMSK, TICIE1);
    2f20:	a9 e5       	ldi	r26, 0x59	; 89
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e9 e5       	ldi	r30, 0x59	; 89
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	80 62       	ori	r24, 0x20	; 32
    2f2c:	8c 93       	st	X, r24

}
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <ICU1_voidSetTriggerEdge>:

/******************************************************************************
* Description 	: TIMER1 Input Capture Edge Function.		                  *
******************************************************************************/

void ICU1_voidSetTriggerEdge(ICU_Edge_t Edge){
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <ICU1_voidSetTriggerEdge+0x6>
    2f3a:	0f 92       	push	r0
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	89 83       	std	Y+1, r24	; 0x01

	switch(Edge){
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	3b 83       	std	Y+3, r19	; 0x03
    2f4a:	2a 83       	std	Y+2, r18	; 0x02
    2f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f50:	00 97       	sbiw	r24, 0x00	; 0
    2f52:	31 f0       	breq	.+12     	; 0x2f60 <ICU1_voidSetTriggerEdge+0x2c>
    2f54:	2a 81       	ldd	r18, Y+2	; 0x02
    2f56:	3b 81       	ldd	r19, Y+3	; 0x03
    2f58:	21 30       	cpi	r18, 0x01	; 1
    2f5a:	31 05       	cpc	r19, r1
    2f5c:	49 f0       	breq	.+18     	; 0x2f70 <ICU1_voidSetTriggerEdge+0x3c>
    2f5e:	0f c0       	rjmp	.+30     	; 0x2f7e <ICU1_voidSetTriggerEdge+0x4a>

		case ICU_RISING_EDGE:
			/* Input capture rising edge */
			SET_BIT(TCCR1B, ICES1);
    2f60:	ae e4       	ldi	r26, 0x4E	; 78
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	ee e4       	ldi	r30, 0x4E	; 78
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	80 64       	ori	r24, 0x40	; 64
    2f6c:	8c 93       	st	X, r24
    2f6e:	07 c0       	rjmp	.+14     	; 0x2f7e <ICU1_voidSetTriggerEdge+0x4a>
		break;

		case ICU_FALLING_EDGE:
			/* Input capture falling edge */
			CLR_BIT(TCCR1B, ICES1);
    2f70:	ae e4       	ldi	r26, 0x4E	; 78
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	ee e4       	ldi	r30, 0x4E	; 78
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	8f 7b       	andi	r24, 0xBF	; 191
    2f7c:	8c 93       	st	X, r24
		break;
		default:  break;
	}
}
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	cf 91       	pop	r28
    2f86:	df 91       	pop	r29
    2f88:	08 95       	ret

00002f8a <ICU1_u16ReadInputCapture>:

/******************************************************************************
* Description 	: TIMER1 Read Input Capture Function.		                          *
******************************************************************************/

uint16 ICU1_u16ReadInputCapture(void){
    2f8a:	df 93       	push	r29
    2f8c:	cf 93       	push	r28
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
    2f92:	e6 e4       	ldi	r30, 0x46	; 70
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	91 81       	ldd	r25, Z+1	; 0x01
}
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	08 95       	ret

00002fa0 <PWM1_voidRead>:

/******************************************************************************
* Description 	: TIMER1 PWM1 Read Function.		                          *
******************************************************************************/

void PWM1_voidRead(uint32 *ReturnFreq, uint8 *ReturnDuty){
    2fa0:	ef 92       	push	r14
    2fa2:	ff 92       	push	r15
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	28 97       	sbiw	r28, 0x08	; 8
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
    2fc0:	78 87       	std	Y+8, r23	; 0x08
    2fc2:	6f 83       	std	Y+7, r22	; 0x07

	uint16 Local_u16TimeON, Local_u16TimeOFF;

	TCNT1 = 0;
    2fc4:	ec e4       	ldi	r30, 0x4C	; 76
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	11 82       	std	Z+1, r1	; 0x01
    2fca:	10 82       	st	Z, r1

	TIMER1_voidInputCaptureSetCallBack(ICU1_InterruptAction);
    2fcc:	87 e6       	ldi	r24, 0x67	; 103
    2fce:	98 e1       	ldi	r25, 0x18	; 24
    2fd0:	0e 94 a8 19 	call	0x3350	; 0x3350 <TIMER1_voidInputCaptureSetCallBack>
	ICU1_voidSetTriggerEdge(ICU_RISING_EDGE);
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <ICU1_voidSetTriggerEdge>
	TIMER1_voidInputCaptureInterruptEnable();
    2fda:	0e 94 14 19 	call	0x3228	; 0x3228 <TIMER1_voidInputCaptureInterruptEnable>

	Global_u16Flag = 0;
    2fde:	10 92 c7 01 	sts	0x01C7, r1
    2fe2:	10 92 c6 01 	sts	0x01C6, r1

	while(Global_u16Flag < 3);
    2fe6:	80 91 c6 01 	lds	r24, 0x01C6
    2fea:	90 91 c7 01 	lds	r25, 0x01C7
    2fee:	83 30       	cpi	r24, 0x03	; 3
    2ff0:	91 05       	cpc	r25, r1
    2ff2:	c8 f3       	brcs	.-14     	; 0x2fe6 <PWM1_voidRead+0x46>

	Local_u16TimeON = Global_u16Time2 - Global_u16Time1;
    2ff4:	20 91 d2 01 	lds	r18, 0x01D2
    2ff8:	30 91 d3 01 	lds	r19, 0x01D3
    2ffc:	80 91 d0 01 	lds	r24, 0x01D0
    3000:	90 91 d1 01 	lds	r25, 0x01D1
    3004:	a9 01       	movw	r20, r18
    3006:	48 1b       	sub	r20, r24
    3008:	59 0b       	sbc	r21, r25
    300a:	ca 01       	movw	r24, r20
    300c:	9c 83       	std	Y+4, r25	; 0x04
    300e:	8b 83       	std	Y+3, r24	; 0x03

	Local_u16TimeOFF = Global_u16Time3 - Global_u16Time2;
    3010:	20 91 d4 01 	lds	r18, 0x01D4
    3014:	30 91 d5 01 	lds	r19, 0x01D5
    3018:	80 91 d2 01 	lds	r24, 0x01D2
    301c:	90 91 d3 01 	lds	r25, 0x01D3
    3020:	a9 01       	movw	r20, r18
    3022:	48 1b       	sub	r20, r24
    3024:	59 0b       	sbc	r21, r25
    3026:	ca 01       	movw	r24, r20
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01

	*ReturnDuty = ((uint32) Local_u16TimeON * 100)/((uint32)Local_u16TimeON + Local_u16TimeOFF);
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	9c 81       	ldd	r25, Y+4	; 0x04
    3030:	cc 01       	movw	r24, r24
    3032:	a0 e0       	ldi	r26, 0x00	; 0
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	24 e6       	ldi	r18, 0x64	; 100
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	40 e0       	ldi	r20, 0x00	; 0
    303c:	50 e0       	ldi	r21, 0x00	; 0
    303e:	bc 01       	movw	r22, r24
    3040:	cd 01       	movw	r24, r26
    3042:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__mulsi3>
    3046:	7b 01       	movw	r14, r22
    3048:	8c 01       	movw	r16, r24
    304a:	8b 81       	ldd	r24, Y+3	; 0x03
    304c:	9c 81       	ldd	r25, Y+4	; 0x04
    304e:	9c 01       	movw	r18, r24
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	50 e0       	ldi	r21, 0x00	; 0
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	9a 81       	ldd	r25, Y+2	; 0x02
    3058:	cc 01       	movw	r24, r24
    305a:	a0 e0       	ldi	r26, 0x00	; 0
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	28 0f       	add	r18, r24
    3060:	39 1f       	adc	r19, r25
    3062:	4a 1f       	adc	r20, r26
    3064:	5b 1f       	adc	r21, r27
    3066:	c8 01       	movw	r24, r16
    3068:	b7 01       	movw	r22, r14
    306a:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__udivmodsi4>
    306e:	da 01       	movw	r26, r20
    3070:	c9 01       	movw	r24, r18
    3072:	ef 81       	ldd	r30, Y+7	; 0x07
    3074:	f8 85       	ldd	r31, Y+8	; 0x08
    3076:	80 83       	st	Z, r24

	*ReturnFreq = ((uint32)1000000) / ((uint32)Local_u16TimeON + Local_u16TimeOFF);
    3078:	8b 81       	ldd	r24, Y+3	; 0x03
    307a:	9c 81       	ldd	r25, Y+4	; 0x04
    307c:	9c 01       	movw	r18, r24
    307e:	40 e0       	ldi	r20, 0x00	; 0
    3080:	50 e0       	ldi	r21, 0x00	; 0
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	9a 81       	ldd	r25, Y+2	; 0x02
    3086:	cc 01       	movw	r24, r24
    3088:	a0 e0       	ldi	r26, 0x00	; 0
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	28 0f       	add	r18, r24
    308e:	39 1f       	adc	r19, r25
    3090:	4a 1f       	adc	r20, r26
    3092:	5b 1f       	adc	r21, r27
    3094:	80 e4       	ldi	r24, 0x40	; 64
    3096:	92 e4       	ldi	r25, 0x42	; 66
    3098:	af e0       	ldi	r26, 0x0F	; 15
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	bc 01       	movw	r22, r24
    309e:	cd 01       	movw	r24, r26
    30a0:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__udivmodsi4>
    30a4:	da 01       	movw	r26, r20
    30a6:	c9 01       	movw	r24, r18
    30a8:	ed 81       	ldd	r30, Y+5	; 0x05
    30aa:	fe 81       	ldd	r31, Y+6	; 0x06
    30ac:	80 83       	st	Z, r24
    30ae:	91 83       	std	Z+1, r25	; 0x01
    30b0:	a2 83       	std	Z+2, r26	; 0x02
    30b2:	b3 83       	std	Z+3, r27	; 0x03

}
    30b4:	28 96       	adiw	r28, 0x08	; 8
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	1f 91       	pop	r17
    30c6:	0f 91       	pop	r16
    30c8:	ff 90       	pop	r15
    30ca:	ef 90       	pop	r14
    30cc:	08 95       	ret

000030ce <ICU1_InterruptAction>:

/******************************************************************************
* Description 	: TIMER1 ICU Interrupt Action Private Function.				  *
******************************************************************************/

static void ICU1_InterruptAction(void){
    30ce:	df 93       	push	r29
    30d0:	cf 93       	push	r28
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62

	if(Global_u16Flag == 0){
    30d6:	80 91 c6 01 	lds	r24, 0x01C6
    30da:	90 91 c7 01 	lds	r25, 0x01C7
    30de:	00 97       	sbiw	r24, 0x00	; 0
    30e0:	91 f4       	brne	.+36     	; 0x3106 <ICU1_InterruptAction+0x38>

		Global_u16Time1 = ICR1;
    30e2:	e6 e4       	ldi	r30, 0x46	; 70
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	90 93 d1 01 	sts	0x01D1, r25
    30ee:	80 93 d0 01 	sts	0x01D0, r24
		ICU1_voidSetTriggerEdge(ICU_FALLING_EDGE);
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <ICU1_voidSetTriggerEdge>
		Global_u16Flag = 1;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	90 93 c7 01 	sts	0x01C7, r25
    3100:	80 93 c6 01 	sts	0x01C6, r24
    3104:	30 c0       	rjmp	.+96     	; 0x3166 <ICU1_InterruptAction+0x98>

	}
	else if(Global_u16Flag == 1){
    3106:	80 91 c6 01 	lds	r24, 0x01C6
    310a:	90 91 c7 01 	lds	r25, 0x01C7
    310e:	81 30       	cpi	r24, 0x01	; 1
    3110:	91 05       	cpc	r25, r1
    3112:	91 f4       	brne	.+36     	; 0x3138 <ICU1_InterruptAction+0x6a>

		Global_u16Time2 = ICR1;
    3114:	e6 e4       	ldi	r30, 0x46	; 70
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	91 81       	ldd	r25, Z+1	; 0x01
    311c:	90 93 d3 01 	sts	0x01D3, r25
    3120:	80 93 d2 01 	sts	0x01D2, r24
		ICU1_voidSetTriggerEdge(ICU_RISING_EDGE);
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <ICU1_voidSetTriggerEdge>
		Global_u16Flag = 2;
    312a:	82 e0       	ldi	r24, 0x02	; 2
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	90 93 c7 01 	sts	0x01C7, r25
    3132:	80 93 c6 01 	sts	0x01C6, r24
    3136:	17 c0       	rjmp	.+46     	; 0x3166 <ICU1_InterruptAction+0x98>

	}
	else if(Global_u16Flag == 2){
    3138:	80 91 c6 01 	lds	r24, 0x01C6
    313c:	90 91 c7 01 	lds	r25, 0x01C7
    3140:	82 30       	cpi	r24, 0x02	; 2
    3142:	91 05       	cpc	r25, r1
    3144:	81 f4       	brne	.+32     	; 0x3166 <ICU1_InterruptAction+0x98>

		Global_u16Time3 = ICR1;
    3146:	e6 e4       	ldi	r30, 0x46	; 70
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	91 81       	ldd	r25, Z+1	; 0x01
    314e:	90 93 d5 01 	sts	0x01D5, r25
    3152:	80 93 d4 01 	sts	0x01D4, r24
		TIMER1_voidInputCaptureInterruptDisable();
    3156:	0e 94 22 19 	call	0x3244	; 0x3244 <TIMER1_voidInputCaptureInterruptDisable>
		Global_u16Flag = 3;
    315a:	83 e0       	ldi	r24, 0x03	; 3
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	90 93 c7 01 	sts	0x01C7, r25
    3162:	80 93 c6 01 	sts	0x01C6, r24

	}
}
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <TIMER1_voidSetTime_ms>:

/******************************************************************************
* Description 	: TIMER1 Set Interrupt Time (ms) Function.		              *
******************************************************************************/

void TIMER1_voidSetTime_ms(uint16 Copy_u16Time, void(*Local_Fptr)(void)){
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	00 d0       	rcall	.+0      	; 0x3172 <TIMER1_voidSetTime_ms+0x6>
    3172:	00 d0       	rcall	.+0      	; 0x3174 <TIMER1_voidSetTime_ms+0x8>
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	9a 83       	std	Y+2, r25	; 0x02
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	7c 83       	std	Y+4, r23	; 0x04
    317e:	6b 83       	std	Y+3, r22	; 0x03

	TIMER1_voidInit(TIMER1_CTC_OCR1A_MODE, TIMER1_SCALER_8);
    3180:	84 e0       	ldi	r24, 0x04	; 4
    3182:	62 e0       	ldi	r22, 0x02	; 2
    3184:	0e 94 4d 13 	call	0x269a	; 0x269a <TIMER1_voidInit>
	TIMER1_voidOutputCompareInit(TIMER1_OC1_DISCONNECTED_MODE, TIMER1_OCR1A);
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TIMER1_voidOutputCompareInit>
	TIMER1_voidOutputCompareInit(TIMER1_OC1_DISCONNECTED_MODE, TIMER1_OCR1B);
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	61 e0       	ldi	r22, 0x01	; 1
    3194:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TIMER1_voidOutputCompareInit>

	OCR1A = ((Copy_u16Time * 1000) - 1);
    3198:	ea e4       	ldi	r30, 0x4A	; 74
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	29 81       	ldd	r18, Y+1	; 0x01
    319e:	3a 81       	ldd	r19, Y+2	; 0x02
    31a0:	88 ee       	ldi	r24, 0xE8	; 232
    31a2:	93 e0       	ldi	r25, 0x03	; 3
    31a4:	ac 01       	movw	r20, r24
    31a6:	24 9f       	mul	r18, r20
    31a8:	c0 01       	movw	r24, r0
    31aa:	25 9f       	mul	r18, r21
    31ac:	90 0d       	add	r25, r0
    31ae:	34 9f       	mul	r19, r20
    31b0:	90 0d       	add	r25, r0
    31b2:	11 24       	eor	r1, r1
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	91 83       	std	Z+1, r25	; 0x01
    31b8:	80 83       	st	Z, r24

	TIMER1_voidOCA_SetCallBack(Local_Fptr);
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	9c 81       	ldd	r25, Y+4	; 0x04
    31be:	0e 94 96 19 	call	0x332c	; 0x332c <TIMER1_voidOCA_SetCallBack>

	TIMER1_voidOCA_InterruptEnable();
    31c2:	0e 94 4c 19 	call	0x3298	; 0x3298 <TIMER1_voidOCA_InterruptEnable>

}
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	08 95       	ret

000031d4 <TIMER1_voidSetTime_us>:

/******************************************************************************
* Description 	: TIMER1 Set Interrupt Time (us) Function.		              *
******************************************************************************/

void TIMER1_voidSetTime_us(uint16 Copy_u16Time, void(*Local_Fptr)(void)){
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	00 d0       	rcall	.+0      	; 0x31da <TIMER1_voidSetTime_us+0x6>
    31da:	00 d0       	rcall	.+0      	; 0x31dc <TIMER1_voidSetTime_us+0x8>
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	9a 83       	std	Y+2, r25	; 0x02
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	7c 83       	std	Y+4, r23	; 0x04
    31e6:	6b 83       	std	Y+3, r22	; 0x03

	TIMER1_voidInit(TIMER1_CTC_OCR1A_MODE, TIMER1_SCALER_8);
    31e8:	84 e0       	ldi	r24, 0x04	; 4
    31ea:	62 e0       	ldi	r22, 0x02	; 2
    31ec:	0e 94 4d 13 	call	0x269a	; 0x269a <TIMER1_voidInit>
	TIMER1_voidOutputCompareInit(TIMER1_OC1_DISCONNECTED_MODE, TIMER1_OCR1A);
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	60 e0       	ldi	r22, 0x00	; 0
    31f4:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TIMER1_voidOutputCompareInit>
	TIMER1_voidOutputCompareInit(TIMER1_OC1_DISCONNECTED_MODE, TIMER1_OCR1B);
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	61 e0       	ldi	r22, 0x01	; 1
    31fc:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TIMER1_voidOutputCompareInit>

	OCR1A = (Copy_u16Time - 1);
    3200:	ea e4       	ldi	r30, 0x4A	; 74
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	91 83       	std	Z+1, r25	; 0x01
    320c:	80 83       	st	Z, r24

	TIMER1_voidOCA_SetCallBack(Local_Fptr);
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	0e 94 96 19 	call	0x332c	; 0x332c <TIMER1_voidOCA_SetCallBack>

	TIMER1_voidOCA_InterruptEnable();
    3216:	0e 94 4c 19 	call	0x3298	; 0x3298 <TIMER1_voidOCA_InterruptEnable>

}
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	cf 91       	pop	r28
    3224:	df 91       	pop	r29
    3226:	08 95       	ret

00003228 <TIMER1_voidInputCaptureInterruptEnable>:

/******************************************************************************
* Description 	: TIMER1 Input Capture Unit Interrupt Enable Function.		  *
******************************************************************************/

void TIMER1_voidInputCaptureInterruptEnable(void){
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62

	/* Enable Input Capture Unit mode interrupt */
	SET_BIT(TIMSK, TICIE1);
    3230:	a9 e5       	ldi	r26, 0x59	; 89
    3232:	b0 e0       	ldi	r27, 0x00	; 0
    3234:	e9 e5       	ldi	r30, 0x59	; 89
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	80 62       	ori	r24, 0x20	; 32
    323c:	8c 93       	st	X, r24
}
    323e:	cf 91       	pop	r28
    3240:	df 91       	pop	r29
    3242:	08 95       	ret

00003244 <TIMER1_voidInputCaptureInterruptDisable>:

/******************************************************************************
* Description 	: TIMER1 Input Capture Unit Interrupt Disable Function.		  *
******************************************************************************/

void TIMER1_voidInputCaptureInterruptDisable(void){
    3244:	df 93       	push	r29
    3246:	cf 93       	push	r28
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62

	/* Disable Input Capture Unit mode interrupt */
	CLR_BIT(TIMSK, TICIE1);
    324c:	a9 e5       	ldi	r26, 0x59	; 89
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	e9 e5       	ldi	r30, 0x59	; 89
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	8f 7d       	andi	r24, 0xDF	; 223
    3258:	8c 93       	st	X, r24
}
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	08 95       	ret

00003260 <TIMER1_voidOverflowInterruptEnable>:

/******************************************************************************
* Description 	: TIMER1 Overflow Interrupt Enable Function.		          *
******************************************************************************/

void TIMER1_voidOverflowInterruptEnable(void){
    3260:	df 93       	push	r29
    3262:	cf 93       	push	r28
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62

	/* Enable overflow mode interrupt */
	SET_BIT(TIMSK, TOIE1);
    3268:	a9 e5       	ldi	r26, 0x59	; 89
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e9 e5       	ldi	r30, 0x59	; 89
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	84 60       	ori	r24, 0x04	; 4
    3274:	8c 93       	st	X, r24
}
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <TIMER1_voidOverflowInterruptDisable>:

/******************************************************************************
* Description 	: TIMER1 Overflow Interrupt Disable Function.		          *
******************************************************************************/

void TIMER1_voidOverflowInterruptDisable(void){
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62

	/* Disable overflow mode interrupt */
	CLR_BIT(TIMSK, TOIE1);
    3284:	a9 e5       	ldi	r26, 0x59	; 89
    3286:	b0 e0       	ldi	r27, 0x00	; 0
    3288:	e9 e5       	ldi	r30, 0x59	; 89
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	8b 7f       	andi	r24, 0xFB	; 251
    3290:	8c 93       	st	X, r24
}
    3292:	cf 91       	pop	r28
    3294:	df 91       	pop	r29
    3296:	08 95       	ret

00003298 <TIMER1_voidOCA_InterruptEnable>:

/******************************************************************************
* Description 	: TIMER1 Output Compare A Interrupt Enable Function.		  *
******************************************************************************/

void TIMER1_voidOCA_InterruptEnable(void){
    3298:	df 93       	push	r29
    329a:	cf 93       	push	r28
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62

	/* Enable Output Compare A mode interrupt */
	SET_BIT(TIMSK, OCIE1A);
    32a0:	a9 e5       	ldi	r26, 0x59	; 89
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e9 e5       	ldi	r30, 0x59	; 89
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	80 61       	ori	r24, 0x10	; 16
    32ac:	8c 93       	st	X, r24
}
    32ae:	cf 91       	pop	r28
    32b0:	df 91       	pop	r29
    32b2:	08 95       	ret

000032b4 <TIMER1_voidOCA_InterruptDisable>:

/******************************************************************************
* Description 	: TIMER1 Output Compare A Interrupt Disable Function.		  *
******************************************************************************/

void TIMER1_voidOCA_InterruptDisable(void){
    32b4:	df 93       	push	r29
    32b6:	cf 93       	push	r28
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62

	/* Disable overflow mode interrupt */
	CLR_BIT(TIMSK, OCIE1A);
    32bc:	a9 e5       	ldi	r26, 0x59	; 89
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e9 e5       	ldi	r30, 0x59	; 89
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 81       	ld	r24, Z
    32c6:	8f 7e       	andi	r24, 0xEF	; 239
    32c8:	8c 93       	st	X, r24
}
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	08 95       	ret

000032d0 <TIMER1_voidOCB_InterruptEnable>:

/******************************************************************************
* Description 	: TIMER1 Output Compare B Interrupt Enable Function.		  *
******************************************************************************/

void TIMER1_voidOCB_InterruptEnable(void){
    32d0:	df 93       	push	r29
    32d2:	cf 93       	push	r28
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62

	/* Enable Output Compare B mode interrupt */
	SET_BIT(TIMSK, OCIE1B);
    32d8:	a9 e5       	ldi	r26, 0x59	; 89
    32da:	b0 e0       	ldi	r27, 0x00	; 0
    32dc:	e9 e5       	ldi	r30, 0x59	; 89
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	80 81       	ld	r24, Z
    32e2:	88 60       	ori	r24, 0x08	; 8
    32e4:	8c 93       	st	X, r24
}
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <TIMER1_voidOCB_InterruptDisable>:

/******************************************************************************
* Description 	: TIMER1 Output Compare B Interrupt Disable Function.		  *
******************************************************************************/

void TIMER1_voidOCB_InterruptDisable(void){
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62

	/* Disable Output Compare B mode interrupt */
	CLR_BIT(TIMSK, OCIE1B);
    32f4:	a9 e5       	ldi	r26, 0x59	; 89
    32f6:	b0 e0       	ldi	r27, 0x00	; 0
    32f8:	e9 e5       	ldi	r30, 0x59	; 89
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	87 7f       	andi	r24, 0xF7	; 247
    3300:	8c 93       	st	X, r24
}
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <TIMER1_voidOCB_SetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER1 OCB) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER1_voidOCB_SetCallBack(void(*Local_Fptr)(void)){
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	00 d0       	rcall	.+0      	; 0x330e <TIMER1_voidOCB_SetCallBack+0x6>
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	9a 83       	std	Y+2, r25	; 0x02
    3314:	89 83       	std	Y+1, r24	; 0x01

	/* Output Compare B CallBack function TIMER1 */
	TIMER1_OCB_CallBack = Local_Fptr;
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	9a 81       	ldd	r25, Y+2	; 0x02
    331a:	90 93 cb 01 	sts	0x01CB, r25
    331e:	80 93 ca 01 	sts	0x01CA, r24

}
    3322:	0f 90       	pop	r0
    3324:	0f 90       	pop	r0
    3326:	cf 91       	pop	r28
    3328:	df 91       	pop	r29
    332a:	08 95       	ret

0000332c <TIMER1_voidOCA_SetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER1 OCA) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER1_voidOCA_SetCallBack(void(*Local_Fptr)(void)){
    332c:	df 93       	push	r29
    332e:	cf 93       	push	r28
    3330:	00 d0       	rcall	.+0      	; 0x3332 <TIMER1_voidOCA_SetCallBack+0x6>
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	9a 83       	std	Y+2, r25	; 0x02
    3338:	89 83       	std	Y+1, r24	; 0x01

	/* Output Compare A CallBack function TIMER1 */
	TIMER1_OCA_CallBack = Local_Fptr;
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	9a 81       	ldd	r25, Y+2	; 0x02
    333e:	90 93 cd 01 	sts	0x01CD, r25
    3342:	80 93 cc 01 	sts	0x01CC, r24

}
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	08 95       	ret

00003350 <TIMER1_voidInputCaptureSetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER1 ICU) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER1_voidInputCaptureSetCallBack(void(*Local_Fptr)(void)){
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	00 d0       	rcall	.+0      	; 0x3356 <TIMER1_voidInputCaptureSetCallBack+0x6>
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	9a 83       	std	Y+2, r25	; 0x02
    335c:	89 83       	std	Y+1, r24	; 0x01

	/* Input Capture Unit CallBack function TIMER1 */
	TIMER1_InputCaptureCallBack = Local_Fptr;
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	9a 81       	ldd	r25, Y+2	; 0x02
    3362:	90 93 cf 01 	sts	0x01CF, r25
    3366:	80 93 ce 01 	sts	0x01CE, r24

}
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	cf 91       	pop	r28
    3370:	df 91       	pop	r29
    3372:	08 95       	ret

00003374 <TIMER1_voidOverflowSetCallBack>:
* Description 	: This function used to	communicate with the function in App  *
*                 Layer(The Callback function TIMER1 OVF) -                   *
*		          [ Layer Architecture Problem Solved ].                      *
******************************************************************************/

void TIMER1_voidOverflowSetCallBack(void(*Local_Fptr)(void)){
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	00 d0       	rcall	.+0      	; 0x337a <TIMER1_voidOverflowSetCallBack+0x6>
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	9a 83       	std	Y+2, r25	; 0x02
    3380:	89 83       	std	Y+1, r24	; 0x01

	/* Overflow CallBack function TIMER1 */
	TIMER1_OverflowCallBack = Local_Fptr;
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	9a 81       	ldd	r25, Y+2	; 0x02
    3386:	90 93 c9 01 	sts	0x01C9, r25
    338a:	80 93 c8 01 	sts	0x01C8, r24

}
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	08 95       	ret

00003398 <__vector_9>:

/******************************************************************************
* !comment  :  ISR Function Overflow interrupt.  						      *
******************************************************************************/

ISR(TIMER1_OVF_VECT){
    3398:	1f 92       	push	r1
    339a:	0f 92       	push	r0
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	0f 92       	push	r0
    33a0:	11 24       	eor	r1, r1
    33a2:	2f 93       	push	r18
    33a4:	3f 93       	push	r19
    33a6:	4f 93       	push	r20
    33a8:	5f 93       	push	r21
    33aa:	6f 93       	push	r22
    33ac:	7f 93       	push	r23
    33ae:	8f 93       	push	r24
    33b0:	9f 93       	push	r25
    33b2:	af 93       	push	r26
    33b4:	bf 93       	push	r27
    33b6:	ef 93       	push	r30
    33b8:	ff 93       	push	r31
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	cd b7       	in	r28, 0x3d	; 61
    33c0:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER1_OverflowCallBack){
    33c2:	80 91 c8 01 	lds	r24, 0x01C8
    33c6:	90 91 c9 01 	lds	r25, 0x01C9
    33ca:	00 97       	sbiw	r24, 0x00	; 0
    33cc:	29 f0       	breq	.+10     	; 0x33d8 <__vector_9+0x40>

		TIMER1_OverflowCallBack();
    33ce:	e0 91 c8 01 	lds	r30, 0x01C8
    33d2:	f0 91 c9 01 	lds	r31, 0x01C9
    33d6:	09 95       	icall
	}
	else{ /* return error */ }

}
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	ff 91       	pop	r31
    33de:	ef 91       	pop	r30
    33e0:	bf 91       	pop	r27
    33e2:	af 91       	pop	r26
    33e4:	9f 91       	pop	r25
    33e6:	8f 91       	pop	r24
    33e8:	7f 91       	pop	r23
    33ea:	6f 91       	pop	r22
    33ec:	5f 91       	pop	r21
    33ee:	4f 91       	pop	r20
    33f0:	3f 91       	pop	r19
    33f2:	2f 91       	pop	r18
    33f4:	0f 90       	pop	r0
    33f6:	0f be       	out	0x3f, r0	; 63
    33f8:	0f 90       	pop	r0
    33fa:	1f 90       	pop	r1
    33fc:	18 95       	reti

000033fe <__vector_7>:

/******************************************************************************
* !comment  :  ISR Function Output Compare A interrupt.  					  *
******************************************************************************/

ISR(TIMER1_OCA_VECT){
    33fe:	1f 92       	push	r1
    3400:	0f 92       	push	r0
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	0f 92       	push	r0
    3406:	11 24       	eor	r1, r1
    3408:	2f 93       	push	r18
    340a:	3f 93       	push	r19
    340c:	4f 93       	push	r20
    340e:	5f 93       	push	r21
    3410:	6f 93       	push	r22
    3412:	7f 93       	push	r23
    3414:	8f 93       	push	r24
    3416:	9f 93       	push	r25
    3418:	af 93       	push	r26
    341a:	bf 93       	push	r27
    341c:	ef 93       	push	r30
    341e:	ff 93       	push	r31
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER1_OCA_CallBack){
    3428:	80 91 cc 01 	lds	r24, 0x01CC
    342c:	90 91 cd 01 	lds	r25, 0x01CD
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	29 f0       	breq	.+10     	; 0x343e <__vector_7+0x40>

		TIMER1_OCA_CallBack();
    3434:	e0 91 cc 01 	lds	r30, 0x01CC
    3438:	f0 91 cd 01 	lds	r31, 0x01CD
    343c:	09 95       	icall
	}
	else{ /* return error */ }

}
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	ff 91       	pop	r31
    3444:	ef 91       	pop	r30
    3446:	bf 91       	pop	r27
    3448:	af 91       	pop	r26
    344a:	9f 91       	pop	r25
    344c:	8f 91       	pop	r24
    344e:	7f 91       	pop	r23
    3450:	6f 91       	pop	r22
    3452:	5f 91       	pop	r21
    3454:	4f 91       	pop	r20
    3456:	3f 91       	pop	r19
    3458:	2f 91       	pop	r18
    345a:	0f 90       	pop	r0
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	0f 90       	pop	r0
    3460:	1f 90       	pop	r1
    3462:	18 95       	reti

00003464 <__vector_8>:

/******************************************************************************
* !comment  :  ISR Function Output Compare B interrupt.  					  *
******************************************************************************/

ISR(TIMER1_OCB_VECT){
    3464:	1f 92       	push	r1
    3466:	0f 92       	push	r0
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	0f 92       	push	r0
    346c:	11 24       	eor	r1, r1
    346e:	2f 93       	push	r18
    3470:	3f 93       	push	r19
    3472:	4f 93       	push	r20
    3474:	5f 93       	push	r21
    3476:	6f 93       	push	r22
    3478:	7f 93       	push	r23
    347a:	8f 93       	push	r24
    347c:	9f 93       	push	r25
    347e:	af 93       	push	r26
    3480:	bf 93       	push	r27
    3482:	ef 93       	push	r30
    3484:	ff 93       	push	r31
    3486:	df 93       	push	r29
    3488:	cf 93       	push	r28
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER1_OCB_CallBack){
    348e:	80 91 ca 01 	lds	r24, 0x01CA
    3492:	90 91 cb 01 	lds	r25, 0x01CB
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	29 f0       	breq	.+10     	; 0x34a4 <__vector_8+0x40>

		TIMER1_OCB_CallBack();
    349a:	e0 91 ca 01 	lds	r30, 0x01CA
    349e:	f0 91 cb 01 	lds	r31, 0x01CB
    34a2:	09 95       	icall
	}
	else{ /* return error */ }

}
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	ff 91       	pop	r31
    34aa:	ef 91       	pop	r30
    34ac:	bf 91       	pop	r27
    34ae:	af 91       	pop	r26
    34b0:	9f 91       	pop	r25
    34b2:	8f 91       	pop	r24
    34b4:	7f 91       	pop	r23
    34b6:	6f 91       	pop	r22
    34b8:	5f 91       	pop	r21
    34ba:	4f 91       	pop	r20
    34bc:	3f 91       	pop	r19
    34be:	2f 91       	pop	r18
    34c0:	0f 90       	pop	r0
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	0f 90       	pop	r0
    34c6:	1f 90       	pop	r1
    34c8:	18 95       	reti

000034ca <__vector_6>:

/******************************************************************************
* !comment  :  ISR Function Input Capture Unit interrupt.  					  *
******************************************************************************/

ISR(TIMER1_ICU_VECT){
    34ca:	1f 92       	push	r1
    34cc:	0f 92       	push	r0
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	0f 92       	push	r0
    34d2:	11 24       	eor	r1, r1
    34d4:	2f 93       	push	r18
    34d6:	3f 93       	push	r19
    34d8:	4f 93       	push	r20
    34da:	5f 93       	push	r21
    34dc:	6f 93       	push	r22
    34de:	7f 93       	push	r23
    34e0:	8f 93       	push	r24
    34e2:	9f 93       	push	r25
    34e4:	af 93       	push	r26
    34e6:	bf 93       	push	r27
    34e8:	ef 93       	push	r30
    34ea:	ff 93       	push	r31
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	cd b7       	in	r28, 0x3d	; 61
    34f2:	de b7       	in	r29, 0x3e	; 62

	if(NULL != TIMER1_InputCaptureCallBack){
    34f4:	80 91 ce 01 	lds	r24, 0x01CE
    34f8:	90 91 cf 01 	lds	r25, 0x01CF
    34fc:	00 97       	sbiw	r24, 0x00	; 0
    34fe:	29 f0       	breq	.+10     	; 0x350a <__vector_6+0x40>

		TIMER1_InputCaptureCallBack();
    3500:	e0 91 ce 01 	lds	r30, 0x01CE
    3504:	f0 91 cf 01 	lds	r31, 0x01CF
    3508:	09 95       	icall
	}
	else{ /* return error */ }

}
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	ff 91       	pop	r31
    3510:	ef 91       	pop	r30
    3512:	bf 91       	pop	r27
    3514:	af 91       	pop	r26
    3516:	9f 91       	pop	r25
    3518:	8f 91       	pop	r24
    351a:	7f 91       	pop	r23
    351c:	6f 91       	pop	r22
    351e:	5f 91       	pop	r21
    3520:	4f 91       	pop	r20
    3522:	3f 91       	pop	r19
    3524:	2f 91       	pop	r18
    3526:	0f 90       	pop	r0
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	0f 90       	pop	r0
    352c:	1f 90       	pop	r1
    352e:	18 95       	reti

00003530 <main>:
static uint16 PeriodTicks = 0;
static uint16 OnTicks = 0;

void ICU_HW(void);

int main(void){
    3530:	df 93       	push	r29
    3532:	cf 93       	push	r28
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	2e 97       	sbiw	r28, 0x0e	; 14
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	f8 94       	cli
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(DIO_PIND0, DIO_OUTPUT);
    3544:	88 e1       	ldi	r24, 0x18	; 24
    3546:	61 e0       	ldi	r22, 0x01	; 1
    3548:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PINB3, DIO_OUTPUT);
    354c:	8b e0       	ldi	r24, 0x0B	; 11
    354e:	61 e0       	ldi	r22, 0x01	; 1
    3550:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_PIND6, DIO_INPUT ); 	/* ICU PIN */
    3554:	8e e1       	ldi	r24, 0x1E	; 30
    3556:	60 e0       	ldi	r22, 0x00	; 0
    3558:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>

	TIMER1_voidInputCaptureSetCallBack(&ICU_HW);
    355c:	81 e6       	ldi	r24, 0x61	; 97
    355e:	9b e1       	ldi	r25, 0x1B	; 27
    3560:	0e 94 a8 19 	call	0x3350	; 0x3350 <TIMER1_voidInputCaptureSetCallBack>
	ICU1_voidInit();
    3564:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <ICU1_voidInit>

	TIMER1_voidInit(TIMER1_NORMAL_MODE, TIMER1_SCALER_8);
    3568:	80 e0       	ldi	r24, 0x00	; 0
    356a:	62 e0       	ldi	r22, 0x02	; 2
    356c:	0e 94 4d 13 	call	0x269a	; 0x269a <TIMER1_voidInit>

	TIMER0_voidInit(TIMER0_FAST_PWM_MODE, TIMER0_SCALER_8);
    3570:	83 e0       	ldi	r24, 0x03	; 3
    3572:	62 e0       	ldi	r22, 0x02	; 2
    3574:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TIMER0_voidInit>
	TIMER0_voidOutputCompareInit(TIMER0_OC0_NON_INVERTING_MODE);
    3578:	82 e0       	ldi	r24, 0x02	; 2
    357a:	0e 94 cc 11 	call	0x2398	; 0x2398 <TIMER0_voidOutputCompareInit>
	TIMER0_voidSetOutputCompareValue(64);
    357e:	80 e4       	ldi	r24, 0x40	; 64
    3580:	0e 94 4b 12 	call	0x2496	; 0x2496 <TIMER0_voidSetOutputCompareValue>

	LCD_voidInit();
    3584:	0e 94 2d 0c 	call	0x185a	; 0x185a <LCD_voidInit>

	GIE_voidEnable();
    3588:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <GIE_voidEnable>

	while(1){

		/* Wait until period ticks and on ticks are measured */
		while((PeriodTicks == 0)&&(OnTicks == 0));
    358c:	80 91 d6 01 	lds	r24, 0x01D6
    3590:	90 91 d7 01 	lds	r25, 0x01D7
    3594:	00 97       	sbiw	r24, 0x00	; 0
    3596:	31 f4       	brne	.+12     	; 0x35a4 <main+0x74>
    3598:	80 91 d8 01 	lds	r24, 0x01D8
    359c:	90 91 d9 01 	lds	r25, 0x01D9
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	a1 f3       	breq	.-24     	; 0x358c <main+0x5c>

		LCD_voidSetPosition(0, 0);
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	60 e0       	ldi	r22, 0x00	; 0
    35a8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidSetPosition>
		LCD_voidWriteString("Period Time= ");
    35ac:	80 e6       	ldi	r24, 0x60	; 96
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_voidWriteString>
		LCD_voidWriteNumber(PeriodTicks);
    35b4:	80 91 d6 01 	lds	r24, 0x01D6
    35b8:	90 91 d7 01 	lds	r25, 0x01D7
    35bc:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_voidWriteNumber>

		LCD_voidSetPosition(1, 0);
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidSetPosition>
		LCD_voidWriteString("On Ticks = ");
    35c8:	8e e6       	ldi	r24, 0x6E	; 110
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_voidWriteString>
		LCD_voidWriteNumber(OnTicks);
    35d0:	80 91 d8 01 	lds	r24, 0x01D8
    35d4:	90 91 d9 01 	lds	r25, 0x01D9
    35d8:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_voidWriteNumber>
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	aa ef       	ldi	r26, 0xFA	; 250
    35e2:	b3 e4       	ldi	r27, 0x43	; 67
    35e4:	8b 87       	std	Y+11, r24	; 0x0b
    35e6:	9c 87       	std	Y+12, r25	; 0x0c
    35e8:	ad 87       	std	Y+13, r26	; 0x0d
    35ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	4a ef       	ldi	r20, 0xFA	; 250
    35fa:	54 e4       	ldi	r21, 0x44	; 68
    35fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	8f 83       	std	Y+7, r24	; 0x07
    3606:	98 87       	std	Y+8, r25	; 0x08
    3608:	a9 87       	std	Y+9, r26	; 0x09
    360a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    360c:	6f 81       	ldd	r22, Y+7	; 0x07
    360e:	78 85       	ldd	r23, Y+8	; 0x08
    3610:	89 85       	ldd	r24, Y+9	; 0x09
    3612:	9a 85       	ldd	r25, Y+10	; 0x0a
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e8       	ldi	r20, 0x80	; 128
    361a:	5f e3       	ldi	r21, 0x3F	; 63
    361c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3620:	88 23       	and	r24, r24
    3622:	2c f4       	brge	.+10     	; 0x362e <main+0xfe>
		__ticks = 1;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	9e 83       	std	Y+6, r25	; 0x06
    362a:	8d 83       	std	Y+5, r24	; 0x05
    362c:	3f c0       	rjmp	.+126    	; 0x36ac <main+0x17c>
	else if (__tmp > 65535)
    362e:	6f 81       	ldd	r22, Y+7	; 0x07
    3630:	78 85       	ldd	r23, Y+8	; 0x08
    3632:	89 85       	ldd	r24, Y+9	; 0x09
    3634:	9a 85       	ldd	r25, Y+10	; 0x0a
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	3f ef       	ldi	r19, 0xFF	; 255
    363a:	4f e7       	ldi	r20, 0x7F	; 127
    363c:	57 e4       	ldi	r21, 0x47	; 71
    363e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3642:	18 16       	cp	r1, r24
    3644:	4c f5       	brge	.+82     	; 0x3698 <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3646:	6b 85       	ldd	r22, Y+11	; 0x0b
    3648:	7c 85       	ldd	r23, Y+12	; 0x0c
    364a:	8d 85       	ldd	r24, Y+13	; 0x0d
    364c:	9e 85       	ldd	r25, Y+14	; 0x0e
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e2       	ldi	r20, 0x20	; 32
    3654:	51 e4       	ldi	r21, 0x41	; 65
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	bc 01       	movw	r22, r24
    3660:	cd 01       	movw	r24, r26
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	9e 83       	std	Y+6, r25	; 0x06
    366c:	8d 83       	std	Y+5, r24	; 0x05
    366e:	0f c0       	rjmp	.+30     	; 0x368e <main+0x15e>
    3670:	88 ec       	ldi	r24, 0xC8	; 200
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	9c 83       	std	Y+4, r25	; 0x04
    3676:	8b 83       	std	Y+3, r24	; 0x03
    3678:	8b 81       	ldd	r24, Y+3	; 0x03
    367a:	9c 81       	ldd	r25, Y+4	; 0x04
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	f1 f7       	brne	.-4      	; 0x367c <main+0x14c>
    3680:	9c 83       	std	Y+4, r25	; 0x04
    3682:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3684:	8d 81       	ldd	r24, Y+5	; 0x05
    3686:	9e 81       	ldd	r25, Y+6	; 0x06
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	9e 83       	std	Y+6, r25	; 0x06
    368c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368e:	8d 81       	ldd	r24, Y+5	; 0x05
    3690:	9e 81       	ldd	r25, Y+6	; 0x06
    3692:	00 97       	sbiw	r24, 0x00	; 0
    3694:	69 f7       	brne	.-38     	; 0x3670 <main+0x140>
    3696:	7a cf       	rjmp	.-268    	; 0x358c <main+0x5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3698:	6f 81       	ldd	r22, Y+7	; 0x07
    369a:	78 85       	ldd	r23, Y+8	; 0x08
    369c:	89 85       	ldd	r24, Y+9	; 0x09
    369e:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	9e 83       	std	Y+6, r25	; 0x06
    36aa:	8d 83       	std	Y+5, r24	; 0x05
    36ac:	8d 81       	ldd	r24, Y+5	; 0x05
    36ae:	9e 81       	ldd	r25, Y+6	; 0x06
    36b0:	9a 83       	std	Y+2, r25	; 0x02
    36b2:	89 83       	std	Y+1, r24	; 0x01
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	9a 81       	ldd	r25, Y+2	; 0x02
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <main+0x188>
    36bc:	9a 83       	std	Y+2, r25	; 0x02
    36be:	89 83       	std	Y+1, r24	; 0x01
    36c0:	65 cf       	rjmp	.-310    	; 0x358c <main+0x5c>

000036c2 <ICU_HW>:
	return 0;
}



void ICU_HW(void){
    36c2:	df 93       	push	r29
    36c4:	cf 93       	push	r28
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62

	static uint16 Reading1, Reading2, Reading3;
	static uint8 Counter = 0;
	Counter++;
    36ca:	80 91 da 01 	lds	r24, 0x01DA
    36ce:	8f 5f       	subi	r24, 0xFF	; 255
    36d0:	80 93 da 01 	sts	0x01DA, r24

	if(Counter == 1){
    36d4:	80 91 da 01 	lds	r24, 0x01DA
    36d8:	81 30       	cpi	r24, 0x01	; 1
    36da:	39 f4       	brne	.+14     	; 0x36ea <ICU_HW+0x28>

		Reading1 = ICU1_u16ReadInputCapture();
    36dc:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <ICU1_u16ReadInputCapture>
    36e0:	90 93 e0 01 	sts	0x01E0, r25
    36e4:	80 93 df 01 	sts	0x01DF, r24
    36e8:	3a c0       	rjmp	.+116    	; 0x375e <ICU_HW+0x9c>
	}
	else if(Counter == 2){
    36ea:	80 91 da 01 	lds	r24, 0x01DA
    36ee:	82 30       	cpi	r24, 0x02	; 2
    36f0:	d1 f4       	brne	.+52     	; 0x3726 <ICU_HW+0x64>

		Reading2 = ICU1_u16ReadInputCapture();
    36f2:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <ICU1_u16ReadInputCapture>
    36f6:	90 93 de 01 	sts	0x01DE, r25
    36fa:	80 93 dd 01 	sts	0x01DD, r24
		PeriodTicks = Reading2 - Reading1;
    36fe:	20 91 dd 01 	lds	r18, 0x01DD
    3702:	30 91 de 01 	lds	r19, 0x01DE
    3706:	80 91 df 01 	lds	r24, 0x01DF
    370a:	90 91 e0 01 	lds	r25, 0x01E0
    370e:	a9 01       	movw	r20, r18
    3710:	48 1b       	sub	r20, r24
    3712:	59 0b       	sbc	r21, r25
    3714:	ca 01       	movw	r24, r20
    3716:	90 93 d7 01 	sts	0x01D7, r25
    371a:	80 93 d6 01 	sts	0x01D6, r24
		ICU1_voidSetTriggerEdge(ICU_FALLING_EDGE);
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <ICU1_voidSetTriggerEdge>
    3724:	1c c0       	rjmp	.+56     	; 0x375e <ICU_HW+0x9c>
	}
	else if(Counter == 3){
    3726:	80 91 da 01 	lds	r24, 0x01DA
    372a:	83 30       	cpi	r24, 0x03	; 3
    372c:	c1 f4       	brne	.+48     	; 0x375e <ICU_HW+0x9c>

		Reading3 = ICU1_u16ReadInputCapture();
    372e:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <ICU1_u16ReadInputCapture>
    3732:	90 93 dc 01 	sts	0x01DC, r25
    3736:	80 93 db 01 	sts	0x01DB, r24
		OnTicks = Reading3 - Reading2;
    373a:	20 91 db 01 	lds	r18, 0x01DB
    373e:	30 91 dc 01 	lds	r19, 0x01DC
    3742:	80 91 dd 01 	lds	r24, 0x01DD
    3746:	90 91 de 01 	lds	r25, 0x01DE
    374a:	a9 01       	movw	r20, r18
    374c:	48 1b       	sub	r20, r24
    374e:	59 0b       	sbc	r21, r25
    3750:	ca 01       	movw	r24, r20
    3752:	90 93 d9 01 	sts	0x01D9, r25
    3756:	80 93 d8 01 	sts	0x01D8, r24
		TIMER1_voidInputCaptureInterruptDisable();
    375a:	0e 94 22 19 	call	0x3244	; 0x3244 <TIMER1_voidInputCaptureInterruptDisable>

	}

}
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	08 95       	ret

00003764 <__mulsi3>:
    3764:	62 9f       	mul	r22, r18
    3766:	d0 01       	movw	r26, r0
    3768:	73 9f       	mul	r23, r19
    376a:	f0 01       	movw	r30, r0
    376c:	82 9f       	mul	r24, r18
    376e:	e0 0d       	add	r30, r0
    3770:	f1 1d       	adc	r31, r1
    3772:	64 9f       	mul	r22, r20
    3774:	e0 0d       	add	r30, r0
    3776:	f1 1d       	adc	r31, r1
    3778:	92 9f       	mul	r25, r18
    377a:	f0 0d       	add	r31, r0
    377c:	83 9f       	mul	r24, r19
    377e:	f0 0d       	add	r31, r0
    3780:	74 9f       	mul	r23, r20
    3782:	f0 0d       	add	r31, r0
    3784:	65 9f       	mul	r22, r21
    3786:	f0 0d       	add	r31, r0
    3788:	99 27       	eor	r25, r25
    378a:	72 9f       	mul	r23, r18
    378c:	b0 0d       	add	r27, r0
    378e:	e1 1d       	adc	r30, r1
    3790:	f9 1f       	adc	r31, r25
    3792:	63 9f       	mul	r22, r19
    3794:	b0 0d       	add	r27, r0
    3796:	e1 1d       	adc	r30, r1
    3798:	f9 1f       	adc	r31, r25
    379a:	bd 01       	movw	r22, r26
    379c:	cf 01       	movw	r24, r30
    379e:	11 24       	eor	r1, r1
    37a0:	08 95       	ret

000037a2 <__udivmodhi4>:
    37a2:	aa 1b       	sub	r26, r26
    37a4:	bb 1b       	sub	r27, r27
    37a6:	51 e1       	ldi	r21, 0x11	; 17
    37a8:	07 c0       	rjmp	.+14     	; 0x37b8 <__udivmodhi4_ep>

000037aa <__udivmodhi4_loop>:
    37aa:	aa 1f       	adc	r26, r26
    37ac:	bb 1f       	adc	r27, r27
    37ae:	a6 17       	cp	r26, r22
    37b0:	b7 07       	cpc	r27, r23
    37b2:	10 f0       	brcs	.+4      	; 0x37b8 <__udivmodhi4_ep>
    37b4:	a6 1b       	sub	r26, r22
    37b6:	b7 0b       	sbc	r27, r23

000037b8 <__udivmodhi4_ep>:
    37b8:	88 1f       	adc	r24, r24
    37ba:	99 1f       	adc	r25, r25
    37bc:	5a 95       	dec	r21
    37be:	a9 f7       	brne	.-22     	; 0x37aa <__udivmodhi4_loop>
    37c0:	80 95       	com	r24
    37c2:	90 95       	com	r25
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	08 95       	ret

000037ca <__udivmodsi4>:
    37ca:	a1 e2       	ldi	r26, 0x21	; 33
    37cc:	1a 2e       	mov	r1, r26
    37ce:	aa 1b       	sub	r26, r26
    37d0:	bb 1b       	sub	r27, r27
    37d2:	fd 01       	movw	r30, r26
    37d4:	0d c0       	rjmp	.+26     	; 0x37f0 <__udivmodsi4_ep>

000037d6 <__udivmodsi4_loop>:
    37d6:	aa 1f       	adc	r26, r26
    37d8:	bb 1f       	adc	r27, r27
    37da:	ee 1f       	adc	r30, r30
    37dc:	ff 1f       	adc	r31, r31
    37de:	a2 17       	cp	r26, r18
    37e0:	b3 07       	cpc	r27, r19
    37e2:	e4 07       	cpc	r30, r20
    37e4:	f5 07       	cpc	r31, r21
    37e6:	20 f0       	brcs	.+8      	; 0x37f0 <__udivmodsi4_ep>
    37e8:	a2 1b       	sub	r26, r18
    37ea:	b3 0b       	sbc	r27, r19
    37ec:	e4 0b       	sbc	r30, r20
    37ee:	f5 0b       	sbc	r31, r21

000037f0 <__udivmodsi4_ep>:
    37f0:	66 1f       	adc	r22, r22
    37f2:	77 1f       	adc	r23, r23
    37f4:	88 1f       	adc	r24, r24
    37f6:	99 1f       	adc	r25, r25
    37f8:	1a 94       	dec	r1
    37fa:	69 f7       	brne	.-38     	; 0x37d6 <__udivmodsi4_loop>
    37fc:	60 95       	com	r22
    37fe:	70 95       	com	r23
    3800:	80 95       	com	r24
    3802:	90 95       	com	r25
    3804:	9b 01       	movw	r18, r22
    3806:	ac 01       	movw	r20, r24
    3808:	bd 01       	movw	r22, r26
    380a:	cf 01       	movw	r24, r30
    380c:	08 95       	ret

0000380e <__prologue_saves__>:
    380e:	2f 92       	push	r2
    3810:	3f 92       	push	r3
    3812:	4f 92       	push	r4
    3814:	5f 92       	push	r5
    3816:	6f 92       	push	r6
    3818:	7f 92       	push	r7
    381a:	8f 92       	push	r8
    381c:	9f 92       	push	r9
    381e:	af 92       	push	r10
    3820:	bf 92       	push	r11
    3822:	cf 92       	push	r12
    3824:	df 92       	push	r13
    3826:	ef 92       	push	r14
    3828:	ff 92       	push	r15
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	ca 1b       	sub	r28, r26
    3838:	db 0b       	sbc	r29, r27
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	09 94       	ijmp

00003846 <__epilogue_restores__>:
    3846:	2a 88       	ldd	r2, Y+18	; 0x12
    3848:	39 88       	ldd	r3, Y+17	; 0x11
    384a:	48 88       	ldd	r4, Y+16	; 0x10
    384c:	5f 84       	ldd	r5, Y+15	; 0x0f
    384e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3850:	7d 84       	ldd	r7, Y+13	; 0x0d
    3852:	8c 84       	ldd	r8, Y+12	; 0x0c
    3854:	9b 84       	ldd	r9, Y+11	; 0x0b
    3856:	aa 84       	ldd	r10, Y+10	; 0x0a
    3858:	b9 84       	ldd	r11, Y+9	; 0x09
    385a:	c8 84       	ldd	r12, Y+8	; 0x08
    385c:	df 80       	ldd	r13, Y+7	; 0x07
    385e:	ee 80       	ldd	r14, Y+6	; 0x06
    3860:	fd 80       	ldd	r15, Y+5	; 0x05
    3862:	0c 81       	ldd	r16, Y+4	; 0x04
    3864:	1b 81       	ldd	r17, Y+3	; 0x03
    3866:	aa 81       	ldd	r26, Y+2	; 0x02
    3868:	b9 81       	ldd	r27, Y+1	; 0x01
    386a:	ce 0f       	add	r28, r30
    386c:	d1 1d       	adc	r29, r1
    386e:	0f b6       	in	r0, 0x3f	; 63
    3870:	f8 94       	cli
    3872:	de bf       	out	0x3e, r29	; 62
    3874:	0f be       	out	0x3f, r0	; 63
    3876:	cd bf       	out	0x3d, r28	; 61
    3878:	ed 01       	movw	r28, r26
    387a:	08 95       	ret

0000387c <_exit>:
    387c:	f8 94       	cli

0000387e <__stop_program>:
    387e:	ff cf       	rjmp	.-2      	; 0x387e <__stop_program>
