
ADC11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00002c18  00002cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800180  00800180  00002dcc  2**0
                  ALLOC
  3 .stab         00002244  00000000  00000000  00002dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d88  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000612a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008535  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000098bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000aa94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ac54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000af4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d5 14 	call	0x29aa	; 0x29aa <main>
      8a:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e7       	ldi	r22, 0x77	; 119
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e1 58       	subi	r30, 0x81	; 129
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
#include "ADC_config.h"


void (*ADC_CallBack)(void) = NULL;

void ADC_voidInit(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(ADMUX, REFS1);

	#elif VOLTAGE_REF == AVCC

		/* Select Verf = AVCC */
		SET_BIT(ADMUX, REFS0);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24


	#if ADJUST_RESULT == RIGHT_ADJUST

		/* select right adjust result */
		CLR_BIT(ADMUX, ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA, ADPS2);

	#elif PRESCALER == DIV_FACTOR_8

		/* Prescaler Select DIV 8 */
		SET_BIT(ADCSRA, ADPS0);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	8c 93       	st	X, r24
		SET_BIT(ADCSRA, ADPS1);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA, ADPS2);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8b 7f       	andi	r24, 0xFB	; 251
     e88:	8c 93       	st	X, r24
		#endif

	#elif AUTO_TRIGGER == AUTO_TRIGGER_DISABLE

		/* disable of trigger & Select single conversion */
		CLR_BIT(ADCSRA, ADATE);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8f 7d       	andi	r24, 0xDF	; 223
     e96:	8c 93       	st	X, r24
	#else
		#error("You Chose Wrong ADC Auto Trigger!")
	#endif

	/* ADC interrupt disable */
	CLR_BIT(ADCSRA, ADIE);
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	87 7f       	andi	r24, 0xF7	; 247
     ea4:	8c 93       	st	X, r24

	/* Enable ADC */
	SET_BIT(ADCSRA, ADEN);
     ea6:	a6 e2       	ldi	r26, 0x26	; 38
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e6 e2       	ldi	r30, 0x26	; 38
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 68       	ori	r24, 0x80	; 128
     eb2:	8c 93       	st	X, r24

}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <ADC_u16ReadValue>:



uint16 ADC_u16ReadValue(uint8 Copy_u8ChannelNumber){
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	89 83       	std	Y+1, r24	; 0x01
	
	/* channel number must be from A0 --> A7 */
	Copy_u8ChannelNumber &= 0x07;
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	87 70       	andi	r24, 0x07	; 7
     eca:	89 83       	std	Y+1, r24	; 0x01

	/* clear first 5 bits in the ADMUX (channel number MUX4:0 bits)
	   before set the required channel */
	ADMUX &= 0xE0;
     ecc:	a7 e2       	ldi	r26, 0x27	; 39
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e7 e2       	ldi	r30, 0x27	; 39
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	80 7e       	andi	r24, 0xE0	; 224
     ed8:	8c 93       	st	X, r24

	/* choose the correct channel by setting the channel number in MUX4:0 bits */
	ADMUX |= Copy_u8ChannelNumber;
     eda:	a7 e2       	ldi	r26, 0x27	; 39
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e7 e2       	ldi	r30, 0x27	; 39
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	90 81       	ld	r25, Z
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	89 2b       	or	r24, r25
     ee8:	8c 93       	st	X, r24

	/* Start conversion */
	SET_BIT(ADCSRA, ADSC);
     eea:	a6 e2       	ldi	r26, 0x26	; 38
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e6 e2       	ldi	r30, 0x26	; 38
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	80 64       	ori	r24, 0x40	; 64
     ef6:	8c 93       	st	X, r24
	
	/* Wait until end conversion */
	while(0 == GET_BIT(ADCSRA, ADIF));
     ef8:	e6 e2       	ldi	r30, 0x26	; 38
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	82 95       	swap	r24
     f00:	8f 70       	andi	r24, 0x0F	; 15
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	81 70       	andi	r24, 0x01	; 1
     f08:	90 70       	andi	r25, 0x00	; 0
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	a9 f3       	breq	.-22     	; 0xef8 <ADC_u16ReadValue+0x3e>
	
	/* Clear ADC interrupt flag */
	SET_BIT(ADCSRA, ADIF);
     f0e:	a6 e2       	ldi	r26, 0x26	; 38
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e6 e2       	ldi	r30, 0x26	; 38
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 61       	ori	r24, 0x10	; 16
     f1a:	8c 93       	st	X, r24

	/* return data */
	return ADC;
     f1c:	e4 e2       	ldi	r30, 0x24	; 36
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	91 81       	ldd	r25, Z+1	; 0x01

}
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <ADC_u16GetValue>:



void ADC_u16GetValue(uint8 Copy_u8ChannelNumber){
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	0f 92       	push	r0
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	89 83       	std	Y+1, r24	; 0x01

	/* channel number must be from A0 --> A7 */
	Copy_u8ChannelNumber &= 0x07;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	87 70       	andi	r24, 0x07	; 7
     f3c:	89 83       	std	Y+1, r24	; 0x01

	/* clear first 5 bits in the ADMUX (channel number MUX4:0 bits)
	   before set the required channel */
	ADMUX &= 0xE0;
     f3e:	a7 e2       	ldi	r26, 0x27	; 39
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e2       	ldi	r30, 0x27	; 39
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 7e       	andi	r24, 0xE0	; 224
     f4a:	8c 93       	st	X, r24

	/* choose the correct channel by setting the channel number in MUX4:0 bits */
	ADMUX |= Copy_u8ChannelNumber;
     f4c:	a7 e2       	ldi	r26, 0x27	; 39
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e7 e2       	ldi	r30, 0x27	; 39
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	90 81       	ld	r25, Z
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	89 2b       	or	r24, r25
     f5a:	8c 93       	st	X, r24

	/* Start conversion */
	SET_BIT(ADCSRA, ADSC);
     f5c:	a6 e2       	ldi	r26, 0x26	; 38
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e6 e2       	ldi	r30, 0x26	; 38
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	80 64       	ori	r24, 0x40	; 64
     f68:	8c 93       	st	X, r24

}
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <ADC_voidEnableInterrupt>:



void ADC_voidEnableInterrupt(void){
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62

	/* ADC interrupt Enable */
	SET_BIT(ADCSRA, ADIE);
     f7a:	a6 e2       	ldi	r26, 0x26	; 38
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e6 e2       	ldi	r30, 0x26	; 38
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	88 60       	ori	r24, 0x08	; 8
     f86:	8c 93       	st	X, r24
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <ADC_voidDisableInterrupt>:



void ADC_voidDisableInterrupt(void){
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62

	/* ADC interrupt Disable */
	CLR_BIT(ADCSRA, ADIE);
     f96:	a6 e2       	ldi	r26, 0x26	; 38
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e6 e2       	ldi	r30, 0x26	; 38
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	87 7f       	andi	r24, 0xF7	; 247
     fa2:	8c 93       	st	X, r24
}
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <ADC_voidSetCallBack>:



/* CallBack function ADC  */
void ADC_voidSetCallBack(void(*Local_ptr)(void)){
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <ADC_voidSetCallBack+0x6>
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01

	ADC_CallBack = Local_ptr;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	90 93 81 01 	sts	0x0181, r25
     fc0:	80 93 80 01 	sts	0x0180, r24

}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <__vector_16>:




/* ISR Function ADC */
ISR( ADC_VECTOR ){
     fce:	1f 92       	push	r1
     fd0:	0f 92       	push	r0
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	0f 92       	push	r0
     fd6:	11 24       	eor	r1, r1
     fd8:	2f 93       	push	r18
     fda:	3f 93       	push	r19
     fdc:	4f 93       	push	r20
     fde:	5f 93       	push	r21
     fe0:	6f 93       	push	r22
     fe2:	7f 93       	push	r23
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
     fec:	ef 93       	push	r30
     fee:	ff 93       	push	r31
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62

	ADC_CallBack();
     ff8:	e0 91 80 01 	lds	r30, 0x0180
     ffc:	f0 91 81 01 	lds	r31, 0x0181
    1000:	09 95       	icall

}
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	ff 91       	pop	r31
    1008:	ef 91       	pop	r30
    100a:	bf 91       	pop	r27
    100c:	af 91       	pop	r26
    100e:	9f 91       	pop	r25
    1010:	8f 91       	pop	r24
    1012:	7f 91       	pop	r23
    1014:	6f 91       	pop	r22
    1016:	5f 91       	pop	r21
    1018:	4f 91       	pop	r20
    101a:	3f 91       	pop	r19
    101c:	2f 91       	pop	r18
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Mode){
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	27 97       	sbiw	r28, 0x07	; 7
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	6a 83       	std	Y+2, r22	; 0x02
    1040:	4b 83       	std	Y+3, r20	; 0x03

	if(OUTPUT == Copy_u8Mode){
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	09 f0       	breq	.+2      	; 0x104a <DIO_voidSetPinDirection+0x22>
    1048:	6f c0       	rjmp	.+222    	; 0x1128 <DIO_voidSetPinDirection+0x100>
	
		switch(Copy_u8Port){
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	3f 83       	std	Y+7, r19	; 0x07
    1052:	2e 83       	std	Y+6, r18	; 0x06
    1054:	8e 81       	ldd	r24, Y+6	; 0x06
    1056:	9f 81       	ldd	r25, Y+7	; 0x07
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	91 05       	cpc	r25, r1
    105c:	49 f1       	breq	.+82     	; 0x10b0 <DIO_voidSetPinDirection+0x88>
    105e:	2e 81       	ldd	r18, Y+6	; 0x06
    1060:	3f 81       	ldd	r19, Y+7	; 0x07
    1062:	22 30       	cpi	r18, 0x02	; 2
    1064:	31 05       	cpc	r19, r1
    1066:	2c f4       	brge	.+10     	; 0x1072 <DIO_voidSetPinDirection+0x4a>
    1068:	8e 81       	ldd	r24, Y+6	; 0x06
    106a:	9f 81       	ldd	r25, Y+7	; 0x07
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	61 f0       	breq	.+24     	; 0x1088 <DIO_voidSetPinDirection+0x60>
    1070:	d2 c0       	rjmp	.+420    	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
    1072:	2e 81       	ldd	r18, Y+6	; 0x06
    1074:	3f 81       	ldd	r19, Y+7	; 0x07
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	71 f1       	breq	.+92     	; 0x10d8 <DIO_voidSetPinDirection+0xb0>
    107c:	8e 81       	ldd	r24, Y+6	; 0x06
    107e:	9f 81       	ldd	r25, Y+7	; 0x07
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	91 05       	cpc	r25, r1
    1084:	e9 f1       	breq	.+122    	; 0x1100 <DIO_voidSetPinDirection+0xd8>
    1086:	c7 c0       	rjmp	.+398    	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
		
			case PORT_A:	SET_BIT(DDRA, Copy_u8Pin);		break;
    1088:	aa e3       	ldi	r26, 0x3A	; 58
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ea e3       	ldi	r30, 0x3A	; 58
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_voidSetPinDirection+0x7e>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_voidSetPinDirection+0x7a>
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	b3 c0       	rjmp	.+358    	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
			case PORT_B:	SET_BIT(DDRB, Copy_u8Pin);		break;
    10b0:	a7 e3       	ldi	r26, 0x37	; 55
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e7 e3       	ldi	r30, 0x37	; 55
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_voidSetPinDirection+0xa6>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_voidSetPinDirection+0xa2>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	9f c0       	rjmp	.+318    	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
			case PORT_C:	SET_BIT(DDRC, Copy_u8Pin);		break;
    10d8:	a4 e3       	ldi	r26, 0x34	; 52
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e4 e3       	ldi	r30, 0x34	; 52
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_voidSetPinDirection+0xce>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_voidSetPinDirection+0xca>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	8b c0       	rjmp	.+278    	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
			case PORT_D:	SET_BIT(DDRD, Copy_u8Pin);		break;
    1100:	a1 e3       	ldi	r26, 0x31	; 49
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e1 e3       	ldi	r30, 0x31	; 49
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_voidSetPinDirection+0xf6>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_voidSetPinDirection+0xf2>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	77 c0       	rjmp	.+238    	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
			
		}
	}
	
	else if(INPUT == Copy_u8Mode){
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	88 23       	and	r24, r24
    112c:	09 f0       	breq	.+2      	; 0x1130 <DIO_voidSetPinDirection+0x108>
    112e:	73 c0       	rjmp	.+230    	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
	
		switch(Copy_u8Port){
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3d 83       	std	Y+5, r19	; 0x05
    1138:	2c 83       	std	Y+4, r18	; 0x04
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	59 f1       	breq	.+86     	; 0x119a <DIO_voidSetPinDirection+0x172>
    1144:	2c 81       	ldd	r18, Y+4	; 0x04
    1146:	3d 81       	ldd	r19, Y+5	; 0x05
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	2c f4       	brge	.+10     	; 0x1158 <DIO_voidSetPinDirection+0x130>
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	9d 81       	ldd	r25, Y+5	; 0x05
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	69 f0       	breq	.+26     	; 0x1170 <DIO_voidSetPinDirection+0x148>
    1156:	5f c0       	rjmp	.+190    	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
    1158:	2c 81       	ldd	r18, Y+4	; 0x04
    115a:	3d 81       	ldd	r19, Y+5	; 0x05
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	89 f1       	breq	.+98     	; 0x11c4 <DIO_voidSetPinDirection+0x19c>
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	91 05       	cpc	r25, r1
    116a:	09 f4       	brne	.+2      	; 0x116e <DIO_voidSetPinDirection+0x146>
    116c:	40 c0       	rjmp	.+128    	; 0x11ee <DIO_voidSetPinDirection+0x1c6>
    116e:	53 c0       	rjmp	.+166    	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
		
			case PORT_A:	CLR_BIT(DDRA, Copy_u8Pin);		break;
    1170:	aa e3       	ldi	r26, 0x3A	; 58
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ea e3       	ldi	r30, 0x3A	; 58
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_voidSetPinDirection+0x166>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_voidSetPinDirection+0x162>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	3e c0       	rjmp	.+124    	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
			case PORT_B:	CLR_BIT(DDRB, Copy_u8Pin);		break;
    119a:	a7 e3       	ldi	r26, 0x37	; 55
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e7 e3       	ldi	r30, 0x37	; 55
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_voidSetPinDirection+0x190>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_voidSetPinDirection+0x18c>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	29 c0       	rjmp	.+82     	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
			case PORT_C:	CLR_BIT(DDRC, Copy_u8Pin);		break;
    11c4:	a4 e3       	ldi	r26, 0x34	; 52
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e4 e3       	ldi	r30, 0x34	; 52
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_voidSetPinDirection+0x1ba>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_voidSetPinDirection+0x1b6>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	14 c0       	rjmp	.+40     	; 0x1216 <DIO_voidSetPinDirection+0x1ee>
			case PORT_D:	CLR_BIT(DDRD, Copy_u8Pin);		break;
    11ee:	a1 e3       	ldi	r26, 0x31	; 49
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e1 e3       	ldi	r30, 0x31	; 49
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_voidSetPinDirection+0x1e4>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_voidSetPinDirection+0x1e0>
    1210:	80 95       	com	r24
    1212:	84 23       	and	r24, r20
    1214:	8c 93       	st	X, r24
		}
	}
	
	else{    /* return error  */   }
	
}
    1216:	27 96       	adiw	r28, 0x07	; 7
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value){
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	27 97       	sbiw	r28, 0x07	; 7
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	6a 83       	std	Y+2, r22	; 0x02
    1240:	4b 83       	std	Y+3, r20	; 0x03

	if(HIGH == Copy_u8Value){
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	09 f0       	breq	.+2      	; 0x124a <DIO_voidSetPinValue+0x22>
    1248:	6f c0       	rjmp	.+222    	; 0x1328 <DIO_voidSetPinValue+0x100>
	
		switch(Copy_u8Port){
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	3f 83       	std	Y+7, r19	; 0x07
    1252:	2e 83       	std	Y+6, r18	; 0x06
    1254:	8e 81       	ldd	r24, Y+6	; 0x06
    1256:	9f 81       	ldd	r25, Y+7	; 0x07
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	91 05       	cpc	r25, r1
    125c:	49 f1       	breq	.+82     	; 0x12b0 <DIO_voidSetPinValue+0x88>
    125e:	2e 81       	ldd	r18, Y+6	; 0x06
    1260:	3f 81       	ldd	r19, Y+7	; 0x07
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	2c f4       	brge	.+10     	; 0x1272 <DIO_voidSetPinValue+0x4a>
    1268:	8e 81       	ldd	r24, Y+6	; 0x06
    126a:	9f 81       	ldd	r25, Y+7	; 0x07
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	61 f0       	breq	.+24     	; 0x1288 <DIO_voidSetPinValue+0x60>
    1270:	d2 c0       	rjmp	.+420    	; 0x1416 <DIO_voidSetPinValue+0x1ee>
    1272:	2e 81       	ldd	r18, Y+6	; 0x06
    1274:	3f 81       	ldd	r19, Y+7	; 0x07
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	71 f1       	breq	.+92     	; 0x12d8 <DIO_voidSetPinValue+0xb0>
    127c:	8e 81       	ldd	r24, Y+6	; 0x06
    127e:	9f 81       	ldd	r25, Y+7	; 0x07
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	91 05       	cpc	r25, r1
    1284:	e9 f1       	breq	.+122    	; 0x1300 <DIO_voidSetPinValue+0xd8>
    1286:	c7 c0       	rjmp	.+398    	; 0x1416 <DIO_voidSetPinValue+0x1ee>
		
			case PORT_A:	SET_BIT(PORTA, Copy_u8Pin);		break;
    1288:	ab e3       	ldi	r26, 0x3B	; 59
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	eb e3       	ldi	r30, 0x3B	; 59
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_voidSetPinValue+0x7e>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_voidSetPinValue+0x7a>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	b3 c0       	rjmp	.+358    	; 0x1416 <DIO_voidSetPinValue+0x1ee>
			case PORT_B:	SET_BIT(PORTB, Copy_u8Pin);		break;
    12b0:	a8 e3       	ldi	r26, 0x38	; 56
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e8 e3       	ldi	r30, 0x38	; 56
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_voidSetPinValue+0xa6>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_voidSetPinValue+0xa2>
    12d2:	84 2b       	or	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	9f c0       	rjmp	.+318    	; 0x1416 <DIO_voidSetPinValue+0x1ee>
			case PORT_C:	SET_BIT(PORTC, Copy_u8Pin);		break;
    12d8:	a5 e3       	ldi	r26, 0x35	; 53
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e5 e3       	ldi	r30, 0x35	; 53
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_voidSetPinValue+0xce>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_voidSetPinValue+0xca>
    12fa:	84 2b       	or	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	8b c0       	rjmp	.+278    	; 0x1416 <DIO_voidSetPinValue+0x1ee>
			case PORT_D:	SET_BIT(PORTD, Copy_u8Pin);		break;
    1300:	a2 e3       	ldi	r26, 0x32	; 50
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e2 e3       	ldi	r30, 0x32	; 50
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_voidSetPinValue+0xf6>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <DIO_voidSetPinValue+0xf2>
    1322:	84 2b       	or	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	77 c0       	rjmp	.+238    	; 0x1416 <DIO_voidSetPinValue+0x1ee>
			
		}
	}
	
	else if(LOW == Copy_u8Value){
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	88 23       	and	r24, r24
    132c:	09 f0       	breq	.+2      	; 0x1330 <DIO_voidSetPinValue+0x108>
    132e:	73 c0       	rjmp	.+230    	; 0x1416 <DIO_voidSetPinValue+0x1ee>
	
		switch(Copy_u8Port){
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	3d 83       	std	Y+5, r19	; 0x05
    1338:	2c 83       	std	Y+4, r18	; 0x04
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	91 05       	cpc	r25, r1
    1342:	59 f1       	breq	.+86     	; 0x139a <DIO_voidSetPinValue+0x172>
    1344:	2c 81       	ldd	r18, Y+4	; 0x04
    1346:	3d 81       	ldd	r19, Y+5	; 0x05
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	2c f4       	brge	.+10     	; 0x1358 <DIO_voidSetPinValue+0x130>
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	69 f0       	breq	.+26     	; 0x1370 <DIO_voidSetPinValue+0x148>
    1356:	5f c0       	rjmp	.+190    	; 0x1416 <DIO_voidSetPinValue+0x1ee>
    1358:	2c 81       	ldd	r18, Y+4	; 0x04
    135a:	3d 81       	ldd	r19, Y+5	; 0x05
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	89 f1       	breq	.+98     	; 0x13c4 <DIO_voidSetPinValue+0x19c>
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	91 05       	cpc	r25, r1
    136a:	09 f4       	brne	.+2      	; 0x136e <DIO_voidSetPinValue+0x146>
    136c:	40 c0       	rjmp	.+128    	; 0x13ee <DIO_voidSetPinValue+0x1c6>
    136e:	53 c0       	rjmp	.+166    	; 0x1416 <DIO_voidSetPinValue+0x1ee>
		
			case PORT_A:	CLR_BIT(PORTA, Copy_u8Pin);		break;
    1370:	ab e3       	ldi	r26, 0x3B	; 59
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	eb e3       	ldi	r30, 0x3B	; 59
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_voidSetPinValue+0x166>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_voidSetPinValue+0x162>
    1392:	80 95       	com	r24
    1394:	84 23       	and	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	3e c0       	rjmp	.+124    	; 0x1416 <DIO_voidSetPinValue+0x1ee>
			case PORT_B:	CLR_BIT(PORTB, Copy_u8Pin);		break;
    139a:	a8 e3       	ldi	r26, 0x38	; 56
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e8 e3       	ldi	r30, 0x38	; 56
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_voidSetPinValue+0x190>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_voidSetPinValue+0x18c>
    13bc:	80 95       	com	r24
    13be:	84 23       	and	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	29 c0       	rjmp	.+82     	; 0x1416 <DIO_voidSetPinValue+0x1ee>
			case PORT_C:	CLR_BIT(PORTC, Copy_u8Pin);		break;
    13c4:	a5 e3       	ldi	r26, 0x35	; 53
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e5 e3       	ldi	r30, 0x35	; 53
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_voidSetPinValue+0x1ba>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_voidSetPinValue+0x1b6>
    13e6:	80 95       	com	r24
    13e8:	84 23       	and	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <DIO_voidSetPinValue+0x1ee>
			case PORT_D:	CLR_BIT(PORTD, Copy_u8Pin);		break;
    13ee:	a2 e3       	ldi	r26, 0x32	; 50
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e2 e3       	ldi	r30, 0x32	; 50
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_voidSetPinValue+0x1e4>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_voidSetPinValue+0x1e0>
    1410:	80 95       	com	r24
    1412:	84 23       	and	r24, r20
    1414:	8c 93       	st	X, r24
		}
	}
	
	else{    /* return error  */   }
	
}
    1416:	27 96       	adiw	r28, 0x07	; 7
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <DIO_u8GetPinValue>:



uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin){
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <DIO_u8GetPinValue+0x6>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <DIO_u8GetPinValue+0x8>
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	8a 83       	std	Y+2, r24	; 0x02
    1438:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8Result = 0; 
    143a:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){ 
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3d 83       	std	Y+5, r19	; 0x05
    1444:	2c 83       	std	Y+4, r18	; 0x04
    1446:	4c 81       	ldd	r20, Y+4	; 0x04
    1448:	5d 81       	ldd	r21, Y+5	; 0x05
    144a:	41 30       	cpi	r20, 0x01	; 1
    144c:	51 05       	cpc	r21, r1
    144e:	41 f1       	breq	.+80     	; 0x14a0 <DIO_u8GetPinValue+0x78>
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	91 05       	cpc	r25, r1
    1458:	34 f4       	brge	.+12     	; 0x1466 <DIO_u8GetPinValue+0x3e>
    145a:	2c 81       	ldd	r18, Y+4	; 0x04
    145c:	3d 81       	ldd	r19, Y+5	; 0x05
    145e:	21 15       	cp	r18, r1
    1460:	31 05       	cpc	r19, r1
    1462:	61 f0       	breq	.+24     	; 0x147c <DIO_u8GetPinValue+0x54>
    1464:	52 c0       	rjmp	.+164    	; 0x150a <DIO_u8GetPinValue+0xe2>
    1466:	4c 81       	ldd	r20, Y+4	; 0x04
    1468:	5d 81       	ldd	r21, Y+5	; 0x05
    146a:	42 30       	cpi	r20, 0x02	; 2
    146c:	51 05       	cpc	r21, r1
    146e:	51 f1       	breq	.+84     	; 0x14c4 <DIO_u8GetPinValue+0x9c>
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	91 05       	cpc	r25, r1
    1478:	b9 f1       	breq	.+110    	; 0x14e8 <DIO_u8GetPinValue+0xc0>
    147a:	47 c0       	rjmp	.+142    	; 0x150a <DIO_u8GetPinValue+0xe2>
	
		case PORT_A:
			Local_u8Result = GET_BIT(PINA, Copy_u8Pin);
    147c:	e9 e3       	ldi	r30, 0x39	; 57
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a9 01       	movw	r20, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_u8GetPinValue+0x6c>
    1490:	55 95       	asr	r21
    1492:	47 95       	ror	r20
    1494:	8a 95       	dec	r24
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_u8GetPinValue+0x68>
    1498:	ca 01       	movw	r24, r20
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	35 c0       	rjmp	.+106    	; 0x150a <DIO_u8GetPinValue+0xe2>
		break;
		
		case PORT_B:
			Local_u8Result = GET_BIT(PINB, Copy_u8Pin);
    14a0:	e6 e3       	ldi	r30, 0x36	; 54
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a9 01       	movw	r20, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_u8GetPinValue+0x90>
    14b4:	55 95       	asr	r21
    14b6:	47 95       	ror	r20
    14b8:	8a 95       	dec	r24
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <DIO_u8GetPinValue+0x8c>
    14bc:	ca 01       	movw	r24, r20
    14be:	81 70       	andi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	23 c0       	rjmp	.+70     	; 0x150a <DIO_u8GetPinValue+0xe2>
		break;
		
		case PORT_C:
			Local_u8Result = GET_BIT(PINC, Copy_u8Pin);
    14c4:	e3 e3       	ldi	r30, 0x33	; 51
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a9 01       	movw	r20, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_u8GetPinValue+0xb4>
    14d8:	55 95       	asr	r21
    14da:	47 95       	ror	r20
    14dc:	8a 95       	dec	r24
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_u8GetPinValue+0xb0>
    14e0:	ca 01       	movw	r24, r20
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	11 c0       	rjmp	.+34     	; 0x150a <DIO_u8GetPinValue+0xe2>
		break;
		
		case PORT_D:
			Local_u8Result = GET_BIT(PIND, Copy_u8Pin);
    14e8:	e0 e3       	ldi	r30, 0x30	; 48
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a9 01       	movw	r20, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_u8GetPinValue+0xd8>
    14fc:	55 95       	asr	r21
    14fe:	47 95       	ror	r20
    1500:	8a 95       	dec	r24
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_u8GetPinValue+0xd4>
    1504:	ca 01       	movw	r24, r20
    1506:	81 70       	andi	r24, 0x01	; 1
    1508:	89 83       	std	Y+1, r24	; 0x01
		break;
		
	}
	return Local_u8Result;
    150a:	89 81       	ldd	r24, Y+1	; 0x01
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <DIO_voidSetPortDirection>:



void DIO_voidSetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Mode){
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <DIO_voidSetPortDirection+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <DIO_voidSetPortDirection+0x8>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	6a 83       	std	Y+2, r22	; 0x02
	
		switch(Copy_u8Port){ 
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	3c 83       	std	Y+4, r19	; 0x04
    1534:	2b 83       	std	Y+3, r18	; 0x03
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	91 05       	cpc	r25, r1
    153e:	d1 f0       	breq	.+52     	; 0x1574 <DIO_voidSetPortDirection+0x58>
    1540:	2b 81       	ldd	r18, Y+3	; 0x03
    1542:	3c 81       	ldd	r19, Y+4	; 0x04
    1544:	22 30       	cpi	r18, 0x02	; 2
    1546:	31 05       	cpc	r19, r1
    1548:	2c f4       	brge	.+10     	; 0x1554 <DIO_voidSetPortDirection+0x38>
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	61 f0       	breq	.+24     	; 0x156a <DIO_voidSetPortDirection+0x4e>
    1552:	1e c0       	rjmp	.+60     	; 0x1590 <DIO_voidSetPortDirection+0x74>
    1554:	2b 81       	ldd	r18, Y+3	; 0x03
    1556:	3c 81       	ldd	r19, Y+4	; 0x04
    1558:	22 30       	cpi	r18, 0x02	; 2
    155a:	31 05       	cpc	r19, r1
    155c:	81 f0       	breq	.+32     	; 0x157e <DIO_voidSetPortDirection+0x62>
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	91 05       	cpc	r25, r1
    1566:	81 f0       	breq	.+32     	; 0x1588 <DIO_voidSetPortDirection+0x6c>
    1568:	13 c0       	rjmp	.+38     	; 0x1590 <DIO_voidSetPortDirection+0x74>
	
			case PORT_A:	DDRA = Copy_u8Mode;		break;
    156a:	ea e3       	ldi	r30, 0x3A	; 58
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	80 83       	st	Z, r24
    1572:	0e c0       	rjmp	.+28     	; 0x1590 <DIO_voidSetPortDirection+0x74>
			case PORT_B:	DDRB = Copy_u8Mode;		break;
    1574:	e7 e3       	ldi	r30, 0x37	; 55
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	80 83       	st	Z, r24
    157c:	09 c0       	rjmp	.+18     	; 0x1590 <DIO_voidSetPortDirection+0x74>
			case PORT_C:	DDRC = Copy_u8Mode;		break;
    157e:	e4 e3       	ldi	r30, 0x34	; 52
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	80 83       	st	Z, r24
    1586:	04 c0       	rjmp	.+8      	; 0x1590 <DIO_voidSetPortDirection+0x74>
			case PORT_D:	DDRD = Copy_u8Mode;		break;
    1588:	e1 e3       	ldi	r30, 0x31	; 49
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	80 83       	st	Z, r24
			
	    }
	

}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value){
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <DIO_voidSetPortValue+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <DIO_voidSetPortValue+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	6a 83       	std	Y+2, r22	; 0x02

		switch(Copy_u8Port){ 
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3c 83       	std	Y+4, r19	; 0x04
    15b6:	2b 83       	std	Y+3, r18	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	91 05       	cpc	r25, r1
    15c0:	d1 f0       	breq	.+52     	; 0x15f6 <DIO_voidSetPortValue+0x58>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <DIO_voidSetPortValue+0x38>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	61 f0       	breq	.+24     	; 0x15ec <DIO_voidSetPortValue+0x4e>
    15d4:	1e c0       	rjmp	.+60     	; 0x1612 <DIO_voidSetPortValue+0x74>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	81 f0       	breq	.+32     	; 0x1600 <DIO_voidSetPortValue+0x62>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	91 05       	cpc	r25, r1
    15e8:	81 f0       	breq	.+32     	; 0x160a <DIO_voidSetPortValue+0x6c>
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <DIO_voidSetPortValue+0x74>
	
			case PORT_A:	PORTA = Copy_u8Value;		break;
    15ec:	eb e3       	ldi	r30, 0x3B	; 59
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	80 83       	st	Z, r24
    15f4:	0e c0       	rjmp	.+28     	; 0x1612 <DIO_voidSetPortValue+0x74>
			case PORT_B:	PORTB = Copy_u8Value;		break;
    15f6:	e8 e3       	ldi	r30, 0x38	; 56
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	80 83       	st	Z, r24
    15fe:	09 c0       	rjmp	.+18     	; 0x1612 <DIO_voidSetPortValue+0x74>
			case PORT_C:	PORTC = Copy_u8Value;		break;
    1600:	e5 e3       	ldi	r30, 0x35	; 53
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	80 83       	st	Z, r24
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <DIO_voidSetPortValue+0x74>
			case PORT_D:	PORTD = Copy_u8Value;		break;
    160a:	e2 e3       	ldi	r30, 0x32	; 50
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	80 83       	st	Z, r24
			
	    }
	

}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <DIO_voidTogglePin>:


void DIO_voidTogglePin(uint8 Copy_u8Port, uint8 Copy_u8Pin){
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	00 d0       	rcall	.+0      	; 0x1626 <DIO_voidTogglePin+0x6>
    1626:	00 d0       	rcall	.+0      	; 0x1628 <DIO_voidTogglePin+0x8>
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8Port){ 
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	3c 83       	std	Y+4, r19	; 0x04
    1638:	2b 83       	std	Y+3, r18	; 0x03
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	91 05       	cpc	r25, r1
    1642:	49 f1       	breq	.+82     	; 0x1696 <DIO_voidTogglePin+0x76>
    1644:	2b 81       	ldd	r18, Y+3	; 0x03
    1646:	3c 81       	ldd	r19, Y+4	; 0x04
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	2c f4       	brge	.+10     	; 0x1658 <DIO_voidTogglePin+0x38>
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	61 f0       	breq	.+24     	; 0x166e <DIO_voidTogglePin+0x4e>
    1656:	5a c0       	rjmp	.+180    	; 0x170c <DIO_voidTogglePin+0xec>
    1658:	2b 81       	ldd	r18, Y+3	; 0x03
    165a:	3c 81       	ldd	r19, Y+4	; 0x04
    165c:	22 30       	cpi	r18, 0x02	; 2
    165e:	31 05       	cpc	r19, r1
    1660:	71 f1       	breq	.+92     	; 0x16be <DIO_voidTogglePin+0x9e>
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	83 30       	cpi	r24, 0x03	; 3
    1668:	91 05       	cpc	r25, r1
    166a:	e9 f1       	breq	.+122    	; 0x16e6 <DIO_voidTogglePin+0xc6>
    166c:	4f c0       	rjmp	.+158    	; 0x170c <DIO_voidTogglePin+0xec>
	
		case PORT_A:  TOG_BIT(PORTA, Copy_u8Pin);    break;
    166e:	ab e3       	ldi	r26, 0x3B	; 59
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	eb e3       	ldi	r30, 0x3B	; 59
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_voidTogglePin+0x6c>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <DIO_voidTogglePin+0x68>
    1690:	84 27       	eor	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	3b c0       	rjmp	.+118    	; 0x170c <DIO_voidTogglePin+0xec>
		
		case PORT_B:  TOG_BIT(PORTB, Copy_u8Pin);    break;
    1696:	a8 e3       	ldi	r26, 0x38	; 56
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e8 e3       	ldi	r30, 0x38	; 56
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_voidTogglePin+0x94>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <DIO_voidTogglePin+0x90>
    16b8:	84 27       	eor	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	27 c0       	rjmp	.+78     	; 0x170c <DIO_voidTogglePin+0xec>
		
		case PORT_C:  TOG_BIT(PORTC, Copy_u8Pin);    break;
    16be:	a5 e3       	ldi	r26, 0x35	; 53
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e3       	ldi	r30, 0x35	; 53
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_voidTogglePin+0xbc>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_voidTogglePin+0xb8>
    16e0:	84 27       	eor	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	13 c0       	rjmp	.+38     	; 0x170c <DIO_voidTogglePin+0xec>
		
		case PORT_D:  TOG_BIT(PORTD, Copy_u8Pin);    break;
    16e6:	a2 e3       	ldi	r26, 0x32	; 50
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e2 e3       	ldi	r30, 0x32	; 50
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_voidTogglePin+0xe4>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_voidTogglePin+0xe0>
    1708:	84 27       	eor	r24, r20
    170a:	8c 93       	st	X, r24
		
	}

}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <GIE_voidEnable>:
/******************************************************************************
* Function Definitions
*******************************************************************************/


void GIE_voidEnable(void){
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62

	/* Enable global interrupt */
	SET_BIT(SREG, GIE);
    1722:	af e5       	ldi	r26, 0x5F	; 95
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	ef e5       	ldi	r30, 0x5F	; 95
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	80 68       	ori	r24, 0x80	; 128
    172e:	8c 93       	st	X, r24
	
}
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <GIE_voidDisable>:


void GIE_voidDisable(void){
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62

	/* Disable global interrupt */
	CLR_BIT(SREG, GIE);
    173e:	af e5       	ldi	r26, 0x5F	; 95
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ef e5       	ldi	r30, 0x5F	; 95
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8f 77       	andi	r24, 0x7F	; 127
    174a:	8c 93       	st	X, r24
	
}
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <LCD_voidWriteData>:

#include <avr/delay.h>



void LCD_voidWriteData(uint8 Copy_u8Data){
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	e9 97       	sbiw	r28, 0x39	; 57
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(RS, HIGH);
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	65 e0       	ldi	r22, 0x05	; 5
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW, LOW);
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	66 e0       	ldi	r22, 0x06	; 6
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
		
	}
	
	else if(LCD_MODE == MODE_4_BIT){
	
		DIO_voidSetPortValue(PORT_DATA, Copy_u8Data & 0xF0);
    177c:	89 ad       	ldd	r24, Y+57	; 0x39
    177e:	98 2f       	mov	r25, r24
    1780:	90 7f       	andi	r25, 0xF0	; 240
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	69 2f       	mov	r22, r25
    1786:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(EN, HIGH);
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	67 e0       	ldi	r22, 0x07	; 7
    178e:	41 e0       	ldi	r20, 0x01	; 1
    1790:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a0 e8       	ldi	r26, 0x80	; 128
    179a:	bf e3       	ldi	r27, 0x3F	; 63
    179c:	8d ab       	std	Y+53, r24	; 0x35
    179e:	9e ab       	std	Y+54, r25	; 0x36
    17a0:	af ab       	std	Y+55, r26	; 0x37
    17a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a4:	6d a9       	ldd	r22, Y+53	; 0x35
    17a6:	7e a9       	ldd	r23, Y+54	; 0x36
    17a8:	8f a9       	ldd	r24, Y+55	; 0x37
    17aa:	98 ad       	ldd	r25, Y+56	; 0x38
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4a ef       	ldi	r20, 0xFA	; 250
    17b2:	54 e4       	ldi	r21, 0x44	; 68
    17b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	89 ab       	std	Y+49, r24	; 0x31
    17be:	9a ab       	std	Y+50, r25	; 0x32
    17c0:	ab ab       	std	Y+51, r26	; 0x33
    17c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17c4:	69 a9       	ldd	r22, Y+49	; 0x31
    17c6:	7a a9       	ldd	r23, Y+50	; 0x32
    17c8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ca:	9c a9       	ldd	r25, Y+52	; 0x34
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17d8:	88 23       	and	r24, r24
    17da:	2c f4       	brge	.+10     	; 0x17e6 <LCD_voidWriteData+0x94>
		__ticks = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	98 ab       	std	Y+48, r25	; 0x30
    17e2:	8f a7       	std	Y+47, r24	; 0x2f
    17e4:	3f c0       	rjmp	.+126    	; 0x1864 <LCD_voidWriteData+0x112>
	else if (__tmp > 65535)
    17e6:	69 a9       	ldd	r22, Y+49	; 0x31
    17e8:	7a a9       	ldd	r23, Y+50	; 0x32
    17ea:	8b a9       	ldd	r24, Y+51	; 0x33
    17ec:	9c a9       	ldd	r25, Y+52	; 0x34
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	3f ef       	ldi	r19, 0xFF	; 255
    17f2:	4f e7       	ldi	r20, 0x7F	; 127
    17f4:	57 e4       	ldi	r21, 0x47	; 71
    17f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	4c f5       	brge	.+82     	; 0x1850 <LCD_voidWriteData+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1800:	7e a9       	ldd	r23, Y+54	; 0x36
    1802:	8f a9       	ldd	r24, Y+55	; 0x37
    1804:	98 ad       	ldd	r25, Y+56	; 0x38
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e2       	ldi	r20, 0x20	; 32
    180c:	51 e4       	ldi	r21, 0x41	; 65
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	98 ab       	std	Y+48, r25	; 0x30
    1824:	8f a7       	std	Y+47, r24	; 0x2f
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <LCD_voidWriteData+0xf4>
    1828:	88 ec       	ldi	r24, 0xC8	; 200
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9e a7       	std	Y+46, r25	; 0x2e
    182e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1830:	8d a5       	ldd	r24, Y+45	; 0x2d
    1832:	9e a5       	ldd	r25, Y+46	; 0x2e
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCD_voidWriteData+0xe2>
    1838:	9e a7       	std	Y+46, r25	; 0x2e
    183a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183c:	8f a5       	ldd	r24, Y+47	; 0x2f
    183e:	98 a9       	ldd	r25, Y+48	; 0x30
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	98 ab       	std	Y+48, r25	; 0x30
    1844:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	8f a5       	ldd	r24, Y+47	; 0x2f
    1848:	98 a9       	ldd	r25, Y+48	; 0x30
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	69 f7       	brne	.-38     	; 0x1828 <LCD_voidWriteData+0xd6>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <LCD_voidWriteData+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1850:	69 a9       	ldd	r22, Y+49	; 0x31
    1852:	7a a9       	ldd	r23, Y+50	; 0x32
    1854:	8b a9       	ldd	r24, Y+51	; 0x33
    1856:	9c a9       	ldd	r25, Y+52	; 0x34
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	98 ab       	std	Y+48, r25	; 0x30
    1862:	8f a7       	std	Y+47, r24	; 0x2f
    1864:	8f a5       	ldd	r24, Y+47	; 0x2f
    1866:	98 a9       	ldd	r25, Y+48	; 0x30
    1868:	9c a7       	std	Y+44, r25	; 0x2c
    186a:	8b a7       	std	Y+43, r24	; 0x2b
    186c:	8b a5       	ldd	r24, Y+43	; 0x2b
    186e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <LCD_voidWriteData+0x11e>
    1874:	9c a7       	std	Y+44, r25	; 0x2c
    1876:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		
		DIO_voidSetPinValue(EN, LOW);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	67 e0       	ldi	r22, 0x07	; 7
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a0 e8       	ldi	r26, 0x80	; 128
    1888:	bf e3       	ldi	r27, 0x3F	; 63
    188a:	8f a3       	std	Y+39, r24	; 0x27
    188c:	98 a7       	std	Y+40, r25	; 0x28
    188e:	a9 a7       	std	Y+41, r26	; 0x29
    1890:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6f a1       	ldd	r22, Y+39	; 0x27
    1894:	78 a5       	ldd	r23, Y+40	; 0x28
    1896:	89 a5       	ldd	r24, Y+41	; 0x29
    1898:	9a a5       	ldd	r25, Y+42	; 0x2a
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a ef       	ldi	r20, 0xFA	; 250
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	8b a3       	std	Y+35, r24	; 0x23
    18ac:	9c a3       	std	Y+36, r25	; 0x24
    18ae:	ad a3       	std	Y+37, r26	; 0x25
    18b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18b2:	6b a1       	ldd	r22, Y+35	; 0x23
    18b4:	7c a1       	ldd	r23, Y+36	; 0x24
    18b6:	8d a1       	ldd	r24, Y+37	; 0x25
    18b8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <LCD_voidWriteData+0x182>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9a a3       	std	Y+34, r25	; 0x22
    18d0:	89 a3       	std	Y+33, r24	; 0x21
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <LCD_voidWriteData+0x200>
	else if (__tmp > 65535)
    18d4:	6b a1       	ldd	r22, Y+35	; 0x23
    18d6:	7c a1       	ldd	r23, Y+36	; 0x24
    18d8:	8d a1       	ldd	r24, Y+37	; 0x25
    18da:	9e a1       	ldd	r25, Y+38	; 0x26
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <LCD_voidWriteData+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6f a1       	ldd	r22, Y+39	; 0x27
    18ee:	78 a5       	ldd	r23, Y+40	; 0x28
    18f0:	89 a5       	ldd	r24, Y+41	; 0x29
    18f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9a a3       	std	Y+34, r25	; 0x22
    1912:	89 a3       	std	Y+33, r24	; 0x21
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <LCD_voidWriteData+0x1e2>
    1916:	88 ec       	ldi	r24, 0xC8	; 200
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	98 a3       	std	Y+32, r25	; 0x20
    191c:	8f 8f       	std	Y+31, r24	; 0x1f
    191e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1920:	98 a1       	ldd	r25, Y+32	; 0x20
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_voidWriteData+0x1d0>
    1926:	98 a3       	std	Y+32, r25	; 0x20
    1928:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	89 a1       	ldd	r24, Y+33	; 0x21
    192c:	9a a1       	ldd	r25, Y+34	; 0x22
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9a a3       	std	Y+34, r25	; 0x22
    1932:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	89 a1       	ldd	r24, Y+33	; 0x21
    1936:	9a a1       	ldd	r25, Y+34	; 0x22
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <LCD_voidWriteData+0x1c4>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <LCD_voidWriteData+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	6b a1       	ldd	r22, Y+35	; 0x23
    1940:	7c a1       	ldd	r23, Y+36	; 0x24
    1942:	8d a1       	ldd	r24, Y+37	; 0x25
    1944:	9e a1       	ldd	r25, Y+38	; 0x26
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9a a3       	std	Y+34, r25	; 0x22
    1950:	89 a3       	std	Y+33, r24	; 0x21
    1952:	89 a1       	ldd	r24, Y+33	; 0x21
    1954:	9a a1       	ldd	r25, Y+34	; 0x22
    1956:	9e 8f       	std	Y+30, r25	; 0x1e
    1958:	8d 8f       	std	Y+29, r24	; 0x1d
    195a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <LCD_voidWriteData+0x20c>
    1962:	9e 8f       	std	Y+30, r25	; 0x1e
    1964:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		
		DIO_voidSetPortValue(PORT_DATA, Copy_u8Data << 4);
    1966:	89 ad       	ldd	r24, Y+57	; 0x39
    1968:	98 2f       	mov	r25, r24
    196a:	92 95       	swap	r25
    196c:	90 7f       	andi	r25, 0xF0	; 240
    196e:	83 e0       	ldi	r24, 0x03	; 3
    1970:	69 2f       	mov	r22, r25
    1972:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(EN, HIGH);
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	67 e0       	ldi	r22, 0x07	; 7
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e8       	ldi	r26, 0x80	; 128
    1986:	bf e3       	ldi	r27, 0x3F	; 63
    1988:	89 8f       	std	Y+25, r24	; 0x19
    198a:	9a 8f       	std	Y+26, r25	; 0x1a
    198c:	ab 8f       	std	Y+27, r26	; 0x1b
    198e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	69 8d       	ldd	r22, Y+25	; 0x19
    1992:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1994:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1996:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a ef       	ldi	r20, 0xFA	; 250
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8d 8b       	std	Y+21, r24	; 0x15
    19aa:	9e 8b       	std	Y+22, r25	; 0x16
    19ac:	af 8b       	std	Y+23, r26	; 0x17
    19ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19b0:	6d 89       	ldd	r22, Y+21	; 0x15
    19b2:	7e 89       	ldd	r23, Y+22	; 0x16
    19b4:	8f 89       	ldd	r24, Y+23	; 0x17
    19b6:	98 8d       	ldd	r25, Y+24	; 0x18
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <LCD_voidWriteData+0x280>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9c 8b       	std	Y+20, r25	; 0x14
    19ce:	8b 8b       	std	Y+19, r24	; 0x13
    19d0:	3f c0       	rjmp	.+126    	; 0x1a50 <LCD_voidWriteData+0x2fe>
	else if (__tmp > 65535)
    19d2:	6d 89       	ldd	r22, Y+21	; 0x15
    19d4:	7e 89       	ldd	r23, Y+22	; 0x16
    19d6:	8f 89       	ldd	r24, Y+23	; 0x17
    19d8:	98 8d       	ldd	r25, Y+24	; 0x18
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	4f e7       	ldi	r20, 0x7F	; 127
    19e0:	57 e4       	ldi	r21, 0x47	; 71
    19e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e6:	18 16       	cp	r1, r24
    19e8:	4c f5       	brge	.+82     	; 0x1a3c <LCD_voidWriteData+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ea:	69 8d       	ldd	r22, Y+25	; 0x19
    19ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9c 8b       	std	Y+20, r25	; 0x14
    1a10:	8b 8b       	std	Y+19, r24	; 0x13
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <LCD_voidWriteData+0x2e0>
    1a14:	88 ec       	ldi	r24, 0xC8	; 200
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9a 8b       	std	Y+18, r25	; 0x12
    1a1a:	89 8b       	std	Y+17, r24	; 0x11
    1a1c:	89 89       	ldd	r24, Y+17	; 0x11
    1a1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <LCD_voidWriteData+0x2ce>
    1a24:	9a 8b       	std	Y+18, r25	; 0x12
    1a26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a28:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	9c 8b       	std	Y+20, r25	; 0x14
    1a30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	8b 89       	ldd	r24, Y+19	; 0x13
    1a34:	9c 89       	ldd	r25, Y+20	; 0x14
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <LCD_voidWriteData+0x2c2>
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <LCD_voidWriteData+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a40:	8f 89       	ldd	r24, Y+23	; 0x17
    1a42:	98 8d       	ldd	r25, Y+24	; 0x18
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9c 8b       	std	Y+20, r25	; 0x14
    1a4e:	8b 8b       	std	Y+19, r24	; 0x13
    1a50:	8b 89       	ldd	r24, Y+19	; 0x13
    1a52:	9c 89       	ldd	r25, Y+20	; 0x14
    1a54:	98 8b       	std	Y+16, r25	; 0x10
    1a56:	8f 87       	std	Y+15, r24	; 0x0f
    1a58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5a:	98 89       	ldd	r25, Y+16	; 0x10
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_voidWriteData+0x30a>
    1a60:	98 8b       	std	Y+16, r25	; 0x10
    1a62:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		
		DIO_voidSetPinValue(EN, LOW);
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	67 e0       	ldi	r22, 0x07	; 7
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e8       	ldi	r26, 0x80	; 128
    1a74:	bf e3       	ldi	r27, 0x3F	; 63
    1a76:	8b 87       	std	Y+11, r24	; 0x0b
    1a78:	9c 87       	std	Y+12, r25	; 0x0c
    1a7a:	ad 87       	std	Y+13, r26	; 0x0d
    1a7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a ef       	ldi	r20, 0xFA	; 250
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8f 83       	std	Y+7, r24	; 0x07
    1a98:	98 87       	std	Y+8, r25	; 0x08
    1a9a:	a9 87       	std	Y+9, r26	; 0x09
    1a9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <LCD_voidWriteData+0x36e>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <LCD_voidWriteData+0x3ec>
	else if (__tmp > 65535)
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	4c f5       	brge	.+82     	; 0x1b2a <LCD_voidWriteData+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    1adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <LCD_voidWriteData+0x3ce>
    1b02:	88 ec       	ldi	r24, 0xC8	; 200
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_voidWriteData+0x3bc>
    1b12:	9c 83       	std	Y+4, r25	; 0x04
    1b14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <LCD_voidWriteData+0x3b0>
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <LCD_voidWriteData+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2c:	78 85       	ldd	r23, Y+8	; 0x08
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_voidWriteData+0x3f8>
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
		
	}	
	
	else{   asm("NOP");  }
		
}
    1b52:	e9 96       	adiw	r28, 0x39	; 57
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <LCD_voidSendCommand>:


void LCD_voidSendCommand(uint8 Copy_u8Command){
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	e9 97       	sbiw	r28, 0x39	; 57
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue (RS, LOW);
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	65 e0       	ldi	r22, 0x05	; 5
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (RW, LOW);
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	66 e0       	ldi	r22, 0x06	; 6
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
		
	}
	
	else if(LCD_MODE == MODE_4_BIT){

		DIO_voidSetPortValue(PORT_DATA, Copy_u8Command & 0xF0);
    1b8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1b90:	98 2f       	mov	r25, r24
    1b92:	90 7f       	andi	r25, 0xF0	; 240
    1b94:	83 e0       	ldi	r24, 0x03	; 3
    1b96:	69 2f       	mov	r22, r25
    1b98:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(EN, HIGH);
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	67 e0       	ldi	r22, 0x07	; 7
    1ba0:	41 e0       	ldi	r20, 0x01	; 1
    1ba2:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a0 e8       	ldi	r26, 0x80	; 128
    1bac:	bf e3       	ldi	r27, 0x3F	; 63
    1bae:	8d ab       	std	Y+53, r24	; 0x35
    1bb0:	9e ab       	std	Y+54, r25	; 0x36
    1bb2:	af ab       	std	Y+55, r26	; 0x37
    1bb4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb6:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb8:	7e a9       	ldd	r23, Y+54	; 0x36
    1bba:	8f a9       	ldd	r24, Y+55	; 0x37
    1bbc:	98 ad       	ldd	r25, Y+56	; 0x38
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	4a ef       	ldi	r20, 0xFA	; 250
    1bc4:	54 e4       	ldi	r21, 0x44	; 68
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	89 ab       	std	Y+49, r24	; 0x31
    1bd0:	9a ab       	std	Y+50, r25	; 0x32
    1bd2:	ab ab       	std	Y+51, r26	; 0x33
    1bd4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bd6:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd8:	7a a9       	ldd	r23, Y+50	; 0x32
    1bda:	8b a9       	ldd	r24, Y+51	; 0x33
    1bdc:	9c a9       	ldd	r25, Y+52	; 0x34
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e8       	ldi	r20, 0x80	; 128
    1be4:	5f e3       	ldi	r21, 0x3F	; 63
    1be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bea:	88 23       	and	r24, r24
    1bec:	2c f4       	brge	.+10     	; 0x1bf8 <LCD_voidSendCommand+0x94>
		__ticks = 1;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	98 ab       	std	Y+48, r25	; 0x30
    1bf4:	8f a7       	std	Y+47, r24	; 0x2f
    1bf6:	3f c0       	rjmp	.+126    	; 0x1c76 <LCD_voidSendCommand+0x112>
	else if (__tmp > 65535)
    1bf8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfa:	7a a9       	ldd	r23, Y+50	; 0x32
    1bfc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bfe:	9c a9       	ldd	r25, Y+52	; 0x34
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	4c f5       	brge	.+82     	; 0x1c62 <LCD_voidSendCommand+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c10:	6d a9       	ldd	r22, Y+53	; 0x35
    1c12:	7e a9       	ldd	r23, Y+54	; 0x36
    1c14:	8f a9       	ldd	r24, Y+55	; 0x37
    1c16:	98 ad       	ldd	r25, Y+56	; 0x38
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e2       	ldi	r20, 0x20	; 32
    1c1e:	51 e4       	ldi	r21, 0x41	; 65
    1c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	98 ab       	std	Y+48, r25	; 0x30
    1c36:	8f a7       	std	Y+47, r24	; 0x2f
    1c38:	0f c0       	rjmp	.+30     	; 0x1c58 <LCD_voidSendCommand+0xf4>
    1c3a:	88 ec       	ldi	r24, 0xC8	; 200
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9e a7       	std	Y+46, r25	; 0x2e
    1c40:	8d a7       	std	Y+45, r24	; 0x2d
    1c42:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c44:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <LCD_voidSendCommand+0xe2>
    1c4a:	9e a7       	std	Y+46, r25	; 0x2e
    1c4c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c50:	98 a9       	ldd	r25, Y+48	; 0x30
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	98 ab       	std	Y+48, r25	; 0x30
    1c56:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	69 f7       	brne	.-38     	; 0x1c3a <LCD_voidSendCommand+0xd6>
    1c60:	14 c0       	rjmp	.+40     	; 0x1c8a <LCD_voidSendCommand+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c62:	69 a9       	ldd	r22, Y+49	; 0x31
    1c64:	7a a9       	ldd	r23, Y+50	; 0x32
    1c66:	8b a9       	ldd	r24, Y+51	; 0x33
    1c68:	9c a9       	ldd	r25, Y+52	; 0x34
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	98 ab       	std	Y+48, r25	; 0x30
    1c74:	8f a7       	std	Y+47, r24	; 0x2f
    1c76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c78:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7a:	9c a7       	std	Y+44, r25	; 0x2c
    1c7c:	8b a7       	std	Y+43, r24	; 0x2b
    1c7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c80:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_voidSendCommand+0x11e>
    1c86:	9c a7       	std	Y+44, r25	; 0x2c
    1c88:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		
		DIO_voidSetPinValue(EN, LOW);
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	67 e0       	ldi	r22, 0x07	; 7
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 e8       	ldi	r26, 0x80	; 128
    1c9a:	bf e3       	ldi	r27, 0x3F	; 63
    1c9c:	8f a3       	std	Y+39, r24	; 0x27
    1c9e:	98 a7       	std	Y+40, r25	; 0x28
    1ca0:	a9 a7       	std	Y+41, r26	; 0x29
    1ca2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca8:	89 a5       	ldd	r24, Y+41	; 0x29
    1caa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a ef       	ldi	r20, 0xFA	; 250
    1cb2:	54 e4       	ldi	r21, 0x44	; 68
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	8b a3       	std	Y+35, r24	; 0x23
    1cbe:	9c a3       	std	Y+36, r25	; 0x24
    1cc0:	ad a3       	std	Y+37, r26	; 0x25
    1cc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cca:	9e a1       	ldd	r25, Y+38	; 0x26
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <LCD_voidSendCommand+0x182>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9a a3       	std	Y+34, r25	; 0x22
    1ce2:	89 a3       	std	Y+33, r24	; 0x21
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <LCD_voidSendCommand+0x200>
	else if (__tmp > 65535)
    1ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cea:	8d a1       	ldd	r24, Y+37	; 0x25
    1cec:	9e a1       	ldd	r25, Y+38	; 0x26
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	4c f5       	brge	.+82     	; 0x1d50 <LCD_voidSendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	6f a1       	ldd	r22, Y+39	; 0x27
    1d00:	78 a5       	ldd	r23, Y+40	; 0x28
    1d02:	89 a5       	ldd	r24, Y+41	; 0x29
    1d04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9a a3       	std	Y+34, r25	; 0x22
    1d24:	89 a3       	std	Y+33, r24	; 0x21
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <LCD_voidSendCommand+0x1e2>
    1d28:	88 ec       	ldi	r24, 0xC8	; 200
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	98 a3       	std	Y+32, r25	; 0x20
    1d2e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d32:	98 a1       	ldd	r25, Y+32	; 0x20
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_voidSendCommand+0x1d0>
    1d38:	98 a3       	std	Y+32, r25	; 0x20
    1d3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9a a3       	std	Y+34, r25	; 0x22
    1d44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	89 a1       	ldd	r24, Y+33	; 0x21
    1d48:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <LCD_voidSendCommand+0x1c4>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <LCD_voidSendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	6b a1       	ldd	r22, Y+35	; 0x23
    1d52:	7c a1       	ldd	r23, Y+36	; 0x24
    1d54:	8d a1       	ldd	r24, Y+37	; 0x25
    1d56:	9e a1       	ldd	r25, Y+38	; 0x26
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9a a3       	std	Y+34, r25	; 0x22
    1d62:	89 a3       	std	Y+33, r24	; 0x21
    1d64:	89 a1       	ldd	r24, Y+33	; 0x21
    1d66:	9a a1       	ldd	r25, Y+34	; 0x22
    1d68:	9e 8f       	std	Y+30, r25	; 0x1e
    1d6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_voidSendCommand+0x20c>
    1d74:	9e 8f       	std	Y+30, r25	; 0x1e
    1d76:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
	
		DIO_voidSetPortValue(PORT_DATA, Copy_u8Command << 4);
    1d78:	89 ad       	ldd	r24, Y+57	; 0x39
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	92 95       	swap	r25
    1d7e:	90 7f       	andi	r25, 0xF0	; 240
    1d80:	83 e0       	ldi	r24, 0x03	; 3
    1d82:	69 2f       	mov	r22, r25
    1d84:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_voidSetPortValue>
	
		DIO_voidSetPinValue(EN, HIGH);
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	67 e0       	ldi	r22, 0x07	; 7
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a0 e8       	ldi	r26, 0x80	; 128
    1d98:	bf e3       	ldi	r27, 0x3F	; 63
    1d9a:	89 8f       	std	Y+25, r24	; 0x19
    1d9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d9e:	ab 8f       	std	Y+27, r26	; 0x1b
    1da0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da2:	69 8d       	ldd	r22, Y+25	; 0x19
    1da4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4a ef       	ldi	r20, 0xFA	; 250
    1db0:	54 e4       	ldi	r21, 0x44	; 68
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	8d 8b       	std	Y+21, r24	; 0x15
    1dbc:	9e 8b       	std	Y+22, r25	; 0x16
    1dbe:	af 8b       	std	Y+23, r26	; 0x17
    1dc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e8       	ldi	r20, 0x80	; 128
    1dd0:	5f e3       	ldi	r21, 0x3F	; 63
    1dd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd6:	88 23       	and	r24, r24
    1dd8:	2c f4       	brge	.+10     	; 0x1de4 <LCD_voidSendCommand+0x280>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9c 8b       	std	Y+20, r25	; 0x14
    1de0:	8b 8b       	std	Y+19, r24	; 0x13
    1de2:	3f c0       	rjmp	.+126    	; 0x1e62 <LCD_voidSendCommand+0x2fe>
	else if (__tmp > 65535)
    1de4:	6d 89       	ldd	r22, Y+21	; 0x15
    1de6:	7e 89       	ldd	r23, Y+22	; 0x16
    1de8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dea:	98 8d       	ldd	r25, Y+24	; 0x18
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	3f ef       	ldi	r19, 0xFF	; 255
    1df0:	4f e7       	ldi	r20, 0x7F	; 127
    1df2:	57 e4       	ldi	r21, 0x47	; 71
    1df4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df8:	18 16       	cp	r1, r24
    1dfa:	4c f5       	brge	.+82     	; 0x1e4e <LCD_voidSendCommand+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e2       	ldi	r20, 0x20	; 32
    1e0a:	51 e4       	ldi	r21, 0x41	; 65
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9c 8b       	std	Y+20, r25	; 0x14
    1e22:	8b 8b       	std	Y+19, r24	; 0x13
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <LCD_voidSendCommand+0x2e0>
    1e26:	88 ec       	ldi	r24, 0xC8	; 200
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9a 8b       	std	Y+18, r25	; 0x12
    1e2c:	89 8b       	std	Y+17, r24	; 0x11
    1e2e:	89 89       	ldd	r24, Y+17	; 0x11
    1e30:	9a 89       	ldd	r25, Y+18	; 0x12
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_voidSendCommand+0x2ce>
    1e36:	9a 8b       	std	Y+18, r25	; 0x12
    1e38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	9c 8b       	std	Y+20, r25	; 0x14
    1e42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e44:	8b 89       	ldd	r24, Y+19	; 0x13
    1e46:	9c 89       	ldd	r25, Y+20	; 0x14
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	69 f7       	brne	.-38     	; 0x1e26 <LCD_voidSendCommand+0x2c2>
    1e4c:	14 c0       	rjmp	.+40     	; 0x1e76 <LCD_voidSendCommand+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e50:	7e 89       	ldd	r23, Y+22	; 0x16
    1e52:	8f 89       	ldd	r24, Y+23	; 0x17
    1e54:	98 8d       	ldd	r25, Y+24	; 0x18
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9c 8b       	std	Y+20, r25	; 0x14
    1e60:	8b 8b       	std	Y+19, r24	; 0x13
    1e62:	8b 89       	ldd	r24, Y+19	; 0x13
    1e64:	9c 89       	ldd	r25, Y+20	; 0x14
    1e66:	98 8b       	std	Y+16, r25	; 0x10
    1e68:	8f 87       	std	Y+15, r24	; 0x0f
    1e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6c:	98 89       	ldd	r25, Y+16	; 0x10
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_voidSendCommand+0x30a>
    1e72:	98 8b       	std	Y+16, r25	; 0x10
    1e74:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	
		DIO_voidSetPinValue(EN, LOW);
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	67 e0       	ldi	r22, 0x07	; 7
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e8       	ldi	r26, 0x80	; 128
    1e86:	bf e3       	ldi	r27, 0x3F	; 63
    1e88:	8b 87       	std	Y+11, r24	; 0x0b
    1e8a:	9c 87       	std	Y+12, r25	; 0x0c
    1e8c:	ad 87       	std	Y+13, r26	; 0x0d
    1e8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a ef       	ldi	r20, 0xFA	; 250
    1e9e:	54 e4       	ldi	r21, 0x44	; 68
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8f 83       	std	Y+7, r24	; 0x07
    1eaa:	98 87       	std	Y+8, r25	; 0x08
    1eac:	a9 87       	std	Y+9, r26	; 0x09
    1eae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <LCD_voidSendCommand+0x36e>
		__ticks = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <LCD_voidSendCommand+0x3ec>
	else if (__tmp > 65535)
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	57 e4       	ldi	r21, 0x47	; 71
    1ee2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	4c f5       	brge	.+82     	; 0x1f3c <LCD_voidSendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <LCD_voidSendCommand+0x3ce>
    1f14:	88 ec       	ldi	r24, 0xC8	; 200
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	8b 83       	std	Y+3, r24	; 0x03
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <LCD_voidSendCommand+0x3bc>
    1f24:	9c 83       	std	Y+4, r25	; 0x04
    1f26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <LCD_voidSendCommand+0x3b0>
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <LCD_voidSendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3e:	78 85       	ldd	r23, Y+8	; 0x08
    1f40:	89 85       	ldd	r24, Y+9	; 0x09
    1f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <LCD_voidSendCommand+0x3f8>
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
		
	}	
	
	else{   asm("NOP");  }

}
    1f64:	e9 96       	adiw	r28, 0x39	; 57
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <LCD_voidInit>:



void LCD_voidInit(void){
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	e8 97       	sbiw	r28, 0x38	; 56
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61

	/* set port data as output */
	DIO_voidSetPortDirection(PORT_DATA, 0xFF);
    1f8a:	83 e0       	ldi	r24, 0x03	; 3
    1f8c:	6f ef       	ldi	r22, 0xFF	; 255
    1f8e:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPortDirection>
		
	/* set RS, RW, EN pins  as output */
	DIO_voidSetPinDirection(RS, OUTPUT);
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	65 e0       	ldi	r22, 0x05	; 5
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(RW, OUTPUT);
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	66 e0       	ldi	r22, 0x06	; 6
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(EN, OUTPUT);
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	67 e0       	ldi	r22, 0x07	; 7
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_voidSetPinDirection>
		
	/* Init data port & EN by zero */
	DIO_voidSetPortValue(PORT_DATA, LOW);
    1fb0:	83 e0       	ldi	r24, 0x03	; 3
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_voidSetPortValue>
	DIO_voidSetPinValue(EN, LOW);
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	67 e0       	ldi	r22, 0x07	; 7
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e2       	ldi	r26, 0x20	; 32
    1fc8:	b2 e4       	ldi	r27, 0x42	; 66
    1fca:	8d ab       	std	Y+53, r24	; 0x35
    1fcc:	9e ab       	std	Y+54, r25	; 0x36
    1fce:	af ab       	std	Y+55, r26	; 0x37
    1fd0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fd4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fd6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a ef       	ldi	r20, 0xFA	; 250
    1fe0:	54 e4       	ldi	r21, 0x44	; 68
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	89 ab       	std	Y+49, r24	; 0x31
    1fec:	9a ab       	std	Y+50, r25	; 0x32
    1fee:	ab ab       	std	Y+51, r26	; 0x33
    1ff0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ff2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_voidInit+0x9e>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	98 ab       	std	Y+48, r25	; 0x30
    2010:	8f a7       	std	Y+47, r24	; 0x2f
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_voidInit+0x11c>
	else if (__tmp > 65535)
    2014:	69 a9       	ldd	r22, Y+49	; 0x31
    2016:	7a a9       	ldd	r23, Y+50	; 0x32
    2018:	8b a9       	ldd	r24, Y+51	; 0x33
    201a:	9c a9       	ldd	r25, Y+52	; 0x34
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_voidInit+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6d a9       	ldd	r22, Y+53	; 0x35
    202e:	7e a9       	ldd	r23, Y+54	; 0x36
    2030:	8f a9       	ldd	r24, Y+55	; 0x37
    2032:	98 ad       	ldd	r25, Y+56	; 0x38
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	98 ab       	std	Y+48, r25	; 0x30
    2052:	8f a7       	std	Y+47, r24	; 0x2f
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_voidInit+0xfe>
    2056:	88 ec       	ldi	r24, 0xC8	; 200
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9e a7       	std	Y+46, r25	; 0x2e
    205c:	8d a7       	std	Y+45, r24	; 0x2d
    205e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2060:	9e a5       	ldd	r25, Y+46	; 0x2e
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_voidInit+0xec>
    2066:	9e a7       	std	Y+46, r25	; 0x2e
    2068:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8f a5       	ldd	r24, Y+47	; 0x2f
    206c:	98 a9       	ldd	r25, Y+48	; 0x30
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	98 ab       	std	Y+48, r25	; 0x30
    2072:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8f a5       	ldd	r24, Y+47	; 0x2f
    2076:	98 a9       	ldd	r25, Y+48	; 0x30
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_voidInit+0xe0>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_voidInit+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	69 a9       	ldd	r22, Y+49	; 0x31
    2080:	7a a9       	ldd	r23, Y+50	; 0x32
    2082:	8b a9       	ldd	r24, Y+51	; 0x33
    2084:	9c a9       	ldd	r25, Y+52	; 0x34
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	98 ab       	std	Y+48, r25	; 0x30
    2090:	8f a7       	std	Y+47, r24	; 0x2f
    2092:	8f a5       	ldd	r24, Y+47	; 0x2f
    2094:	98 a9       	ldd	r25, Y+48	; 0x30
    2096:	9c a7       	std	Y+44, r25	; 0x2c
    2098:	8b a7       	std	Y+43, r24	; 0x2b
    209a:	8b a5       	ldd	r24, Y+43	; 0x2b
    209c:	9c a5       	ldd	r25, Y+44	; 0x2c
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_voidInit+0x128>
    20a2:	9c a7       	std	Y+44, r25	; 0x2c
    20a4:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_voidSendCommand(DISPLAY_CLEAR);
		_delay_ms(2);
		
	#elif LCD_MODE == MODE_4_BIT
		
		LCD_voidSendCommand(0x33);
    20a6:	83 e3       	ldi	r24, 0x33	; 51
    20a8:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_voidSendCommand>
		LCD_voidSendCommand(0x32);
    20ac:	82 e3       	ldi	r24, 0x32	; 50
    20ae:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_voidSendCommand>
		LCD_voidSendCommand(0x28);
    20b2:	88 e2       	ldi	r24, 0x28	; 40
    20b4:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_voidSendCommand>
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e8       	ldi	r26, 0x80	; 128
    20be:	bf e3       	ldi	r27, 0x3F	; 63
    20c0:	8f a3       	std	Y+39, r24	; 0x27
    20c2:	98 a7       	std	Y+40, r25	; 0x28
    20c4:	a9 a7       	std	Y+41, r26	; 0x29
    20c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ca:	78 a5       	ldd	r23, Y+40	; 0x28
    20cc:	89 a5       	ldd	r24, Y+41	; 0x29
    20ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	4a ef       	ldi	r20, 0xFA	; 250
    20d6:	54 e4       	ldi	r21, 0x44	; 68
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	8b a3       	std	Y+35, r24	; 0x23
    20e2:	9c a3       	std	Y+36, r25	; 0x24
    20e4:	ad a3       	std	Y+37, r26	; 0x25
    20e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20e8:	6b a1       	ldd	r22, Y+35	; 0x23
    20ea:	7c a1       	ldd	r23, Y+36	; 0x24
    20ec:	8d a1       	ldd	r24, Y+37	; 0x25
    20ee:	9e a1       	ldd	r25, Y+38	; 0x26
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	5f e3       	ldi	r21, 0x3F	; 63
    20f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20fc:	88 23       	and	r24, r24
    20fe:	2c f4       	brge	.+10     	; 0x210a <LCD_voidInit+0x194>
		__ticks = 1;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9a a3       	std	Y+34, r25	; 0x22
    2106:	89 a3       	std	Y+33, r24	; 0x21
    2108:	3f c0       	rjmp	.+126    	; 0x2188 <LCD_voidInit+0x212>
	else if (__tmp > 65535)
    210a:	6b a1       	ldd	r22, Y+35	; 0x23
    210c:	7c a1       	ldd	r23, Y+36	; 0x24
    210e:	8d a1       	ldd	r24, Y+37	; 0x25
    2110:	9e a1       	ldd	r25, Y+38	; 0x26
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	3f ef       	ldi	r19, 0xFF	; 255
    2116:	4f e7       	ldi	r20, 0x7F	; 127
    2118:	57 e4       	ldi	r21, 0x47	; 71
    211a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    211e:	18 16       	cp	r1, r24
    2120:	4c f5       	brge	.+82     	; 0x2174 <LCD_voidInit+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	6f a1       	ldd	r22, Y+39	; 0x27
    2124:	78 a5       	ldd	r23, Y+40	; 0x28
    2126:	89 a5       	ldd	r24, Y+41	; 0x29
    2128:	9a a5       	ldd	r25, Y+42	; 0x2a
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9a a3       	std	Y+34, r25	; 0x22
    2148:	89 a3       	std	Y+33, r24	; 0x21
    214a:	0f c0       	rjmp	.+30     	; 0x216a <LCD_voidInit+0x1f4>
    214c:	88 ec       	ldi	r24, 0xC8	; 200
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	98 a3       	std	Y+32, r25	; 0x20
    2152:	8f 8f       	std	Y+31, r24	; 0x1f
    2154:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2156:	98 a1       	ldd	r25, Y+32	; 0x20
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_voidInit+0x1e2>
    215c:	98 a3       	std	Y+32, r25	; 0x20
    215e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2160:	89 a1       	ldd	r24, Y+33	; 0x21
    2162:	9a a1       	ldd	r25, Y+34	; 0x22
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	9a a3       	std	Y+34, r25	; 0x22
    2168:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216a:	89 a1       	ldd	r24, Y+33	; 0x21
    216c:	9a a1       	ldd	r25, Y+34	; 0x22
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	69 f7       	brne	.-38     	; 0x214c <LCD_voidInit+0x1d6>
    2172:	14 c0       	rjmp	.+40     	; 0x219c <LCD_voidInit+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2174:	6b a1       	ldd	r22, Y+35	; 0x23
    2176:	7c a1       	ldd	r23, Y+36	; 0x24
    2178:	8d a1       	ldd	r24, Y+37	; 0x25
    217a:	9e a1       	ldd	r25, Y+38	; 0x26
    217c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9a a3       	std	Y+34, r25	; 0x22
    2186:	89 a3       	std	Y+33, r24	; 0x21
    2188:	89 a1       	ldd	r24, Y+33	; 0x21
    218a:	9a a1       	ldd	r25, Y+34	; 0x22
    218c:	9e 8f       	std	Y+30, r25	; 0x1e
    218e:	8d 8f       	std	Y+29, r24	; 0x1d
    2190:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2192:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_voidInit+0x21e>
    2198:	9e 8f       	std	Y+30, r25	; 0x1e
    219a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		
		LCD_voidSendCommand(DISPLAY_ON_OFF);
    219c:	8e e0       	ldi	r24, 0x0E	; 14
    219e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_voidSendCommand>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a0 e8       	ldi	r26, 0x80	; 128
    21a8:	bf e3       	ldi	r27, 0x3F	; 63
    21aa:	89 8f       	std	Y+25, r24	; 0x19
    21ac:	9a 8f       	std	Y+26, r25	; 0x1a
    21ae:	ab 8f       	std	Y+27, r26	; 0x1b
    21b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	69 8d       	ldd	r22, Y+25	; 0x19
    21b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	54 e4       	ldi	r21, 0x44	; 68
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	8d 8b       	std	Y+21, r24	; 0x15
    21cc:	9e 8b       	std	Y+22, r25	; 0x16
    21ce:	af 8b       	std	Y+23, r26	; 0x17
    21d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d2:	6d 89       	ldd	r22, Y+21	; 0x15
    21d4:	7e 89       	ldd	r23, Y+22	; 0x16
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <LCD_voidInit+0x27e>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9c 8b       	std	Y+20, r25	; 0x14
    21f0:	8b 8b       	std	Y+19, r24	; 0x13
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <LCD_voidInit+0x2fc>
	else if (__tmp > 65535)
    21f4:	6d 89       	ldd	r22, Y+21	; 0x15
    21f6:	7e 89       	ldd	r23, Y+22	; 0x16
    21f8:	8f 89       	ldd	r24, Y+23	; 0x17
    21fa:	98 8d       	ldd	r25, Y+24	; 0x18
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <LCD_voidInit+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	69 8d       	ldd	r22, Y+25	; 0x19
    220e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2210:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2212:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <LCD_voidInit+0x2de>
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9a 8b       	std	Y+18, r25	; 0x12
    223c:	89 8b       	std	Y+17, r24	; 0x11
    223e:	89 89       	ldd	r24, Y+17	; 0x11
    2240:	9a 89       	ldd	r25, Y+18	; 0x12
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCD_voidInit+0x2cc>
    2246:	9a 8b       	std	Y+18, r25	; 0x12
    2248:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8b 89       	ldd	r24, Y+19	; 0x13
    224c:	9c 89       	ldd	r25, Y+20	; 0x14
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8b 89       	ldd	r24, Y+19	; 0x13
    2256:	9c 89       	ldd	r25, Y+20	; 0x14
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <LCD_voidInit+0x2c0>
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <LCD_voidInit+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	6d 89       	ldd	r22, Y+21	; 0x15
    2260:	7e 89       	ldd	r23, Y+22	; 0x16
    2262:	8f 89       	ldd	r24, Y+23	; 0x17
    2264:	98 8d       	ldd	r25, Y+24	; 0x18
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9c 8b       	std	Y+20, r25	; 0x14
    2270:	8b 8b       	std	Y+19, r24	; 0x13
    2272:	8b 89       	ldd	r24, Y+19	; 0x13
    2274:	9c 89       	ldd	r25, Y+20	; 0x14
    2276:	98 8b       	std	Y+16, r25	; 0x10
    2278:	8f 87       	std	Y+15, r24	; 0x0f
    227a:	8f 85       	ldd	r24, Y+15	; 0x0f
    227c:	98 89       	ldd	r25, Y+16	; 0x10
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_voidInit+0x308>
    2282:	98 8b       	std	Y+16, r25	; 0x10
    2284:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		
		LCD_voidSendCommand(DISPLAY_CLEAR);
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_voidSendCommand>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a0 e0       	ldi	r26, 0x00	; 0
    2292:	b0 e4       	ldi	r27, 0x40	; 64
    2294:	8b 87       	std	Y+11, r24	; 0x0b
    2296:	9c 87       	std	Y+12, r25	; 0x0c
    2298:	ad 87       	std	Y+13, r26	; 0x0d
    229a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	6b 85       	ldd	r22, Y+11	; 0x0b
    229e:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a ef       	ldi	r20, 0xFA	; 250
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8f 83       	std	Y+7, r24	; 0x07
    22b6:	98 87       	std	Y+8, r25	; 0x08
    22b8:	a9 87       	std	Y+9, r26	; 0x09
    22ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_voidInit+0x368>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <LCD_voidInit+0x3e6>
	else if (__tmp > 65535)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <LCD_voidInit+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_voidInit+0x3c8>
    2320:	88 ec       	ldi	r24, 0xC8	; 200
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9c 83       	std	Y+4, r25	; 0x04
    2326:	8b 83       	std	Y+3, r24	; 0x03
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_voidInit+0x3b6>
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <LCD_voidInit+0x3aa>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <LCD_voidInit+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_voidInit+0x3f2>
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		
		LCD_voidSendCommand(0x06);
    2370:	86 e0       	ldi	r24, 0x06	; 6
    2372:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_voidSendCommand>
		
	#else 
		#erroe("You Chosed Wrong LCD Mode")
	#endif
}
    2376:	e8 96       	adiw	r28, 0x38	; 56
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <LCD_voidClearScreen>:



void LCD_voidClearScreen(void){
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	2e 97       	sbiw	r28, 0x0e	; 14
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61

	LCD_voidSendCommand(DISPLAY_CLEAR);
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_voidSendCommand>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a0 e0       	ldi	r26, 0x00	; 0
    23a8:	b0 e4       	ldi	r27, 0x40	; 64
    23aa:	8b 87       	std	Y+11, r24	; 0x0b
    23ac:	9c 87       	std	Y+12, r25	; 0x0c
    23ae:	ad 87       	std	Y+13, r26	; 0x0d
    23b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	4a ef       	ldi	r20, 0xFA	; 250
    23c0:	54 e4       	ldi	r21, 0x44	; 68
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	8f 83       	std	Y+7, r24	; 0x07
    23cc:	98 87       	std	Y+8, r25	; 0x08
    23ce:	a9 87       	std	Y+9, r26	; 0x09
    23d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23d2:	6f 81       	ldd	r22, Y+7	; 0x07
    23d4:	78 85       	ldd	r23, Y+8	; 0x08
    23d6:	89 85       	ldd	r24, Y+9	; 0x09
    23d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e8       	ldi	r20, 0x80	; 128
    23e0:	5f e3       	ldi	r21, 0x3F	; 63
    23e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e6:	88 23       	and	r24, r24
    23e8:	2c f4       	brge	.+10     	; 0x23f4 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
    23f2:	3f c0       	rjmp	.+126    	; 0x2472 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    23f4:	6f 81       	ldd	r22, Y+7	; 0x07
    23f6:	78 85       	ldd	r23, Y+8	; 0x08
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	3f ef       	ldi	r19, 0xFF	; 255
    2400:	4f e7       	ldi	r20, 0x7F	; 127
    2402:	57 e4       	ldi	r21, 0x47	; 71
    2404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2408:	18 16       	cp	r1, r24
    240a:	4c f5       	brge	.+82     	; 0x245e <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240c:	6b 85       	ldd	r22, Y+11	; 0x0b
    240e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2410:	8d 85       	ldd	r24, Y+13	; 0x0d
    2412:	9e 85       	ldd	r25, Y+14	; 0x0e
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e2       	ldi	r20, 0x20	; 32
    241a:	51 e4       	ldi	r21, 0x41	; 65
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9e 83       	std	Y+6, r25	; 0x06
    2432:	8d 83       	std	Y+5, r24	; 0x05
    2434:	0f c0       	rjmp	.+30     	; 0x2454 <LCD_voidClearScreen+0xcc>
    2436:	88 ec       	ldi	r24, 0xC8	; 200
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	9c 83       	std	Y+4, r25	; 0x04
    243c:	8b 83       	std	Y+3, r24	; 0x03
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <LCD_voidClearScreen+0xba>
    2446:	9c 83       	std	Y+4, r25	; 0x04
    2448:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244a:	8d 81       	ldd	r24, Y+5	; 0x05
    244c:	9e 81       	ldd	r25, Y+6	; 0x06
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	9e 83       	std	Y+6, r25	; 0x06
    2452:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	9e 81       	ldd	r25, Y+6	; 0x06
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	69 f7       	brne	.-38     	; 0x2436 <LCD_voidClearScreen+0xae>
    245c:	14 c0       	rjmp	.+40     	; 0x2486 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245e:	6f 81       	ldd	r22, Y+7	; 0x07
    2460:	78 85       	ldd	r23, Y+8	; 0x08
    2462:	89 85       	ldd	r24, Y+9	; 0x09
    2464:	9a 85       	ldd	r25, Y+10	; 0x0a
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9e 83       	std	Y+6, r25	; 0x06
    2470:	8d 83       	std	Y+5, r24	; 0x05
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	9a 83       	std	Y+2, r25	; 0x02
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <LCD_voidClearScreen+0xf6>
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2486:	2e 96       	adiw	r28, 0x0e	; 14
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <LCD_voidWriteString>:



void LCD_voidWriteString(uint8 *Copy_u8Ptr){
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <LCD_voidWriteString+0x6>
    249e:	0f 92       	push	r0
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	9b 83       	std	Y+3, r25	; 0x03
    24a6:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8 Local_u8Counter = 0;
    24a8:	19 82       	std	Y+1, r1	; 0x01
    24aa:	0e c0       	rjmp	.+28     	; 0x24c8 <LCD_voidWriteString+0x30>

	while(Copy_u8Ptr[Local_u8Counter] != 0){
	
		LCD_voidWriteData(Copy_u8Ptr[Local_u8Counter]);
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	28 2f       	mov	r18, r24
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	8a 81       	ldd	r24, Y+2	; 0x02
    24b4:	9b 81       	ldd	r25, Y+3	; 0x03
    24b6:	fc 01       	movw	r30, r24
    24b8:	e2 0f       	add	r30, r18
    24ba:	f3 1f       	adc	r31, r19
    24bc:	80 81       	ld	r24, Z
    24be:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
		Local_u8Counter++;
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	8f 5f       	subi	r24, 0xFF	; 255
    24c6:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(uint8 *Copy_u8Ptr){
	
	uint8 Local_u8Counter = 0;

	while(Copy_u8Ptr[Local_u8Counter] != 0){
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	9b 81       	ldd	r25, Y+3	; 0x03
    24d2:	fc 01       	movw	r30, r24
    24d4:	e2 0f       	add	r30, r18
    24d6:	f3 1f       	adc	r31, r19
    24d8:	80 81       	ld	r24, Z
    24da:	88 23       	and	r24, r24
    24dc:	39 f7       	brne	.-50     	; 0x24ac <LCD_voidWriteString+0x14>
		LCD_voidWriteData(Copy_u8Ptr[Local_u8Counter]);
		Local_u8Counter++;
	
	}

}
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <LCD_voidSetPosition>:



void LCD_voidSetPosition(uint8 Copy_u8Row, uint8 Copy_u8Col){
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <LCD_voidSetPosition+0x6>
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	6a 83       	std	Y+2, r22	; 0x02

	if(0 == Copy_u8Row){
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	88 23       	and	r24, r24
    24fc:	29 f4       	brne	.+10     	; 0x2508 <LCD_voidSetPosition+0x1e>

		/* set ddram */
		LCD_voidSendCommand(128 + Copy_u8Col);
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	80 58       	subi	r24, 0x80	; 128
    2502:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_voidSendCommand>
    2506:	09 c0       	rjmp	.+18     	; 0x251a <LCD_voidSetPosition+0x30>
	}

	else if(1 == Copy_u8Row){
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	29 f4       	brne	.+10     	; 0x2518 <LCD_voidSetPosition+0x2e>

		/* set ddram */
		LCD_voidSendCommand(128 + 64 + Copy_u8Col);
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	80 54       	subi	r24, 0x40	; 64
    2512:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_voidSendCommand>
    2516:	01 c0       	rjmp	.+2      	; 0x251a <LCD_voidSetPosition+0x30>
	}

	else{  asm("NOP"); }
    2518:	00 00       	nop

}
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <LCD_voidDisplayLoop>:



void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, uint8 *Copy_u8Ptr){
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	a1 97       	sbiw	r28, 0x21	; 33
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	8e 8f       	std	Y+30, r24	; 0x1e
    253a:	6f 8f       	std	Y+31, r22	; 0x1f
    253c:	59 a3       	std	Y+33, r21	; 0x21
    253e:	48 a3       	std	Y+32, r20	; 0x20

	for(uint8 i=0; i<15; i++){
    2540:	1d 8e       	std	Y+29, r1	; 0x1d
    2542:	f9 c0       	rjmp	.+498    	; 0x2736 <LCD_voidDisplayLoop+0x212>

		LCD_voidSetPosition(Copy_u8Row, i);
    2544:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2546:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2548:	0e 94 75 12 	call	0x24ea	; 0x24ea <LCD_voidSetPosition>

		LCD_voidWriteString(Copy_u8Ptr);
    254c:	88 a1       	ldd	r24, Y+32	; 0x20
    254e:	99 a1       	ldd	r25, Y+33	; 0x21
    2550:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_voidWriteString>
		_delay_ms(Copy_u8Speed);
    2554:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2556:	88 2f       	mov	r24, r24
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a0 e0       	ldi	r26, 0x00	; 0
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	89 8f       	std	Y+25, r24	; 0x19
    256c:	9a 8f       	std	Y+26, r25	; 0x1a
    256e:	ab 8f       	std	Y+27, r26	; 0x1b
    2570:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2572:	69 8d       	ldd	r22, Y+25	; 0x19
    2574:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2576:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2578:	9c 8d       	ldd	r25, Y+28	; 0x1c
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	4a ef       	ldi	r20, 0xFA	; 250
    2580:	54 e4       	ldi	r21, 0x44	; 68
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	8d 8b       	std	Y+21, r24	; 0x15
    258c:	9e 8b       	std	Y+22, r25	; 0x16
    258e:	af 8b       	std	Y+23, r26	; 0x17
    2590:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2592:	6d 89       	ldd	r22, Y+21	; 0x15
    2594:	7e 89       	ldd	r23, Y+22	; 0x16
    2596:	8f 89       	ldd	r24, Y+23	; 0x17
    2598:	98 8d       	ldd	r25, Y+24	; 0x18
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <LCD_voidDisplayLoop+0x90>
		__ticks = 1;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9c 8b       	std	Y+20, r25	; 0x14
    25b0:	8b 8b       	std	Y+19, r24	; 0x13
    25b2:	3f c0       	rjmp	.+126    	; 0x2632 <LCD_voidDisplayLoop+0x10e>
	else if (__tmp > 65535)
    25b4:	6d 89       	ldd	r22, Y+21	; 0x15
    25b6:	7e 89       	ldd	r23, Y+22	; 0x16
    25b8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ba:	98 8d       	ldd	r25, Y+24	; 0x18
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	4c f5       	brge	.+82     	; 0x261e <LCD_voidDisplayLoop+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25cc:	69 8d       	ldd	r22, Y+25	; 0x19
    25ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	51 e4       	ldi	r21, 0x41	; 65
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
    25f4:	0f c0       	rjmp	.+30     	; 0x2614 <LCD_voidDisplayLoop+0xf0>
    25f6:	88 ec       	ldi	r24, 0xC8	; 200
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	9a 8b       	std	Y+18, r25	; 0x12
    25fc:	89 8b       	std	Y+17, r24	; 0x11
    25fe:	89 89       	ldd	r24, Y+17	; 0x11
    2600:	9a 89       	ldd	r25, Y+18	; 0x12
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <LCD_voidDisplayLoop+0xde>
    2606:	9a 8b       	std	Y+18, r25	; 0x12
    2608:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260a:	8b 89       	ldd	r24, Y+19	; 0x13
    260c:	9c 89       	ldd	r25, Y+20	; 0x14
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	9c 8b       	std	Y+20, r25	; 0x14
    2612:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2614:	8b 89       	ldd	r24, Y+19	; 0x13
    2616:	9c 89       	ldd	r25, Y+20	; 0x14
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	69 f7       	brne	.-38     	; 0x25f6 <LCD_voidDisplayLoop+0xd2>
    261c:	14 c0       	rjmp	.+40     	; 0x2646 <LCD_voidDisplayLoop+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	6d 89       	ldd	r22, Y+21	; 0x15
    2620:	7e 89       	ldd	r23, Y+22	; 0x16
    2622:	8f 89       	ldd	r24, Y+23	; 0x17
    2624:	98 8d       	ldd	r25, Y+24	; 0x18
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9c 8b       	std	Y+20, r25	; 0x14
    2630:	8b 8b       	std	Y+19, r24	; 0x13
    2632:	8b 89       	ldd	r24, Y+19	; 0x13
    2634:	9c 89       	ldd	r25, Y+20	; 0x14
    2636:	98 8b       	std	Y+16, r25	; 0x10
    2638:	8f 87       	std	Y+15, r24	; 0x0f
    263a:	8f 85       	ldd	r24, Y+15	; 0x0f
    263c:	98 89       	ldd	r25, Y+16	; 0x10
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_voidDisplayLoop+0x11a>
    2642:	98 8b       	std	Y+16, r25	; 0x10
    2644:	8f 87       	std	Y+15, r24	; 0x0f

		LCD_voidSendCommand(DISPLAY_CLEAR);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_voidSendCommand>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a0 e0       	ldi	r26, 0x00	; 0
    2652:	b0 e4       	ldi	r27, 0x40	; 64
    2654:	8b 87       	std	Y+11, r24	; 0x0b
    2656:	9c 87       	std	Y+12, r25	; 0x0c
    2658:	ad 87       	std	Y+13, r26	; 0x0d
    265a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265c:	6b 85       	ldd	r22, Y+11	; 0x0b
    265e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2660:	8d 85       	ldd	r24, Y+13	; 0x0d
    2662:	9e 85       	ldd	r25, Y+14	; 0x0e
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	4a ef       	ldi	r20, 0xFA	; 250
    266a:	54 e4       	ldi	r21, 0x44	; 68
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	8f 83       	std	Y+7, r24	; 0x07
    2676:	98 87       	std	Y+8, r25	; 0x08
    2678:	a9 87       	std	Y+9, r26	; 0x09
    267a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    267c:	6f 81       	ldd	r22, Y+7	; 0x07
    267e:	78 85       	ldd	r23, Y+8	; 0x08
    2680:	89 85       	ldd	r24, Y+9	; 0x09
    2682:	9a 85       	ldd	r25, Y+10	; 0x0a
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e8       	ldi	r20, 0x80	; 128
    268a:	5f e3       	ldi	r21, 0x3F	; 63
    268c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2690:	88 23       	and	r24, r24
    2692:	2c f4       	brge	.+10     	; 0x269e <LCD_voidDisplayLoop+0x17a>
		__ticks = 1;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
    269c:	3f c0       	rjmp	.+126    	; 0x271c <LCD_voidDisplayLoop+0x1f8>
	else if (__tmp > 65535)
    269e:	6f 81       	ldd	r22, Y+7	; 0x07
    26a0:	78 85       	ldd	r23, Y+8	; 0x08
    26a2:	89 85       	ldd	r24, Y+9	; 0x09
    26a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	3f ef       	ldi	r19, 0xFF	; 255
    26aa:	4f e7       	ldi	r20, 0x7F	; 127
    26ac:	57 e4       	ldi	r21, 0x47	; 71
    26ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26b2:	18 16       	cp	r1, r24
    26b4:	4c f5       	brge	.+82     	; 0x2708 <LCD_voidDisplayLoop+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    26bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e2       	ldi	r20, 0x20	; 32
    26c4:	51 e4       	ldi	r21, 0x41	; 65
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	9e 83       	std	Y+6, r25	; 0x06
    26dc:	8d 83       	std	Y+5, r24	; 0x05
    26de:	0f c0       	rjmp	.+30     	; 0x26fe <LCD_voidDisplayLoop+0x1da>
    26e0:	88 ec       	ldi	r24, 0xC8	; 200
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	9c 83       	std	Y+4, r25	; 0x04
    26e6:	8b 83       	std	Y+3, r24	; 0x03
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	9c 81       	ldd	r25, Y+4	; 0x04
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <LCD_voidDisplayLoop+0x1c8>
    26f0:	9c 83       	std	Y+4, r25	; 0x04
    26f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	9e 81       	ldd	r25, Y+6	; 0x06
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	9e 81       	ldd	r25, Y+6	; 0x06
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	69 f7       	brne	.-38     	; 0x26e0 <LCD_voidDisplayLoop+0x1bc>
    2706:	14 c0       	rjmp	.+40     	; 0x2730 <LCD_voidDisplayLoop+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2708:	6f 81       	ldd	r22, Y+7	; 0x07
    270a:	78 85       	ldd	r23, Y+8	; 0x08
    270c:	89 85       	ldd	r24, Y+9	; 0x09
    270e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	9a 81       	ldd	r25, Y+2	; 0x02
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <LCD_voidDisplayLoop+0x204>
    272c:	9a 83       	std	Y+2, r25	; 0x02
    272e:	89 83       	std	Y+1, r24	; 0x01



void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, uint8 *Copy_u8Ptr){

	for(uint8 i=0; i<15; i++){
    2730:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2732:	8f 5f       	subi	r24, 0xFF	; 255
    2734:	8d 8f       	std	Y+29, r24	; 0x1d
    2736:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2738:	8f 30       	cpi	r24, 0x0F	; 15
    273a:	08 f4       	brcc	.+2      	; 0x273e <LCD_voidDisplayLoop+0x21a>
    273c:	03 cf       	rjmp	.-506    	; 0x2544 <LCD_voidDisplayLoop+0x20>

		LCD_voidSendCommand(DISPLAY_CLEAR);
		_delay_ms(2);

	}
}
    273e:	a1 96       	adiw	r28, 0x21	; 33
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <LCD_voidSetCGRAMAdres>:


void LCD_voidSetCGRAMAdres(void){
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSendCommand(64);
    2758:	80 e4       	ldi	r24, 0x40	; 64
    275a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_voidSendCommand>
	LCD_voidWriteData(0b00000011);
    275e:	83 e0       	ldi	r24, 0x03	; 3
    2760:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000011);
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000011);
    277c:	83 e0       	ldi	r24, 0x03	; 3
    277e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000101);
    2782:	85 e0       	ldi	r24, 0x05	; 5
    2784:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00001001);
    2788:	89 e0       	ldi	r24, 0x09	; 9
    278a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>

	LCD_voidWriteData(0b00011000);
    278e:	88 e1       	ldi	r24, 0x18	; 24
    2790:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00011000);
    2794:	88 e1       	ldi	r24, 0x18	; 24
    2796:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    279a:	80 e1       	ldi	r24, 0x10	; 16
    279c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    27a0:	80 e1       	ldi	r24, 0x10	; 16
    27a2:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    27a6:	80 e1       	ldi	r24, 0x10	; 16
    27a8:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00011000);
    27ac:	88 e1       	ldi	r24, 0x18	; 24
    27ae:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010100);
    27b2:	84 e1       	ldi	r24, 0x14	; 20
    27b4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010010);
    27b8:	82 e1       	ldi	r24, 0x12	; 18
    27ba:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>

	LCD_voidWriteData(0b00000001);
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000010);
    27d6:	82 e0       	ldi	r24, 0x02	; 2
    27d8:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    27dc:	84 e0       	ldi	r24, 0x04	; 4
    27de:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    27e2:	84 e0       	ldi	r24, 0x04	; 4
    27e4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00001100);
    27e8:	8c e0       	ldi	r24, 0x0C	; 12
    27ea:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>

	LCD_voidWriteData(0b00010000);
    27ee:	80 e1       	ldi	r24, 0x10	; 16
    27f0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    27f4:	80 e1       	ldi	r24, 0x10	; 16
    27f6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    27fa:	80 e1       	ldi	r24, 0x10	; 16
    27fc:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2800:	80 e1       	ldi	r24, 0x10	; 16
    2802:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00001000);
    2806:	88 e0       	ldi	r24, 0x08	; 8
    2808:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    280c:	84 e0       	ldi	r24, 0x04	; 4
    280e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    2812:	84 e0       	ldi	r24, 0x04	; 4
    2814:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000110);
    2818:	86 e0       	ldi	r24, 0x06	; 6
    281a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>

	LCD_voidWriteData(0b00011111);
    281e:	8f e1       	ldi	r24, 0x1F	; 31
    2820:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>

	LCD_voidWriteData(0b00000001);
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00011111);
    2878:	8f e1       	ldi	r24, 0x1F	; 31
    287a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>

	LCD_voidWriteData(0b00010000);
    287e:	80 e1       	ldi	r24, 0x10	; 16
    2880:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010010);
    2884:	82 e1       	ldi	r24, 0x12	; 18
    2886:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    288a:	80 e1       	ldi	r24, 0x10	; 16
    288c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2890:	80 e1       	ldi	r24, 0x10	; 16
    2892:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00001000);
    2896:	88 e0       	ldi	r24, 0x08	; 8
    2898:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    289c:	84 e0       	ldi	r24, 0x04	; 4
    289e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000010);
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>

	LCD_voidWriteData(0b00000001);
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
}
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <LCD_voidWriteNumber>:


void LCD_voidWriteNumber(uint8 Copy_u8Value){
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	0f 92       	push	r0
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	89 83       	std	Y+1, r24	; 0x01


	LCD_voidReverceNumber(Copy_u8Value);
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	0e 94 7f 14 	call	0x28fe	; 0x28fe <LCD_voidReverceNumber>

}
    28f6:	0f 90       	pop	r0
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <LCD_voidReverceNumber>:



void LCD_voidReverceNumber(uint8 Copy_u8Value){
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	00 d0       	rcall	.+0      	; 0x2904 <LCD_voidReverceNumber+0x6>
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Number = 0;
    290a:	19 82       	std	Y+1, r1	; 0x01

	if(0 == Copy_u8Value){
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	88 23       	and	r24, r24
    2910:	01 f5       	brne	.+64     	; 0x2952 <LCD_voidReverceNumber+0x54>

		LCD_voidWriteData('0');
    2912:	80 e3       	ldi	r24, 0x30	; 48
    2914:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
    2918:	22 c0       	rjmp	.+68     	; 0x295e <LCD_voidReverceNumber+0x60>

	else{

		while(Copy_u8Value > 0){

			Local_u8Number = (Local_u8Number * 10) + (Copy_u8Value % 10);
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	88 2f       	mov	r24, r24
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9c 01       	movw	r18, r24
    2922:	22 0f       	add	r18, r18
    2924:	33 1f       	adc	r19, r19
    2926:	c9 01       	movw	r24, r18
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	88 0f       	add	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	82 0f       	add	r24, r18
    2932:	93 1f       	adc	r25, r19
    2934:	28 2f       	mov	r18, r24
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	9a e0       	ldi	r25, 0x0A	; 10
    293a:	69 2f       	mov	r22, r25
    293c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodqi4>
    2940:	89 2f       	mov	r24, r25
    2942:	82 0f       	add	r24, r18
    2944:	89 83       	std	Y+1, r24	; 0x01
			Copy_u8Value = (Copy_u8Value / 10);
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	9a e0       	ldi	r25, 0x0A	; 10
    294a:	69 2f       	mov	r22, r25
    294c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodqi4>
    2950:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidWriteData('0');
	}

	else{

		while(Copy_u8Value > 0){
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	88 23       	and	r24, r24
    2956:	09 f7       	brne	.-62     	; 0x291a <LCD_voidReverceNumber+0x1c>
			Local_u8Number = (Local_u8Number * 10) + (Copy_u8Value % 10);
			Copy_u8Value = (Copy_u8Value / 10);

		}

		LCD_voidDetachNumber(Local_u8Number);
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	0e 94 b4 14 	call	0x2968	; 0x2968 <LCD_voidDetachNumber>
	}

}
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <LCD_voidDetachNumber>:



void LCD_voidDetachNumber(uint8 Copy_u8Value){
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	00 d0       	rcall	.+0      	; 0x296e <LCD_voidDetachNumber+0x6>
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Number = 0;
    2974:	19 82       	std	Y+1, r1	; 0x01
    2976:	11 c0       	rjmp	.+34     	; 0x299a <LCD_voidDetachNumber+0x32>

	while(Copy_u8Value > 0){

		Local_u8Number = (Copy_u8Value % 10);
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	9a e0       	ldi	r25, 0x0A	; 10
    297c:	69 2f       	mov	r22, r25
    297e:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodqi4>
    2982:	89 2f       	mov	r24, r25
    2984:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteData(Local_u8Number + 48);
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	80 5d       	subi	r24, 0xD0	; 208
    298a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <LCD_voidWriteData>
		Copy_u8Value = (Copy_u8Value / 10);
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	9a e0       	ldi	r25, 0x0A	; 10
    2992:	69 2f       	mov	r22, r25
    2994:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodqi4>
    2998:	8a 83       	std	Y+2, r24	; 0x02

void LCD_voidDetachNumber(uint8 Copy_u8Value){

	uint8 Local_u8Number = 0;

	while(Copy_u8Value > 0){
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	88 23       	and	r24, r24
    299e:	61 f7       	brne	.-40     	; 0x2978 <LCD_voidDetachNumber+0x10>
		Local_u8Number = (Copy_u8Value % 10);
		LCD_voidWriteData(Local_u8Number + 48);
		Copy_u8Value = (Copy_u8Value / 10);
	}

}
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <main>:
#include <avr/delay.h>




void main(void){
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	62 97       	sbiw	r28, 0x12	; 18
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61

	ADC_voidInit();
    29be:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
	LCD_voidInit();
    29c2:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <LCD_voidInit>

	LCD_voidClearScreen();
    29c6:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_voidClearScreen>

	DIO_voidSetPinDirection(PORT_B, PIN7, OUTPUT);
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	67 e0       	ldi	r22, 0x07	; 7
    29ce:	41 e0       	ldi	r20, 0x01	; 1
    29d0:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B, PIN6, OUTPUT);
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	66 e0       	ldi	r22, 0x06	; 6
    29d8:	41 e0       	ldi	r20, 0x01	; 1
    29da:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_voidSetPinDirection>

	//uint16 Local_u16DigitalValue = 0;
	uint16 Local_u16AnalogValue = 0;
    29de:	1a 8a       	std	Y+18, r1	; 0x12
    29e0:	19 8a       	std	Y+17, r1	; 0x11
	uint16 Local_u16Temp = 0;
    29e2:	18 8a       	std	Y+16, r1	; 0x10
    29e4:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_voidSetPosition(0, 0);
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	0e 94 75 12 	call	0x24ea	; 0x24ea <LCD_voidSetPosition>
	LCD_voidWriteString("Day Temperature: ");
    29ee:	80 e6       	ldi	r24, 0x60	; 96
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_voidWriteString>

	LCD_voidSetPosition(1, 4);
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	64 e0       	ldi	r22, 0x04	; 4
    29fa:	0e 94 75 12 	call	0x24ea	; 0x24ea <LCD_voidSetPosition>
	LCD_voidWriteString(" C");
    29fe:	82 e7       	ldi	r24, 0x72	; 114
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_voidWriteString>

	while(1){

		Local_u16AnalogValue = ADC_u16ReadValue(CHANNEL_A0);
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	0e 94 5d 07 	call	0xeba	; 0xeba <ADC_u16ReadValue>
    2a0c:	9a 8b       	std	Y+18, r25	; 0x12
    2a0e:	89 8b       	std	Y+17, r24	; 0x11

		Local_u16Temp = (Local_u16AnalogValue*150*5)/(1023*1.5);
    2a10:	29 89       	ldd	r18, Y+17	; 0x11
    2a12:	3a 89       	ldd	r19, Y+18	; 0x12
    2a14:	8e ee       	ldi	r24, 0xEE	; 238
    2a16:	92 e0       	ldi	r25, 0x02	; 2
    2a18:	ac 01       	movw	r20, r24
    2a1a:	24 9f       	mul	r18, r20
    2a1c:	c0 01       	movw	r24, r0
    2a1e:	25 9f       	mul	r18, r21
    2a20:	90 0d       	add	r25, r0
    2a22:	34 9f       	mul	r19, r20
    2a24:	90 0d       	add	r25, r0
    2a26:	11 24       	eor	r1, r1
    2a28:	cc 01       	movw	r24, r24
    2a2a:	a0 e0       	ldi	r26, 0x00	; 0
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 ed       	ldi	r19, 0xD0	; 208
    2a42:	4f eb       	ldi	r20, 0xBF	; 191
    2a44:	54 e4       	ldi	r21, 0x44	; 68
    2a46:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	98 8b       	std	Y+16, r25	; 0x10
    2a5c:	8f 87       	std	Y+15, r24	; 0x0f

		if(Local_u16Temp < 25){
    2a5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a60:	98 89       	ldd	r25, Y+16	; 0x10
    2a62:	89 31       	cpi	r24, 0x19	; 25
    2a64:	91 05       	cpc	r25, r1
    2a66:	58 f4       	brcc	.+22     	; 0x2a7e <main+0xd4>

			DIO_voidSetPinValue(PORT_B, PIN7, HIGH);
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	67 e0       	ldi	r22, 0x07	; 7
    2a6c:	41 e0       	ldi	r20, 0x01	; 1
    2a6e:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORT_B, PIN6, LOW );
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	66 e0       	ldi	r22, 0x06	; 6
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
    2a7c:	0a c0       	rjmp	.+20     	; 0x2a92 <main+0xe8>

		}
		else {

			DIO_voidSetPinValue(PORT_B, PIN7, LOW);
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	67 e0       	ldi	r22, 0x07	; 7
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORT_B, PIN6, HIGH );
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	66 e0       	ldi	r22, 0x06	; 6
    2a8c:	41 e0       	ldi	r20, 0x01	; 1
    2a8e:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_voidSetPinValue>

		}


		LCD_voidSetPosition(1, 1);
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	61 e0       	ldi	r22, 0x01	; 1
    2a96:	0e 94 75 12 	call	0x24ea	; 0x24ea <LCD_voidSetPosition>
		LCD_voidWriteNumber(Local_u16Temp);
    2a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a9c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <LCD_voidWriteNumber>
		LCD_voidWriteString(" ");
    2aa0:	85 e7       	ldi	r24, 0x75	; 117
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_voidWriteString>
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	a6 e9       	ldi	r26, 0x96	; 150
    2aae:	b3 e4       	ldi	r27, 0x43	; 67
    2ab0:	8b 87       	std	Y+11, r24	; 0x0b
    2ab2:	9c 87       	std	Y+12, r25	; 0x0c
    2ab4:	ad 87       	std	Y+13, r26	; 0x0d
    2ab6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	4a ef       	ldi	r20, 0xFA	; 250
    2ac6:	54 e4       	ldi	r21, 0x44	; 68
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	8f 83       	std	Y+7, r24	; 0x07
    2ad2:	98 87       	std	Y+8, r25	; 0x08
    2ad4:	a9 87       	std	Y+9, r26	; 0x09
    2ad6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    2ada:	78 85       	ldd	r23, Y+8	; 0x08
    2adc:	89 85       	ldd	r24, Y+9	; 0x09
    2ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e8       	ldi	r20, 0x80	; 128
    2ae6:	5f e3       	ldi	r21, 0x3F	; 63
    2ae8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aec:	88 23       	and	r24, r24
    2aee:	2c f4       	brge	.+10     	; 0x2afa <main+0x150>
		__ticks = 1;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	9e 83       	std	Y+6, r25	; 0x06
    2af6:	8d 83       	std	Y+5, r24	; 0x05
    2af8:	3f c0       	rjmp	.+126    	; 0x2b78 <main+0x1ce>
	else if (__tmp > 65535)
    2afa:	6f 81       	ldd	r22, Y+7	; 0x07
    2afc:	78 85       	ldd	r23, Y+8	; 0x08
    2afe:	89 85       	ldd	r24, Y+9	; 0x09
    2b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	3f ef       	ldi	r19, 0xFF	; 255
    2b06:	4f e7       	ldi	r20, 0x7F	; 127
    2b08:	57 e4       	ldi	r21, 0x47	; 71
    2b0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b0e:	18 16       	cp	r1, r24
    2b10:	4c f5       	brge	.+82     	; 0x2b64 <main+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	51 e4       	ldi	r21, 0x41	; 65
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9e 83       	std	Y+6, r25	; 0x06
    2b38:	8d 83       	std	Y+5, r24	; 0x05
    2b3a:	0f c0       	rjmp	.+30     	; 0x2b5a <main+0x1b0>
    2b3c:	88 ec       	ldi	r24, 0xC8	; 200
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	9c 83       	std	Y+4, r25	; 0x04
    2b42:	8b 83       	std	Y+3, r24	; 0x03
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	9c 81       	ldd	r25, Y+4	; 0x04
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <main+0x19e>
    2b4c:	9c 83       	std	Y+4, r25	; 0x04
    2b4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	9e 81       	ldd	r25, Y+6	; 0x06
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	9e 83       	std	Y+6, r25	; 0x06
    2b58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	69 f7       	brne	.-38     	; 0x2b3c <main+0x192>
    2b62:	51 cf       	rjmp	.-350    	; 0x2a06 <main+0x5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b64:	6f 81       	ldd	r22, Y+7	; 0x07
    2b66:	78 85       	ldd	r23, Y+8	; 0x08
    2b68:	89 85       	ldd	r24, Y+9	; 0x09
    2b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	9e 83       	std	Y+6, r25	; 0x06
    2b76:	8d 83       	std	Y+5, r24	; 0x05
    2b78:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7c:	9a 83       	std	Y+2, r25	; 0x02
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <main+0x1da>
    2b88:	9a 83       	std	Y+2, r25	; 0x02
    2b8a:	89 83       	std	Y+1, r24	; 0x01
    2b8c:	3c cf       	rjmp	.-392    	; 0x2a06 <main+0x5c>

00002b8e <__udivmodqi4>:
    2b8e:	99 1b       	sub	r25, r25
    2b90:	79 e0       	ldi	r23, 0x09	; 9
    2b92:	04 c0       	rjmp	.+8      	; 0x2b9c <__udivmodqi4_ep>

00002b94 <__udivmodqi4_loop>:
    2b94:	99 1f       	adc	r25, r25
    2b96:	96 17       	cp	r25, r22
    2b98:	08 f0       	brcs	.+2      	; 0x2b9c <__udivmodqi4_ep>
    2b9a:	96 1b       	sub	r25, r22

00002b9c <__udivmodqi4_ep>:
    2b9c:	88 1f       	adc	r24, r24
    2b9e:	7a 95       	dec	r23
    2ba0:	c9 f7       	brne	.-14     	; 0x2b94 <__udivmodqi4_loop>
    2ba2:	80 95       	com	r24
    2ba4:	08 95       	ret

00002ba6 <__prologue_saves__>:
    2ba6:	2f 92       	push	r2
    2ba8:	3f 92       	push	r3
    2baa:	4f 92       	push	r4
    2bac:	5f 92       	push	r5
    2bae:	6f 92       	push	r6
    2bb0:	7f 92       	push	r7
    2bb2:	8f 92       	push	r8
    2bb4:	9f 92       	push	r9
    2bb6:	af 92       	push	r10
    2bb8:	bf 92       	push	r11
    2bba:	cf 92       	push	r12
    2bbc:	df 92       	push	r13
    2bbe:	ef 92       	push	r14
    2bc0:	ff 92       	push	r15
    2bc2:	0f 93       	push	r16
    2bc4:	1f 93       	push	r17
    2bc6:	cf 93       	push	r28
    2bc8:	df 93       	push	r29
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	ca 1b       	sub	r28, r26
    2bd0:	db 0b       	sbc	r29, r27
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	09 94       	ijmp

00002bde <__epilogue_restores__>:
    2bde:	2a 88       	ldd	r2, Y+18	; 0x12
    2be0:	39 88       	ldd	r3, Y+17	; 0x11
    2be2:	48 88       	ldd	r4, Y+16	; 0x10
    2be4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2be6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2be8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bea:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bec:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bee:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bf0:	b9 84       	ldd	r11, Y+9	; 0x09
    2bf2:	c8 84       	ldd	r12, Y+8	; 0x08
    2bf4:	df 80       	ldd	r13, Y+7	; 0x07
    2bf6:	ee 80       	ldd	r14, Y+6	; 0x06
    2bf8:	fd 80       	ldd	r15, Y+5	; 0x05
    2bfa:	0c 81       	ldd	r16, Y+4	; 0x04
    2bfc:	1b 81       	ldd	r17, Y+3	; 0x03
    2bfe:	aa 81       	ldd	r26, Y+2	; 0x02
    2c00:	b9 81       	ldd	r27, Y+1	; 0x01
    2c02:	ce 0f       	add	r28, r30
    2c04:	d1 1d       	adc	r29, r1
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	ed 01       	movw	r28, r26
    2c12:	08 95       	ret

00002c14 <_exit>:
    2c14:	f8 94       	cli

00002c16 <__stop_program>:
    2c16:	ff cf       	rjmp	.-2      	; 0x2c16 <__stop_program>
