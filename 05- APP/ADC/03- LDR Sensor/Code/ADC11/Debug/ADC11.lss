
ADC11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ad4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002ad4  00002b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800168  00800168  00002c70  2**0
                  ALLOC
  3 .stab         00002220  00000000  00000000  00002c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000da6  00000000  00000000  00004e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00005db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00005f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00007f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00009108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a10c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000a2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000a56d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ae1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ed       	ldi	r30, 0xD4	; 212
      78:	fa e2       	ldi	r31, 0x2A	; 42
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 29 14 	call	0x2852	; 0x2852 <main>
      8a:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <ADC_voidInit>:
#include "ADC_config.h"


void (*ADC_CallBack)(void) = NULL;

void ADC_voidInit(void){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(ADMUX, REFS1);

	#elif VOLTAGE_REF == AVCC

		/* Select Verf = AVCC */
		SET_BIT(ADMUX, REFS0);
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	8c 93       	st	X, r24
		CLR_BIT(ADMUX, REFS1);
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 77       	andi	r24, 0x7F	; 127
     cf8:	8c 93       	st	X, r24


	#if ADJUST_RESULT == RIGHT_ADJUST

		/* select right adjust result */
		CLR_BIT(ADMUX, ADLAR);
     cfa:	a7 e2       	ldi	r26, 0x27	; 39
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e2       	ldi	r30, 0x27	; 39
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 7d       	andi	r24, 0xDF	; 223
     d06:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA, ADPS2);

	#elif PRESCALER == DIV_FACTOR_8

		/* Prescaler Select DIV 8 */
		SET_BIT(ADCSRA, ADPS0);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	81 60       	ori	r24, 0x01	; 1
     d14:	8c 93       	st	X, r24
		SET_BIT(ADCSRA, ADPS1);
     d16:	a6 e2       	ldi	r26, 0x26	; 38
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e2       	ldi	r30, 0x26	; 38
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	82 60       	ori	r24, 0x02	; 2
     d22:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA, ADPS2);
     d24:	a6 e2       	ldi	r26, 0x26	; 38
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e6 e2       	ldi	r30, 0x26	; 38
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8b 7f       	andi	r24, 0xFB	; 251
     d30:	8c 93       	st	X, r24
		#endif

	#elif AUTO_TRIGGER == AUTO_TRIGGER_DISABLE

		/* disable of trigger & Select single conversion */
		CLR_BIT(ADCSRA, ADATE);
     d32:	a6 e2       	ldi	r26, 0x26	; 38
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e6 e2       	ldi	r30, 0x26	; 38
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 7d       	andi	r24, 0xDF	; 223
     d3e:	8c 93       	st	X, r24
	#else
		#error("You Chose Wrong ADC Auto Trigger!")
	#endif

	/* ADC interrupt disable */
	CLR_BIT(ADCSRA, ADIE);
     d40:	a6 e2       	ldi	r26, 0x26	; 38
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e6 e2       	ldi	r30, 0x26	; 38
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	87 7f       	andi	r24, 0xF7	; 247
     d4c:	8c 93       	st	X, r24

	/* Enable ADC */
	SET_BIT(ADCSRA, ADEN);
     d4e:	a6 e2       	ldi	r26, 0x26	; 38
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e6 e2       	ldi	r30, 0x26	; 38
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	80 68       	ori	r24, 0x80	; 128
     d5a:	8c 93       	st	X, r24

}
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <ADC_u16ReadValue>:



uint16 ADC_u16ReadValue(uint8 Copy_u8ChannelNumber){
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	0f 92       	push	r0
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	89 83       	std	Y+1, r24	; 0x01
	
	/* channel number must be from A0 --> A7 */
	Copy_u8ChannelNumber &= 0x07;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	87 70       	andi	r24, 0x07	; 7
     d72:	89 83       	std	Y+1, r24	; 0x01

	/* clear first 5 bits in the ADMUX (channel number MUX4:0 bits)
	   before set the required channel */
	ADMUX &= 0xE0;
     d74:	a7 e2       	ldi	r26, 0x27	; 39
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e7 e2       	ldi	r30, 0x27	; 39
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 7e       	andi	r24, 0xE0	; 224
     d80:	8c 93       	st	X, r24

	/* choose the correct channel by setting the channel number in MUX4:0 bits */
	ADMUX |= Copy_u8ChannelNumber;
     d82:	a7 e2       	ldi	r26, 0x27	; 39
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e7 e2       	ldi	r30, 0x27	; 39
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	90 81       	ld	r25, Z
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	89 2b       	or	r24, r25
     d90:	8c 93       	st	X, r24

	/* Start conversion */
	SET_BIT(ADCSRA, ADSC);
     d92:	a6 e2       	ldi	r26, 0x26	; 38
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e6 e2       	ldi	r30, 0x26	; 38
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	80 64       	ori	r24, 0x40	; 64
     d9e:	8c 93       	st	X, r24
	
	/* Wait until end conversion */
	while(0 == GET_BIT(ADCSRA, ADIF));
     da0:	e6 e2       	ldi	r30, 0x26	; 38
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	82 95       	swap	r24
     da8:	8f 70       	andi	r24, 0x0F	; 15
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	81 70       	andi	r24, 0x01	; 1
     db0:	90 70       	andi	r25, 0x00	; 0
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	a9 f3       	breq	.-22     	; 0xda0 <ADC_u16ReadValue+0x3e>
	
	/* Clear ADC interrupt flag */
	SET_BIT(ADCSRA, ADIF);
     db6:	a6 e2       	ldi	r26, 0x26	; 38
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e6 e2       	ldi	r30, 0x26	; 38
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	80 61       	ori	r24, 0x10	; 16
     dc2:	8c 93       	st	X, r24

	/* return data */
	return ADC;
     dc4:	e4 e2       	ldi	r30, 0x24	; 36
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01

}
     dcc:	0f 90       	pop	r0
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	08 95       	ret

00000dd4 <ADC_u16GetValue>:



void ADC_u16GetValue(uint8 Copy_u8ChannelNumber){
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	0f 92       	push	r0
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	89 83       	std	Y+1, r24	; 0x01

	/* channel number must be from A0 --> A7 */
	Copy_u8ChannelNumber &= 0x07;
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	87 70       	andi	r24, 0x07	; 7
     de4:	89 83       	std	Y+1, r24	; 0x01

	/* clear first 5 bits in the ADMUX (channel number MUX4:0 bits)
	   before set the required channel */
	ADMUX &= 0xE0;
     de6:	a7 e2       	ldi	r26, 0x27	; 39
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e2       	ldi	r30, 0x27	; 39
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	80 7e       	andi	r24, 0xE0	; 224
     df2:	8c 93       	st	X, r24

	/* choose the correct channel by setting the channel number in MUX4:0 bits */
	ADMUX |= Copy_u8ChannelNumber;
     df4:	a7 e2       	ldi	r26, 0x27	; 39
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e2       	ldi	r30, 0x27	; 39
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	90 81       	ld	r25, Z
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	89 2b       	or	r24, r25
     e02:	8c 93       	st	X, r24

	/* Start conversion */
	SET_BIT(ADCSRA, ADSC);
     e04:	a6 e2       	ldi	r26, 0x26	; 38
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e6 e2       	ldi	r30, 0x26	; 38
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	80 64       	ori	r24, 0x40	; 64
     e10:	8c 93       	st	X, r24

}
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <ADC_voidEnableInterrupt>:



void ADC_voidEnableInterrupt(void){
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62

	/* ADC interrupt Enable */
	SET_BIT(ADCSRA, ADIE);
     e22:	a6 e2       	ldi	r26, 0x26	; 38
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e6 e2       	ldi	r30, 0x26	; 38
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	88 60       	ori	r24, 0x08	; 8
     e2e:	8c 93       	st	X, r24
}
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <ADC_voidDisableInterrupt>:



void ADC_voidDisableInterrupt(void){
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62

	/* ADC interrupt Disable */
	CLR_BIT(ADCSRA, ADIE);
     e3e:	a6 e2       	ldi	r26, 0x26	; 38
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e6 e2       	ldi	r30, 0x26	; 38
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	87 7f       	andi	r24, 0xF7	; 247
     e4a:	8c 93       	st	X, r24
}
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <ADC_voidSetCallBack>:



/* CallBack function ADC  */
void ADC_voidSetCallBack(void(*Local_ptr)(void)){
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <ADC_voidSetCallBack+0x6>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	89 83       	std	Y+1, r24	; 0x01

	ADC_CallBack = Local_ptr;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	90 93 69 01 	sts	0x0169, r25
     e68:	80 93 68 01 	sts	0x0168, r24

}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <__vector_16>:




/* ISR Function ADC */
ISR( ADC_VECTOR ){
     e76:	1f 92       	push	r1
     e78:	0f 92       	push	r0
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	0f 92       	push	r0
     e7e:	11 24       	eor	r1, r1
     e80:	2f 93       	push	r18
     e82:	3f 93       	push	r19
     e84:	4f 93       	push	r20
     e86:	5f 93       	push	r21
     e88:	6f 93       	push	r22
     e8a:	7f 93       	push	r23
     e8c:	8f 93       	push	r24
     e8e:	9f 93       	push	r25
     e90:	af 93       	push	r26
     e92:	bf 93       	push	r27
     e94:	ef 93       	push	r30
     e96:	ff 93       	push	r31
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62

	ADC_CallBack();
     ea0:	e0 91 68 01 	lds	r30, 0x0168
     ea4:	f0 91 69 01 	lds	r31, 0x0169
     ea8:	09 95       	icall

}
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Mode){
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	27 97       	sbiw	r28, 0x07	; 7
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	6a 83       	std	Y+2, r22	; 0x02
     ee8:	4b 83       	std	Y+3, r20	; 0x03

	if(OUTPUT == Copy_u8Mode){
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	09 f0       	breq	.+2      	; 0xef2 <DIO_voidSetPinDirection+0x22>
     ef0:	6f c0       	rjmp	.+222    	; 0xfd0 <DIO_voidSetPinDirection+0x100>
	
		switch(Copy_u8Port){
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	3f 83       	std	Y+7, r19	; 0x07
     efa:	2e 83       	std	Y+6, r18	; 0x06
     efc:	8e 81       	ldd	r24, Y+6	; 0x06
     efe:	9f 81       	ldd	r25, Y+7	; 0x07
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	91 05       	cpc	r25, r1
     f04:	49 f1       	breq	.+82     	; 0xf58 <DIO_voidSetPinDirection+0x88>
     f06:	2e 81       	ldd	r18, Y+6	; 0x06
     f08:	3f 81       	ldd	r19, Y+7	; 0x07
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	31 05       	cpc	r19, r1
     f0e:	2c f4       	brge	.+10     	; 0xf1a <DIO_voidSetPinDirection+0x4a>
     f10:	8e 81       	ldd	r24, Y+6	; 0x06
     f12:	9f 81       	ldd	r25, Y+7	; 0x07
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	61 f0       	breq	.+24     	; 0xf30 <DIO_voidSetPinDirection+0x60>
     f18:	d2 c0       	rjmp	.+420    	; 0x10be <DIO_voidSetPinDirection+0x1ee>
     f1a:	2e 81       	ldd	r18, Y+6	; 0x06
     f1c:	3f 81       	ldd	r19, Y+7	; 0x07
     f1e:	22 30       	cpi	r18, 0x02	; 2
     f20:	31 05       	cpc	r19, r1
     f22:	71 f1       	breq	.+92     	; 0xf80 <DIO_voidSetPinDirection+0xb0>
     f24:	8e 81       	ldd	r24, Y+6	; 0x06
     f26:	9f 81       	ldd	r25, Y+7	; 0x07
     f28:	83 30       	cpi	r24, 0x03	; 3
     f2a:	91 05       	cpc	r25, r1
     f2c:	e9 f1       	breq	.+122    	; 0xfa8 <DIO_voidSetPinDirection+0xd8>
     f2e:	c7 c0       	rjmp	.+398    	; 0x10be <DIO_voidSetPinDirection+0x1ee>
		
			case PORT_A:	SET_BIT(DDRA, Copy_u8Pin);		break;
     f30:	aa e3       	ldi	r26, 0x3A	; 58
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ea e3       	ldi	r30, 0x3A	; 58
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_voidSetPinDirection+0x7e>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_voidSetPinDirection+0x7a>
     f52:	84 2b       	or	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	b3 c0       	rjmp	.+358    	; 0x10be <DIO_voidSetPinDirection+0x1ee>
			case PORT_B:	SET_BIT(DDRB, Copy_u8Pin);		break;
     f58:	a7 e3       	ldi	r26, 0x37	; 55
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e7 e3       	ldi	r30, 0x37	; 55
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_voidSetPinDirection+0xa6>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_voidSetPinDirection+0xa2>
     f7a:	84 2b       	or	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	9f c0       	rjmp	.+318    	; 0x10be <DIO_voidSetPinDirection+0x1ee>
			case PORT_C:	SET_BIT(DDRC, Copy_u8Pin);		break;
     f80:	a4 e3       	ldi	r26, 0x34	; 52
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e4 e3       	ldi	r30, 0x34	; 52
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_voidSetPinDirection+0xce>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_voidSetPinDirection+0xca>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	8b c0       	rjmp	.+278    	; 0x10be <DIO_voidSetPinDirection+0x1ee>
			case PORT_D:	SET_BIT(DDRD, Copy_u8Pin);		break;
     fa8:	a1 e3       	ldi	r26, 0x31	; 49
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e1 e3       	ldi	r30, 0x31	; 49
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_voidSetPinDirection+0xf6>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_voidSetPinDirection+0xf2>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	77 c0       	rjmp	.+238    	; 0x10be <DIO_voidSetPinDirection+0x1ee>
			
		}
	}
	
	else if(INPUT == Copy_u8Mode){
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	88 23       	and	r24, r24
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <DIO_voidSetPinDirection+0x108>
     fd6:	73 c0       	rjmp	.+230    	; 0x10be <DIO_voidSetPinDirection+0x1ee>
	
		switch(Copy_u8Port){
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	3d 83       	std	Y+5, r19	; 0x05
     fe0:	2c 83       	std	Y+4, r18	; 0x04
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	91 05       	cpc	r25, r1
     fea:	59 f1       	breq	.+86     	; 0x1042 <DIO_voidSetPinDirection+0x172>
     fec:	2c 81       	ldd	r18, Y+4	; 0x04
     fee:	3d 81       	ldd	r19, Y+5	; 0x05
     ff0:	22 30       	cpi	r18, 0x02	; 2
     ff2:	31 05       	cpc	r19, r1
     ff4:	2c f4       	brge	.+10     	; 0x1000 <DIO_voidSetPinDirection+0x130>
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	9d 81       	ldd	r25, Y+5	; 0x05
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	69 f0       	breq	.+26     	; 0x1018 <DIO_voidSetPinDirection+0x148>
     ffe:	5f c0       	rjmp	.+190    	; 0x10be <DIO_voidSetPinDirection+0x1ee>
    1000:	2c 81       	ldd	r18, Y+4	; 0x04
    1002:	3d 81       	ldd	r19, Y+5	; 0x05
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	89 f1       	breq	.+98     	; 0x106c <DIO_voidSetPinDirection+0x19c>
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	91 05       	cpc	r25, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <DIO_voidSetPinDirection+0x146>
    1014:	40 c0       	rjmp	.+128    	; 0x1096 <DIO_voidSetPinDirection+0x1c6>
    1016:	53 c0       	rjmp	.+166    	; 0x10be <DIO_voidSetPinDirection+0x1ee>
		
			case PORT_A:	CLR_BIT(DDRA, Copy_u8Pin);		break;
    1018:	aa e3       	ldi	r26, 0x3A	; 58
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	ea e3       	ldi	r30, 0x3A	; 58
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_voidSetPinDirection+0x166>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_voidSetPinDirection+0x162>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	3e c0       	rjmp	.+124    	; 0x10be <DIO_voidSetPinDirection+0x1ee>
			case PORT_B:	CLR_BIT(DDRB, Copy_u8Pin);		break;
    1042:	a7 e3       	ldi	r26, 0x37	; 55
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e3       	ldi	r30, 0x37	; 55
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_voidSetPinDirection+0x190>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_voidSetPinDirection+0x18c>
    1064:	80 95       	com	r24
    1066:	84 23       	and	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	29 c0       	rjmp	.+82     	; 0x10be <DIO_voidSetPinDirection+0x1ee>
			case PORT_C:	CLR_BIT(DDRC, Copy_u8Pin);		break;
    106c:	a4 e3       	ldi	r26, 0x34	; 52
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e4 e3       	ldi	r30, 0x34	; 52
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_voidSetPinDirection+0x1ba>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_voidSetPinDirection+0x1b6>
    108e:	80 95       	com	r24
    1090:	84 23       	and	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	14 c0       	rjmp	.+40     	; 0x10be <DIO_voidSetPinDirection+0x1ee>
			case PORT_D:	CLR_BIT(DDRD, Copy_u8Pin);		break;
    1096:	a1 e3       	ldi	r26, 0x31	; 49
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_voidSetPinDirection+0x1e4>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_voidSetPinDirection+0x1e0>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
		}
	}
	
	else{    /* return error  */   }
	
}
    10be:	27 96       	adiw	r28, 0x07	; 7
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value){
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	27 97       	sbiw	r28, 0x07	; 7
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	6a 83       	std	Y+2, r22	; 0x02
    10e8:	4b 83       	std	Y+3, r20	; 0x03

	if(HIGH == Copy_u8Value){
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <DIO_voidSetPinValue+0x22>
    10f0:	6f c0       	rjmp	.+222    	; 0x11d0 <DIO_voidSetPinValue+0x100>
	
		switch(Copy_u8Port){
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	3f 83       	std	Y+7, r19	; 0x07
    10fa:	2e 83       	std	Y+6, r18	; 0x06
    10fc:	8e 81       	ldd	r24, Y+6	; 0x06
    10fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	91 05       	cpc	r25, r1
    1104:	49 f1       	breq	.+82     	; 0x1158 <DIO_voidSetPinValue+0x88>
    1106:	2e 81       	ldd	r18, Y+6	; 0x06
    1108:	3f 81       	ldd	r19, Y+7	; 0x07
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	2c f4       	brge	.+10     	; 0x111a <DIO_voidSetPinValue+0x4a>
    1110:	8e 81       	ldd	r24, Y+6	; 0x06
    1112:	9f 81       	ldd	r25, Y+7	; 0x07
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	61 f0       	breq	.+24     	; 0x1130 <DIO_voidSetPinValue+0x60>
    1118:	d2 c0       	rjmp	.+420    	; 0x12be <DIO_voidSetPinValue+0x1ee>
    111a:	2e 81       	ldd	r18, Y+6	; 0x06
    111c:	3f 81       	ldd	r19, Y+7	; 0x07
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	31 05       	cpc	r19, r1
    1122:	71 f1       	breq	.+92     	; 0x1180 <DIO_voidSetPinValue+0xb0>
    1124:	8e 81       	ldd	r24, Y+6	; 0x06
    1126:	9f 81       	ldd	r25, Y+7	; 0x07
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	e9 f1       	breq	.+122    	; 0x11a8 <DIO_voidSetPinValue+0xd8>
    112e:	c7 c0       	rjmp	.+398    	; 0x12be <DIO_voidSetPinValue+0x1ee>
		
			case PORT_A:	SET_BIT(PORTA, Copy_u8Pin);		break;
    1130:	ab e3       	ldi	r26, 0x3B	; 59
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	eb e3       	ldi	r30, 0x3B	; 59
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_voidSetPinValue+0x7e>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_voidSetPinValue+0x7a>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	b3 c0       	rjmp	.+358    	; 0x12be <DIO_voidSetPinValue+0x1ee>
			case PORT_B:	SET_BIT(PORTB, Copy_u8Pin);		break;
    1158:	a8 e3       	ldi	r26, 0x38	; 56
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e8 e3       	ldi	r30, 0x38	; 56
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_voidSetPinValue+0xa6>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_voidSetPinValue+0xa2>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	9f c0       	rjmp	.+318    	; 0x12be <DIO_voidSetPinValue+0x1ee>
			case PORT_C:	SET_BIT(PORTC, Copy_u8Pin);		break;
    1180:	a5 e3       	ldi	r26, 0x35	; 53
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e5 e3       	ldi	r30, 0x35	; 53
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_voidSetPinValue+0xce>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_voidSetPinValue+0xca>
    11a2:	84 2b       	or	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	8b c0       	rjmp	.+278    	; 0x12be <DIO_voidSetPinValue+0x1ee>
			case PORT_D:	SET_BIT(PORTD, Copy_u8Pin);		break;
    11a8:	a2 e3       	ldi	r26, 0x32	; 50
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e2 e3       	ldi	r30, 0x32	; 50
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_voidSetPinValue+0xf6>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_voidSetPinValue+0xf2>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	77 c0       	rjmp	.+238    	; 0x12be <DIO_voidSetPinValue+0x1ee>
			
		}
	}
	
	else if(LOW == Copy_u8Value){
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	88 23       	and	r24, r24
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <DIO_voidSetPinValue+0x108>
    11d6:	73 c0       	rjmp	.+230    	; 0x12be <DIO_voidSetPinValue+0x1ee>
	
		switch(Copy_u8Port){
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	3d 83       	std	Y+5, r19	; 0x05
    11e0:	2c 83       	std	Y+4, r18	; 0x04
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	9d 81       	ldd	r25, Y+5	; 0x05
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	91 05       	cpc	r25, r1
    11ea:	59 f1       	breq	.+86     	; 0x1242 <DIO_voidSetPinValue+0x172>
    11ec:	2c 81       	ldd	r18, Y+4	; 0x04
    11ee:	3d 81       	ldd	r19, Y+5	; 0x05
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	2c f4       	brge	.+10     	; 0x1200 <DIO_voidSetPinValue+0x130>
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	9d 81       	ldd	r25, Y+5	; 0x05
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	69 f0       	breq	.+26     	; 0x1218 <DIO_voidSetPinValue+0x148>
    11fe:	5f c0       	rjmp	.+190    	; 0x12be <DIO_voidSetPinValue+0x1ee>
    1200:	2c 81       	ldd	r18, Y+4	; 0x04
    1202:	3d 81       	ldd	r19, Y+5	; 0x05
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	89 f1       	breq	.+98     	; 0x126c <DIO_voidSetPinValue+0x19c>
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	9d 81       	ldd	r25, Y+5	; 0x05
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	91 05       	cpc	r25, r1
    1212:	09 f4       	brne	.+2      	; 0x1216 <DIO_voidSetPinValue+0x146>
    1214:	40 c0       	rjmp	.+128    	; 0x1296 <DIO_voidSetPinValue+0x1c6>
    1216:	53 c0       	rjmp	.+166    	; 0x12be <DIO_voidSetPinValue+0x1ee>
		
			case PORT_A:	CLR_BIT(PORTA, Copy_u8Pin);		break;
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_voidSetPinValue+0x166>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_voidSetPinValue+0x162>
    123a:	80 95       	com	r24
    123c:	84 23       	and	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	3e c0       	rjmp	.+124    	; 0x12be <DIO_voidSetPinValue+0x1ee>
			case PORT_B:	CLR_BIT(PORTB, Copy_u8Pin);		break;
    1242:	a8 e3       	ldi	r26, 0x38	; 56
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e8 e3       	ldi	r30, 0x38	; 56
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_voidSetPinValue+0x190>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_voidSetPinValue+0x18c>
    1264:	80 95       	com	r24
    1266:	84 23       	and	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	29 c0       	rjmp	.+82     	; 0x12be <DIO_voidSetPinValue+0x1ee>
			case PORT_C:	CLR_BIT(PORTC, Copy_u8Pin);		break;
    126c:	a5 e3       	ldi	r26, 0x35	; 53
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e3       	ldi	r30, 0x35	; 53
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_voidSetPinValue+0x1ba>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_voidSetPinValue+0x1b6>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	14 c0       	rjmp	.+40     	; 0x12be <DIO_voidSetPinValue+0x1ee>
			case PORT_D:	CLR_BIT(PORTD, Copy_u8Pin);		break;
    1296:	a2 e3       	ldi	r26, 0x32	; 50
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e2 e3       	ldi	r30, 0x32	; 50
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <DIO_voidSetPinValue+0x1e4>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <DIO_voidSetPinValue+0x1e0>
    12b8:	80 95       	com	r24
    12ba:	84 23       	and	r24, r20
    12bc:	8c 93       	st	X, r24
		}
	}
	
	else{    /* return error  */   }
	
}
    12be:	27 96       	adiw	r28, 0x07	; 7
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <DIO_u8GetPinValue>:



uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin){
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <DIO_u8GetPinValue+0x6>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <DIO_u8GetPinValue+0x8>
    12d8:	0f 92       	push	r0
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	8a 83       	std	Y+2, r24	; 0x02
    12e0:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8Result = 0; 
    12e2:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){ 
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3d 83       	std	Y+5, r19	; 0x05
    12ec:	2c 83       	std	Y+4, r18	; 0x04
    12ee:	4c 81       	ldd	r20, Y+4	; 0x04
    12f0:	5d 81       	ldd	r21, Y+5	; 0x05
    12f2:	41 30       	cpi	r20, 0x01	; 1
    12f4:	51 05       	cpc	r21, r1
    12f6:	41 f1       	breq	.+80     	; 0x1348 <DIO_u8GetPinValue+0x78>
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	9d 81       	ldd	r25, Y+5	; 0x05
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	91 05       	cpc	r25, r1
    1300:	34 f4       	brge	.+12     	; 0x130e <DIO_u8GetPinValue+0x3e>
    1302:	2c 81       	ldd	r18, Y+4	; 0x04
    1304:	3d 81       	ldd	r19, Y+5	; 0x05
    1306:	21 15       	cp	r18, r1
    1308:	31 05       	cpc	r19, r1
    130a:	61 f0       	breq	.+24     	; 0x1324 <DIO_u8GetPinValue+0x54>
    130c:	52 c0       	rjmp	.+164    	; 0x13b2 <DIO_u8GetPinValue+0xe2>
    130e:	4c 81       	ldd	r20, Y+4	; 0x04
    1310:	5d 81       	ldd	r21, Y+5	; 0x05
    1312:	42 30       	cpi	r20, 0x02	; 2
    1314:	51 05       	cpc	r21, r1
    1316:	51 f1       	breq	.+84     	; 0x136c <DIO_u8GetPinValue+0x9c>
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	91 05       	cpc	r25, r1
    1320:	b9 f1       	breq	.+110    	; 0x1390 <DIO_u8GetPinValue+0xc0>
    1322:	47 c0       	rjmp	.+142    	; 0x13b2 <DIO_u8GetPinValue+0xe2>
	
		case PORT_A:
			Local_u8Result = GET_BIT(PINA, Copy_u8Pin);
    1324:	e9 e3       	ldi	r30, 0x39	; 57
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a9 01       	movw	r20, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_u8GetPinValue+0x6c>
    1338:	55 95       	asr	r21
    133a:	47 95       	ror	r20
    133c:	8a 95       	dec	r24
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_u8GetPinValue+0x68>
    1340:	ca 01       	movw	r24, r20
    1342:	81 70       	andi	r24, 0x01	; 1
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	35 c0       	rjmp	.+106    	; 0x13b2 <DIO_u8GetPinValue+0xe2>
		break;
		
		case PORT_B:
			Local_u8Result = GET_BIT(PINB, Copy_u8Pin);
    1348:	e6 e3       	ldi	r30, 0x36	; 54
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_u8GetPinValue+0x90>
    135c:	55 95       	asr	r21
    135e:	47 95       	ror	r20
    1360:	8a 95       	dec	r24
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_u8GetPinValue+0x8c>
    1364:	ca 01       	movw	r24, r20
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	23 c0       	rjmp	.+70     	; 0x13b2 <DIO_u8GetPinValue+0xe2>
		break;
		
		case PORT_C:
			Local_u8Result = GET_BIT(PINC, Copy_u8Pin);
    136c:	e3 e3       	ldi	r30, 0x33	; 51
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	88 2f       	mov	r24, r24
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_u8GetPinValue+0xb4>
    1380:	55 95       	asr	r21
    1382:	47 95       	ror	r20
    1384:	8a 95       	dec	r24
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_u8GetPinValue+0xb0>
    1388:	ca 01       	movw	r24, r20
    138a:	81 70       	andi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	11 c0       	rjmp	.+34     	; 0x13b2 <DIO_u8GetPinValue+0xe2>
		break;
		
		case PORT_D:
			Local_u8Result = GET_BIT(PIND, Copy_u8Pin);
    1390:	e0 e3       	ldi	r30, 0x30	; 48
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a9 01       	movw	r20, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_u8GetPinValue+0xd8>
    13a4:	55 95       	asr	r21
    13a6:	47 95       	ror	r20
    13a8:	8a 95       	dec	r24
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_u8GetPinValue+0xd4>
    13ac:	ca 01       	movw	r24, r20
    13ae:	81 70       	andi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01
		break;
		
	}
	return Local_u8Result;
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <DIO_voidSetPortDirection>:



void DIO_voidSetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Mode){
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <DIO_voidSetPortDirection+0x6>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <DIO_voidSetPortDirection+0x8>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	6a 83       	std	Y+2, r22	; 0x02
	
		switch(Copy_u8Port){ 
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3c 83       	std	Y+4, r19	; 0x04
    13dc:	2b 83       	std	Y+3, r18	; 0x03
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	d1 f0       	breq	.+52     	; 0x141c <DIO_voidSetPortDirection+0x58>
    13e8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ea:	3c 81       	ldd	r19, Y+4	; 0x04
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	2c f4       	brge	.+10     	; 0x13fc <DIO_voidSetPortDirection+0x38>
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	61 f0       	breq	.+24     	; 0x1412 <DIO_voidSetPortDirection+0x4e>
    13fa:	1e c0       	rjmp	.+60     	; 0x1438 <DIO_voidSetPortDirection+0x74>
    13fc:	2b 81       	ldd	r18, Y+3	; 0x03
    13fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1400:	22 30       	cpi	r18, 0x02	; 2
    1402:	31 05       	cpc	r19, r1
    1404:	81 f0       	breq	.+32     	; 0x1426 <DIO_voidSetPortDirection+0x62>
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	91 05       	cpc	r25, r1
    140e:	81 f0       	breq	.+32     	; 0x1430 <DIO_voidSetPortDirection+0x6c>
    1410:	13 c0       	rjmp	.+38     	; 0x1438 <DIO_voidSetPortDirection+0x74>
	
			case PORT_A:	DDRA = Copy_u8Mode;		break;
    1412:	ea e3       	ldi	r30, 0x3A	; 58
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	80 83       	st	Z, r24
    141a:	0e c0       	rjmp	.+28     	; 0x1438 <DIO_voidSetPortDirection+0x74>
			case PORT_B:	DDRB = Copy_u8Mode;		break;
    141c:	e7 e3       	ldi	r30, 0x37	; 55
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	80 83       	st	Z, r24
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <DIO_voidSetPortDirection+0x74>
			case PORT_C:	DDRC = Copy_u8Mode;		break;
    1426:	e4 e3       	ldi	r30, 0x34	; 52
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	80 83       	st	Z, r24
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <DIO_voidSetPortDirection+0x74>
			case PORT_D:	DDRD = Copy_u8Mode;		break;
    1430:	e1 e3       	ldi	r30, 0x31	; 49
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	80 83       	st	Z, r24
			
	    }
	

}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value){
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <DIO_voidSetPortValue+0x6>
    144c:	00 d0       	rcall	.+0      	; 0x144e <DIO_voidSetPortValue+0x8>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	6a 83       	std	Y+2, r22	; 0x02

		switch(Copy_u8Port){ 
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3c 83       	std	Y+4, r19	; 0x04
    145e:	2b 83       	std	Y+3, r18	; 0x03
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	d1 f0       	breq	.+52     	; 0x149e <DIO_voidSetPortValue+0x58>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	2c f4       	brge	.+10     	; 0x147e <DIO_voidSetPortValue+0x38>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	61 f0       	breq	.+24     	; 0x1494 <DIO_voidSetPortValue+0x4e>
    147c:	1e c0       	rjmp	.+60     	; 0x14ba <DIO_voidSetPortValue+0x74>
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	81 f0       	breq	.+32     	; 0x14a8 <DIO_voidSetPortValue+0x62>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	91 05       	cpc	r25, r1
    1490:	81 f0       	breq	.+32     	; 0x14b2 <DIO_voidSetPortValue+0x6c>
    1492:	13 c0       	rjmp	.+38     	; 0x14ba <DIO_voidSetPortValue+0x74>
	
			case PORT_A:	PORTA = Copy_u8Value;		break;
    1494:	eb e3       	ldi	r30, 0x3B	; 59
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	80 83       	st	Z, r24
    149c:	0e c0       	rjmp	.+28     	; 0x14ba <DIO_voidSetPortValue+0x74>
			case PORT_B:	PORTB = Copy_u8Value;		break;
    149e:	e8 e3       	ldi	r30, 0x38	; 56
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	80 83       	st	Z, r24
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <DIO_voidSetPortValue+0x74>
			case PORT_C:	PORTC = Copy_u8Value;		break;
    14a8:	e5 e3       	ldi	r30, 0x35	; 53
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	80 83       	st	Z, r24
    14b0:	04 c0       	rjmp	.+8      	; 0x14ba <DIO_voidSetPortValue+0x74>
			case PORT_D:	PORTD = Copy_u8Value;		break;
    14b2:	e2 e3       	ldi	r30, 0x32	; 50
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	80 83       	st	Z, r24
			
	    }
	

}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <DIO_voidTogglePin>:


void DIO_voidTogglePin(uint8 Copy_u8Port, uint8 Copy_u8Pin){
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <DIO_voidTogglePin+0x6>
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <DIO_voidTogglePin+0x8>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8Port){ 
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	3c 83       	std	Y+4, r19	; 0x04
    14e0:	2b 83       	std	Y+3, r18	; 0x03
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	91 05       	cpc	r25, r1
    14ea:	49 f1       	breq	.+82     	; 0x153e <DIO_voidTogglePin+0x76>
    14ec:	2b 81       	ldd	r18, Y+3	; 0x03
    14ee:	3c 81       	ldd	r19, Y+4	; 0x04
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	2c f4       	brge	.+10     	; 0x1500 <DIO_voidTogglePin+0x38>
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	61 f0       	breq	.+24     	; 0x1516 <DIO_voidTogglePin+0x4e>
    14fe:	5a c0       	rjmp	.+180    	; 0x15b4 <DIO_voidTogglePin+0xec>
    1500:	2b 81       	ldd	r18, Y+3	; 0x03
    1502:	3c 81       	ldd	r19, Y+4	; 0x04
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	71 f1       	breq	.+92     	; 0x1566 <DIO_voidTogglePin+0x9e>
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	83 30       	cpi	r24, 0x03	; 3
    1510:	91 05       	cpc	r25, r1
    1512:	e9 f1       	breq	.+122    	; 0x158e <DIO_voidTogglePin+0xc6>
    1514:	4f c0       	rjmp	.+158    	; 0x15b4 <DIO_voidTogglePin+0xec>
	
		case PORT_A:  TOG_BIT(PORTA, Copy_u8Pin);    break;
    1516:	ab e3       	ldi	r26, 0x3B	; 59
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	eb e3       	ldi	r30, 0x3B	; 59
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 2e       	mov	r0, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <DIO_voidTogglePin+0x6c>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <DIO_voidTogglePin+0x68>
    1538:	84 27       	eor	r24, r20
    153a:	8c 93       	st	X, r24
    153c:	3b c0       	rjmp	.+118    	; 0x15b4 <DIO_voidTogglePin+0xec>
		
		case PORT_B:  TOG_BIT(PORTB, Copy_u8Pin);    break;
    153e:	a8 e3       	ldi	r26, 0x38	; 56
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e8 e3       	ldi	r30, 0x38	; 56
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_voidTogglePin+0x94>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_voidTogglePin+0x90>
    1560:	84 27       	eor	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	27 c0       	rjmp	.+78     	; 0x15b4 <DIO_voidTogglePin+0xec>
		
		case PORT_C:  TOG_BIT(PORTC, Copy_u8Pin);    break;
    1566:	a5 e3       	ldi	r26, 0x35	; 53
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e5 e3       	ldi	r30, 0x35	; 53
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_voidTogglePin+0xbc>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_voidTogglePin+0xb8>
    1588:	84 27       	eor	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	13 c0       	rjmp	.+38     	; 0x15b4 <DIO_voidTogglePin+0xec>
		
		case PORT_D:  TOG_BIT(PORTD, Copy_u8Pin);    break;
    158e:	a2 e3       	ldi	r26, 0x32	; 50
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e2 e3       	ldi	r30, 0x32	; 50
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_voidTogglePin+0xe4>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_voidTogglePin+0xe0>
    15b0:	84 27       	eor	r24, r20
    15b2:	8c 93       	st	X, r24
		
	}

}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <GIE_voidEnable>:
/******************************************************************************
* Function Definitions
*******************************************************************************/


void GIE_voidEnable(void){
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62

	/* Enable global interrupt */
	SET_BIT(SREG, GIE);
    15ca:	af e5       	ldi	r26, 0x5F	; 95
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ef e5       	ldi	r30, 0x5F	; 95
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 68       	ori	r24, 0x80	; 128
    15d6:	8c 93       	st	X, r24
	
}
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <GIE_voidDisable>:


void GIE_voidDisable(void){
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62

	/* Disable global interrupt */
	CLR_BIT(SREG, GIE);
    15e6:	af e5       	ldi	r26, 0x5F	; 95
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ef e5       	ldi	r30, 0x5F	; 95
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	8f 77       	andi	r24, 0x7F	; 127
    15f2:	8c 93       	st	X, r24
	
}
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <LCD_voidWriteData>:

#include <avr/delay.h>



void LCD_voidWriteData(uint8 Copy_u8Data){
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	e9 97       	sbiw	r28, 0x39	; 57
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(RS, HIGH);
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	65 e0       	ldi	r22, 0x05	; 5
    1614:	41 e0       	ldi	r20, 0x01	; 1
    1616:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW, LOW);
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	66 e0       	ldi	r22, 0x06	; 6
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
		
	}
	
	else if(LCD_MODE == MODE_4_BIT){
	
		DIO_voidSetPortValue(PORT_DATA, Copy_u8Data & 0xF0);
    1624:	89 ad       	ldd	r24, Y+57	; 0x39
    1626:	98 2f       	mov	r25, r24
    1628:	90 7f       	andi	r25, 0xF0	; 240
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	69 2f       	mov	r22, r25
    162e:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(EN, HIGH);
    1632:	82 e0       	ldi	r24, 0x02	; 2
    1634:	67 e0       	ldi	r22, 0x07	; 7
    1636:	41 e0       	ldi	r20, 0x01	; 1
    1638:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a0 e8       	ldi	r26, 0x80	; 128
    1642:	bf e3       	ldi	r27, 0x3F	; 63
    1644:	8d ab       	std	Y+53, r24	; 0x35
    1646:	9e ab       	std	Y+54, r25	; 0x36
    1648:	af ab       	std	Y+55, r26	; 0x37
    164a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164c:	6d a9       	ldd	r22, Y+53	; 0x35
    164e:	7e a9       	ldd	r23, Y+54	; 0x36
    1650:	8f a9       	ldd	r24, Y+55	; 0x37
    1652:	98 ad       	ldd	r25, Y+56	; 0x38
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	4a ef       	ldi	r20, 0xFA	; 250
    165a:	54 e4       	ldi	r21, 0x44	; 68
    165c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	89 ab       	std	Y+49, r24	; 0x31
    1666:	9a ab       	std	Y+50, r25	; 0x32
    1668:	ab ab       	std	Y+51, r26	; 0x33
    166a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    166c:	69 a9       	ldd	r22, Y+49	; 0x31
    166e:	7a a9       	ldd	r23, Y+50	; 0x32
    1670:	8b a9       	ldd	r24, Y+51	; 0x33
    1672:	9c a9       	ldd	r25, Y+52	; 0x34
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	2c f4       	brge	.+10     	; 0x168e <LCD_voidWriteData+0x94>
		__ticks = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	98 ab       	std	Y+48, r25	; 0x30
    168a:	8f a7       	std	Y+47, r24	; 0x2f
    168c:	3f c0       	rjmp	.+126    	; 0x170c <LCD_voidWriteData+0x112>
	else if (__tmp > 65535)
    168e:	69 a9       	ldd	r22, Y+49	; 0x31
    1690:	7a a9       	ldd	r23, Y+50	; 0x32
    1692:	8b a9       	ldd	r24, Y+51	; 0x33
    1694:	9c a9       	ldd	r25, Y+52	; 0x34
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	57 e4       	ldi	r21, 0x47	; 71
    169e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	4c f5       	brge	.+82     	; 0x16f8 <LCD_voidWriteData+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	6d a9       	ldd	r22, Y+53	; 0x35
    16a8:	7e a9       	ldd	r23, Y+54	; 0x36
    16aa:	8f a9       	ldd	r24, Y+55	; 0x37
    16ac:	98 ad       	ldd	r25, Y+56	; 0x38
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e2       	ldi	r20, 0x20	; 32
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	98 ab       	std	Y+48, r25	; 0x30
    16cc:	8f a7       	std	Y+47, r24	; 0x2f
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <LCD_voidWriteData+0xf4>
    16d0:	88 ec       	ldi	r24, 0xC8	; 200
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9e a7       	std	Y+46, r25	; 0x2e
    16d6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    16da:	9e a5       	ldd	r25, Y+46	; 0x2e
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <LCD_voidWriteData+0xe2>
    16e0:	9e a7       	std	Y+46, r25	; 0x2e
    16e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e6:	98 a9       	ldd	r25, Y+48	; 0x30
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	98 ab       	std	Y+48, r25	; 0x30
    16ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f0:	98 a9       	ldd	r25, Y+48	; 0x30
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	69 f7       	brne	.-38     	; 0x16d0 <LCD_voidWriteData+0xd6>
    16f6:	14 c0       	rjmp	.+40     	; 0x1720 <LCD_voidWriteData+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f8:	69 a9       	ldd	r22, Y+49	; 0x31
    16fa:	7a a9       	ldd	r23, Y+50	; 0x32
    16fc:	8b a9       	ldd	r24, Y+51	; 0x33
    16fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	98 ab       	std	Y+48, r25	; 0x30
    170a:	8f a7       	std	Y+47, r24	; 0x2f
    170c:	8f a5       	ldd	r24, Y+47	; 0x2f
    170e:	98 a9       	ldd	r25, Y+48	; 0x30
    1710:	9c a7       	std	Y+44, r25	; 0x2c
    1712:	8b a7       	std	Y+43, r24	; 0x2b
    1714:	8b a5       	ldd	r24, Y+43	; 0x2b
    1716:	9c a5       	ldd	r25, Y+44	; 0x2c
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_voidWriteData+0x11e>
    171c:	9c a7       	std	Y+44, r25	; 0x2c
    171e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		
		DIO_voidSetPinValue(EN, LOW);
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	67 e0       	ldi	r22, 0x07	; 7
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a0 e8       	ldi	r26, 0x80	; 128
    1730:	bf e3       	ldi	r27, 0x3F	; 63
    1732:	8f a3       	std	Y+39, r24	; 0x27
    1734:	98 a7       	std	Y+40, r25	; 0x28
    1736:	a9 a7       	std	Y+41, r26	; 0x29
    1738:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173a:	6f a1       	ldd	r22, Y+39	; 0x27
    173c:	78 a5       	ldd	r23, Y+40	; 0x28
    173e:	89 a5       	ldd	r24, Y+41	; 0x29
    1740:	9a a5       	ldd	r25, Y+42	; 0x2a
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	4a ef       	ldi	r20, 0xFA	; 250
    1748:	54 e4       	ldi	r21, 0x44	; 68
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8b a3       	std	Y+35, r24	; 0x23
    1754:	9c a3       	std	Y+36, r25	; 0x24
    1756:	ad a3       	std	Y+37, r26	; 0x25
    1758:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    175a:	6b a1       	ldd	r22, Y+35	; 0x23
    175c:	7c a1       	ldd	r23, Y+36	; 0x24
    175e:	8d a1       	ldd	r24, Y+37	; 0x25
    1760:	9e a1       	ldd	r25, Y+38	; 0x26
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e8       	ldi	r20, 0x80	; 128
    1768:	5f e3       	ldi	r21, 0x3F	; 63
    176a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    176e:	88 23       	and	r24, r24
    1770:	2c f4       	brge	.+10     	; 0x177c <LCD_voidWriteData+0x182>
		__ticks = 1;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9a a3       	std	Y+34, r25	; 0x22
    1778:	89 a3       	std	Y+33, r24	; 0x21
    177a:	3f c0       	rjmp	.+126    	; 0x17fa <LCD_voidWriteData+0x200>
	else if (__tmp > 65535)
    177c:	6b a1       	ldd	r22, Y+35	; 0x23
    177e:	7c a1       	ldd	r23, Y+36	; 0x24
    1780:	8d a1       	ldd	r24, Y+37	; 0x25
    1782:	9e a1       	ldd	r25, Y+38	; 0x26
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	3f ef       	ldi	r19, 0xFF	; 255
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	57 e4       	ldi	r21, 0x47	; 71
    178c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1790:	18 16       	cp	r1, r24
    1792:	4c f5       	brge	.+82     	; 0x17e6 <LCD_voidWriteData+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1794:	6f a1       	ldd	r22, Y+39	; 0x27
    1796:	78 a5       	ldd	r23, Y+40	; 0x28
    1798:	89 a5       	ldd	r24, Y+41	; 0x29
    179a:	9a a5       	ldd	r25, Y+42	; 0x2a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e2       	ldi	r20, 0x20	; 32
    17a2:	51 e4       	ldi	r21, 0x41	; 65
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	9a a3       	std	Y+34, r25	; 0x22
    17ba:	89 a3       	std	Y+33, r24	; 0x21
    17bc:	0f c0       	rjmp	.+30     	; 0x17dc <LCD_voidWriteData+0x1e2>
    17be:	88 ec       	ldi	r24, 0xC8	; 200
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	98 a3       	std	Y+32, r25	; 0x20
    17c4:	8f 8f       	std	Y+31, r24	; 0x1f
    17c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17c8:	98 a1       	ldd	r25, Y+32	; 0x20
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <LCD_voidWriteData+0x1d0>
    17ce:	98 a3       	std	Y+32, r25	; 0x20
    17d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d2:	89 a1       	ldd	r24, Y+33	; 0x21
    17d4:	9a a1       	ldd	r25, Y+34	; 0x22
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	9a a3       	std	Y+34, r25	; 0x22
    17da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17dc:	89 a1       	ldd	r24, Y+33	; 0x21
    17de:	9a a1       	ldd	r25, Y+34	; 0x22
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	69 f7       	brne	.-38     	; 0x17be <LCD_voidWriteData+0x1c4>
    17e4:	14 c0       	rjmp	.+40     	; 0x180e <LCD_voidWriteData+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e6:	6b a1       	ldd	r22, Y+35	; 0x23
    17e8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ea:	8d a1       	ldd	r24, Y+37	; 0x25
    17ec:	9e a1       	ldd	r25, Y+38	; 0x26
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9a a3       	std	Y+34, r25	; 0x22
    17f8:	89 a3       	std	Y+33, r24	; 0x21
    17fa:	89 a1       	ldd	r24, Y+33	; 0x21
    17fc:	9a a1       	ldd	r25, Y+34	; 0x22
    17fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1800:	8d 8f       	std	Y+29, r24	; 0x1d
    1802:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1804:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <LCD_voidWriteData+0x20c>
    180a:	9e 8f       	std	Y+30, r25	; 0x1e
    180c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		
		DIO_voidSetPortValue(PORT_DATA, Copy_u8Data << 4);
    180e:	89 ad       	ldd	r24, Y+57	; 0x39
    1810:	98 2f       	mov	r25, r24
    1812:	92 95       	swap	r25
    1814:	90 7f       	andi	r25, 0xF0	; 240
    1816:	83 e0       	ldi	r24, 0x03	; 3
    1818:	69 2f       	mov	r22, r25
    181a:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(EN, HIGH);
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	67 e0       	ldi	r22, 0x07	; 7
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	a0 e8       	ldi	r26, 0x80	; 128
    182e:	bf e3       	ldi	r27, 0x3F	; 63
    1830:	89 8f       	std	Y+25, r24	; 0x19
    1832:	9a 8f       	std	Y+26, r25	; 0x1a
    1834:	ab 8f       	std	Y+27, r26	; 0x1b
    1836:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1838:	69 8d       	ldd	r22, Y+25	; 0x19
    183a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    183c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    183e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	4a ef       	ldi	r20, 0xFA	; 250
    1846:	54 e4       	ldi	r21, 0x44	; 68
    1848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	8d 8b       	std	Y+21, r24	; 0x15
    1852:	9e 8b       	std	Y+22, r25	; 0x16
    1854:	af 8b       	std	Y+23, r26	; 0x17
    1856:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1858:	6d 89       	ldd	r22, Y+21	; 0x15
    185a:	7e 89       	ldd	r23, Y+22	; 0x16
    185c:	8f 89       	ldd	r24, Y+23	; 0x17
    185e:	98 8d       	ldd	r25, Y+24	; 0x18
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e8       	ldi	r20, 0x80	; 128
    1866:	5f e3       	ldi	r21, 0x3F	; 63
    1868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186c:	88 23       	and	r24, r24
    186e:	2c f4       	brge	.+10     	; 0x187a <LCD_voidWriteData+0x280>
		__ticks = 1;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9c 8b       	std	Y+20, r25	; 0x14
    1876:	8b 8b       	std	Y+19, r24	; 0x13
    1878:	3f c0       	rjmp	.+126    	; 0x18f8 <LCD_voidWriteData+0x2fe>
	else if (__tmp > 65535)
    187a:	6d 89       	ldd	r22, Y+21	; 0x15
    187c:	7e 89       	ldd	r23, Y+22	; 0x16
    187e:	8f 89       	ldd	r24, Y+23	; 0x17
    1880:	98 8d       	ldd	r25, Y+24	; 0x18
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	3f ef       	ldi	r19, 0xFF	; 255
    1886:	4f e7       	ldi	r20, 0x7F	; 127
    1888:	57 e4       	ldi	r21, 0x47	; 71
    188a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    188e:	18 16       	cp	r1, r24
    1890:	4c f5       	brge	.+82     	; 0x18e4 <LCD_voidWriteData+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1892:	69 8d       	ldd	r22, Y+25	; 0x19
    1894:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1896:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1898:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e2       	ldi	r20, 0x20	; 32
    18a0:	51 e4       	ldi	r21, 0x41	; 65
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9c 8b       	std	Y+20, r25	; 0x14
    18b8:	8b 8b       	std	Y+19, r24	; 0x13
    18ba:	0f c0       	rjmp	.+30     	; 0x18da <LCD_voidWriteData+0x2e0>
    18bc:	88 ec       	ldi	r24, 0xC8	; 200
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9a 8b       	std	Y+18, r25	; 0x12
    18c2:	89 8b       	std	Y+17, r24	; 0x11
    18c4:	89 89       	ldd	r24, Y+17	; 0x11
    18c6:	9a 89       	ldd	r25, Y+18	; 0x12
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <LCD_voidWriteData+0x2ce>
    18cc:	9a 8b       	std	Y+18, r25	; 0x12
    18ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d0:	8b 89       	ldd	r24, Y+19	; 0x13
    18d2:	9c 89       	ldd	r25, Y+20	; 0x14
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	9c 8b       	std	Y+20, r25	; 0x14
    18d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18da:	8b 89       	ldd	r24, Y+19	; 0x13
    18dc:	9c 89       	ldd	r25, Y+20	; 0x14
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	69 f7       	brne	.-38     	; 0x18bc <LCD_voidWriteData+0x2c2>
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <LCD_voidWriteData+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e4:	6d 89       	ldd	r22, Y+21	; 0x15
    18e6:	7e 89       	ldd	r23, Y+22	; 0x16
    18e8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ea:	98 8d       	ldd	r25, Y+24	; 0x18
    18ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	9c 8b       	std	Y+20, r25	; 0x14
    18f6:	8b 8b       	std	Y+19, r24	; 0x13
    18f8:	8b 89       	ldd	r24, Y+19	; 0x13
    18fa:	9c 89       	ldd	r25, Y+20	; 0x14
    18fc:	98 8b       	std	Y+16, r25	; 0x10
    18fe:	8f 87       	std	Y+15, r24	; 0x0f
    1900:	8f 85       	ldd	r24, Y+15	; 0x0f
    1902:	98 89       	ldd	r25, Y+16	; 0x10
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <LCD_voidWriteData+0x30a>
    1908:	98 8b       	std	Y+16, r25	; 0x10
    190a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		
		DIO_voidSetPinValue(EN, LOW);
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	67 e0       	ldi	r22, 0x07	; 7
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a0 e8       	ldi	r26, 0x80	; 128
    191c:	bf e3       	ldi	r27, 0x3F	; 63
    191e:	8b 87       	std	Y+11, r24	; 0x0b
    1920:	9c 87       	std	Y+12, r25	; 0x0c
    1922:	ad 87       	std	Y+13, r26	; 0x0d
    1924:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1926:	6b 85       	ldd	r22, Y+11	; 0x0b
    1928:	7c 85       	ldd	r23, Y+12	; 0x0c
    192a:	8d 85       	ldd	r24, Y+13	; 0x0d
    192c:	9e 85       	ldd	r25, Y+14	; 0x0e
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	4a ef       	ldi	r20, 0xFA	; 250
    1934:	54 e4       	ldi	r21, 0x44	; 68
    1936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	8f 83       	std	Y+7, r24	; 0x07
    1940:	98 87       	std	Y+8, r25	; 0x08
    1942:	a9 87       	std	Y+9, r26	; 0x09
    1944:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
    1948:	78 85       	ldd	r23, Y+8	; 0x08
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e8       	ldi	r20, 0x80	; 128
    1954:	5f e3       	ldi	r21, 0x3F	; 63
    1956:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195a:	88 23       	and	r24, r24
    195c:	2c f4       	brge	.+10     	; 0x1968 <LCD_voidWriteData+0x36e>
		__ticks = 1;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
    1966:	3f c0       	rjmp	.+126    	; 0x19e6 <LCD_voidWriteData+0x3ec>
	else if (__tmp > 65535)
    1968:	6f 81       	ldd	r22, Y+7	; 0x07
    196a:	78 85       	ldd	r23, Y+8	; 0x08
    196c:	89 85       	ldd	r24, Y+9	; 0x09
    196e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	57 e4       	ldi	r21, 0x47	; 71
    1978:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    197c:	18 16       	cp	r1, r24
    197e:	4c f5       	brge	.+82     	; 0x19d2 <LCD_voidWriteData+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1980:	6b 85       	ldd	r22, Y+11	; 0x0b
    1982:	7c 85       	ldd	r23, Y+12	; 0x0c
    1984:	8d 85       	ldd	r24, Y+13	; 0x0d
    1986:	9e 85       	ldd	r25, Y+14	; 0x0e
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e2       	ldi	r20, 0x20	; 32
    198e:	51 e4       	ldi	r21, 0x41	; 65
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <LCD_voidWriteData+0x3ce>
    19aa:	88 ec       	ldi	r24, 0xC8	; 200
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9c 83       	std	Y+4, r25	; 0x04
    19b0:	8b 83       	std	Y+3, r24	; 0x03
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <LCD_voidWriteData+0x3bc>
    19ba:	9c 83       	std	Y+4, r25	; 0x04
    19bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	9e 81       	ldd	r25, Y+6	; 0x06
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	69 f7       	brne	.-38     	; 0x19aa <LCD_voidWriteData+0x3b0>
    19d0:	14 c0       	rjmp	.+40     	; 0x19fa <LCD_voidWriteData+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	9e 83       	std	Y+6, r25	; 0x06
    19e4:	8d 83       	std	Y+5, r24	; 0x05
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <LCD_voidWriteData+0x3f8>
    19f6:	9a 83       	std	Y+2, r25	; 0x02
    19f8:	89 83       	std	Y+1, r24	; 0x01
		
	}	
	
	else{   asm("NOP");  }
		
}
    19fa:	e9 96       	adiw	r28, 0x39	; 57
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <LCD_voidSendCommand>:


void LCD_voidSendCommand(uint8 Copy_u8Command){
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	e9 97       	sbiw	r28, 0x39	; 57
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue (RS, LOW);
    1a22:	82 e0       	ldi	r24, 0x02	; 2
    1a24:	65 e0       	ldi	r22, 0x05	; 5
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (RW, LOW);
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	66 e0       	ldi	r22, 0x06	; 6
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
		
	}
	
	else if(LCD_MODE == MODE_4_BIT){

		DIO_voidSetPortValue(PORT_DATA, Copy_u8Command & 0xF0);
    1a36:	89 ad       	ldd	r24, Y+57	; 0x39
    1a38:	98 2f       	mov	r25, r24
    1a3a:	90 7f       	andi	r25, 0xF0	; 240
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	69 2f       	mov	r22, r25
    1a40:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(EN, HIGH);
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	67 e0       	ldi	r22, 0x07	; 7
    1a48:	41 e0       	ldi	r20, 0x01	; 1
    1a4a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e8       	ldi	r26, 0x80	; 128
    1a54:	bf e3       	ldi	r27, 0x3F	; 63
    1a56:	8d ab       	std	Y+53, r24	; 0x35
    1a58:	9e ab       	std	Y+54, r25	; 0x36
    1a5a:	af ab       	std	Y+55, r26	; 0x37
    1a5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a60:	7e a9       	ldd	r23, Y+54	; 0x36
    1a62:	8f a9       	ldd	r24, Y+55	; 0x37
    1a64:	98 ad       	ldd	r25, Y+56	; 0x38
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a ef       	ldi	r20, 0xFA	; 250
    1a6c:	54 e4       	ldi	r21, 0x44	; 68
    1a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	89 ab       	std	Y+49, r24	; 0x31
    1a78:	9a ab       	std	Y+50, r25	; 0x32
    1a7a:	ab ab       	std	Y+51, r26	; 0x33
    1a7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a80:	7a a9       	ldd	r23, Y+50	; 0x32
    1a82:	8b a9       	ldd	r24, Y+51	; 0x33
    1a84:	9c a9       	ldd	r25, Y+52	; 0x34
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a92:	88 23       	and	r24, r24
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <LCD_voidSendCommand+0x94>
		__ticks = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	98 ab       	std	Y+48, r25	; 0x30
    1a9c:	8f a7       	std	Y+47, r24	; 0x2f
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <LCD_voidSendCommand+0x112>
	else if (__tmp > 65535)
    1aa0:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa2:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa4:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa6:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	4c f5       	brge	.+82     	; 0x1b0a <LCD_voidSendCommand+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aba:	7e a9       	ldd	r23, Y+54	; 0x36
    1abc:	8f a9       	ldd	r24, Y+55	; 0x37
    1abe:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	98 ab       	std	Y+48, r25	; 0x30
    1ade:	8f a7       	std	Y+47, r24	; 0x2f
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <LCD_voidSendCommand+0xf4>
    1ae2:	88 ec       	ldi	r24, 0xC8	; 200
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9e a7       	std	Y+46, r25	; 0x2e
    1ae8:	8d a7       	std	Y+45, r24	; 0x2d
    1aea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aec:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <LCD_voidSendCommand+0xe2>
    1af2:	9e a7       	std	Y+46, r25	; 0x2e
    1af4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af8:	98 a9       	ldd	r25, Y+48	; 0x30
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	98 ab       	std	Y+48, r25	; 0x30
    1afe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b02:	98 a9       	ldd	r25, Y+48	; 0x30
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <LCD_voidSendCommand+0xd6>
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <LCD_voidSendCommand+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b10:	9c a9       	ldd	r25, Y+52	; 0x34
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	98 ab       	std	Y+48, r25	; 0x30
    1b1c:	8f a7       	std	Y+47, r24	; 0x2f
    1b1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b20:	98 a9       	ldd	r25, Y+48	; 0x30
    1b22:	9c a7       	std	Y+44, r25	; 0x2c
    1b24:	8b a7       	std	Y+43, r24	; 0x2b
    1b26:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b28:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_voidSendCommand+0x11e>
    1b2e:	9c a7       	std	Y+44, r25	; 0x2c
    1b30:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		
		DIO_voidSetPinValue(EN, LOW);
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	67 e0       	ldi	r22, 0x07	; 7
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a0 e8       	ldi	r26, 0x80	; 128
    1b42:	bf e3       	ldi	r27, 0x3F	; 63
    1b44:	8f a3       	std	Y+39, r24	; 0x27
    1b46:	98 a7       	std	Y+40, r25	; 0x28
    1b48:	a9 a7       	std	Y+41, r26	; 0x29
    1b4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b50:	89 a5       	ldd	r24, Y+41	; 0x29
    1b52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	4a ef       	ldi	r20, 0xFA	; 250
    1b5a:	54 e4       	ldi	r21, 0x44	; 68
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8b a3       	std	Y+35, r24	; 0x23
    1b66:	9c a3       	std	Y+36, r25	; 0x24
    1b68:	ad a3       	std	Y+37, r26	; 0x25
    1b6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b70:	8d a1       	ldd	r24, Y+37	; 0x25
    1b72:	9e a1       	ldd	r25, Y+38	; 0x26
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e8       	ldi	r20, 0x80	; 128
    1b7a:	5f e3       	ldi	r21, 0x3F	; 63
    1b7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b80:	88 23       	and	r24, r24
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <LCD_voidSendCommand+0x182>
		__ticks = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9a a3       	std	Y+34, r25	; 0x22
    1b8a:	89 a3       	std	Y+33, r24	; 0x21
    1b8c:	3f c0       	rjmp	.+126    	; 0x1c0c <LCD_voidSendCommand+0x200>
	else if (__tmp > 65535)
    1b8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b90:	7c a1       	ldd	r23, Y+36	; 0x24
    1b92:	8d a1       	ldd	r24, Y+37	; 0x25
    1b94:	9e a1       	ldd	r25, Y+38	; 0x26
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	3f ef       	ldi	r19, 0xFF	; 255
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	57 e4       	ldi	r21, 0x47	; 71
    1b9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	4c f5       	brge	.+82     	; 0x1bf8 <LCD_voidSendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba8:	78 a5       	ldd	r23, Y+40	; 0x28
    1baa:	89 a5       	ldd	r24, Y+41	; 0x29
    1bac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e2       	ldi	r20, 0x20	; 32
    1bb4:	51 e4       	ldi	r21, 0x41	; 65
    1bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9a a3       	std	Y+34, r25	; 0x22
    1bcc:	89 a3       	std	Y+33, r24	; 0x21
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <LCD_voidSendCommand+0x1e2>
    1bd0:	88 ec       	ldi	r24, 0xC8	; 200
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	98 a3       	std	Y+32, r25	; 0x20
    1bd6:	8f 8f       	std	Y+31, r24	; 0x1f
    1bd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bda:	98 a1       	ldd	r25, Y+32	; 0x20
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_voidSendCommand+0x1d0>
    1be0:	98 a3       	std	Y+32, r25	; 0x20
    1be2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	89 a1       	ldd	r24, Y+33	; 0x21
    1be6:	9a a1       	ldd	r25, Y+34	; 0x22
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	9a a3       	std	Y+34, r25	; 0x22
    1bec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bee:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <LCD_voidSendCommand+0x1c4>
    1bf6:	14 c0       	rjmp	.+40     	; 0x1c20 <LCD_voidSendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9a a3       	std	Y+34, r25	; 0x22
    1c0a:	89 a3       	std	Y+33, r24	; 0x21
    1c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c10:	9e 8f       	std	Y+30, r25	; 0x1e
    1c12:	8d 8f       	std	Y+29, r24	; 0x1d
    1c14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_voidSendCommand+0x20c>
    1c1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c1e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
	
		DIO_voidSetPortValue(PORT_DATA, Copy_u8Command << 4);
    1c20:	89 ad       	ldd	r24, Y+57	; 0x39
    1c22:	98 2f       	mov	r25, r24
    1c24:	92 95       	swap	r25
    1c26:	90 7f       	andi	r25, 0xF0	; 240
    1c28:	83 e0       	ldi	r24, 0x03	; 3
    1c2a:	69 2f       	mov	r22, r25
    1c2c:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_voidSetPortValue>
	
		DIO_voidSetPinValue(EN, HIGH);
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	67 e0       	ldi	r22, 0x07	; 7
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e8       	ldi	r26, 0x80	; 128
    1c40:	bf e3       	ldi	r27, 0x3F	; 63
    1c42:	89 8f       	std	Y+25, r24	; 0x19
    1c44:	9a 8f       	std	Y+26, r25	; 0x1a
    1c46:	ab 8f       	std	Y+27, r26	; 0x1b
    1c48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a ef       	ldi	r20, 0xFA	; 250
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8d 8b       	std	Y+21, r24	; 0x15
    1c64:	9e 8b       	std	Y+22, r25	; 0x16
    1c66:	af 8b       	std	Y+23, r26	; 0x17
    1c68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c70:	98 8d       	ldd	r25, Y+24	; 0x18
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD_voidSendCommand+0x280>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <LCD_voidSendCommand+0x2fe>
	else if (__tmp > 65535)
    1c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c90:	8f 89       	ldd	r24, Y+23	; 0x17
    1c92:	98 8d       	ldd	r25, Y+24	; 0x18
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <LCD_voidSendCommand+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD_voidSendCommand+0x2e0>
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9a 8b       	std	Y+18, r25	; 0x12
    1cd4:	89 8b       	std	Y+17, r24	; 0x11
    1cd6:	89 89       	ldd	r24, Y+17	; 0x11
    1cd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_voidSendCommand+0x2ce>
    1cde:	9a 8b       	std	Y+18, r25	; 0x12
    1ce0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9c 8b       	std	Y+20, r25	; 0x14
    1cea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	8b 89       	ldd	r24, Y+19	; 0x13
    1cee:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <LCD_voidSendCommand+0x2c2>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <LCD_voidSendCommand+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9c 8b       	std	Y+20, r25	; 0x14
    1d08:	8b 8b       	std	Y+19, r24	; 0x13
    1d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0e:	98 8b       	std	Y+16, r25	; 0x10
    1d10:	8f 87       	std	Y+15, r24	; 0x0f
    1d12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d14:	98 89       	ldd	r25, Y+16	; 0x10
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_voidSendCommand+0x30a>
    1d1a:	98 8b       	std	Y+16, r25	; 0x10
    1d1c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	
		DIO_voidSetPinValue(EN, LOW);
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	67 e0       	ldi	r22, 0x07	; 7
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e8       	ldi	r26, 0x80	; 128
    1d2e:	bf e3       	ldi	r27, 0x3F	; 63
    1d30:	8b 87       	std	Y+11, r24	; 0x0b
    1d32:	9c 87       	std	Y+12, r25	; 0x0c
    1d34:	ad 87       	std	Y+13, r26	; 0x0d
    1d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4a ef       	ldi	r20, 0xFA	; 250
    1d46:	54 e4       	ldi	r21, 0x44	; 68
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	8f 83       	std	Y+7, r24	; 0x07
    1d52:	98 87       	std	Y+8, r25	; 0x08
    1d54:	a9 87       	std	Y+9, r26	; 0x09
    1d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e8       	ldi	r20, 0x80	; 128
    1d66:	5f e3       	ldi	r21, 0x3F	; 63
    1d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	2c f4       	brge	.+10     	; 0x1d7a <LCD_voidSendCommand+0x36e>
		__ticks = 1;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
    1d78:	3f c0       	rjmp	.+126    	; 0x1df8 <LCD_voidSendCommand+0x3ec>
	else if (__tmp > 65535)
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	3f ef       	ldi	r19, 0xFF	; 255
    1d86:	4f e7       	ldi	r20, 0x7F	; 127
    1d88:	57 e4       	ldi	r21, 0x47	; 71
    1d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8e:	18 16       	cp	r1, r24
    1d90:	4c f5       	brge	.+82     	; 0x1de4 <LCD_voidSendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e2       	ldi	r20, 0x20	; 32
    1da0:	51 e4       	ldi	r21, 0x41	; 65
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	bc 01       	movw	r22, r24
    1dac:	cd 01       	movw	r24, r26
    1dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	8d 83       	std	Y+5, r24	; 0x05
    1dba:	0f c0       	rjmp	.+30     	; 0x1dda <LCD_voidSendCommand+0x3ce>
    1dbc:	88 ec       	ldi	r24, 0xC8	; 200
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <LCD_voidSendCommand+0x3bc>
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	69 f7       	brne	.-38     	; 0x1dbc <LCD_voidSendCommand+0x3b0>
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <LCD_voidSendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de4:	6f 81       	ldd	r22, Y+7	; 0x07
    1de6:	78 85       	ldd	r23, Y+8	; 0x08
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	9e 83       	std	Y+6, r25	; 0x06
    1df6:	8d 83       	std	Y+5, r24	; 0x05
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_voidSendCommand+0x3f8>
    1e08:	9a 83       	std	Y+2, r25	; 0x02
    1e0a:	89 83       	std	Y+1, r24	; 0x01
		
	}	
	
	else{   asm("NOP");  }

}
    1e0c:	e9 96       	adiw	r28, 0x39	; 57
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <LCD_voidInit>:



void LCD_voidInit(void){
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	e8 97       	sbiw	r28, 0x38	; 56
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61

	/* set port data as output */
	DIO_voidSetPortDirection(PORT_DATA, 0xFF);
    1e32:	83 e0       	ldi	r24, 0x03	; 3
    1e34:	6f ef       	ldi	r22, 0xFF	; 255
    1e36:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <DIO_voidSetPortDirection>
		
	/* set RS, RW, EN pins  as output */
	DIO_voidSetPinDirection(RS, OUTPUT);
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
    1e3c:	65 e0       	ldi	r22, 0x05	; 5
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(RW, OUTPUT);
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	66 e0       	ldi	r22, 0x06	; 6
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(EN, OUTPUT);
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	67 e0       	ldi	r22, 0x07	; 7
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_voidSetPinDirection>
		
	/* Init data port & EN by zero */
	DIO_voidSetPortValue(PORT_DATA, LOW);
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(EN, LOW);
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	67 e0       	ldi	r22, 0x07	; 7
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a0 e2       	ldi	r26, 0x20	; 32
    1e70:	b2 e4       	ldi	r27, 0x42	; 66
    1e72:	8d ab       	std	Y+53, r24	; 0x35
    1e74:	9e ab       	std	Y+54, r25	; 0x36
    1e76:	af ab       	std	Y+55, r26	; 0x37
    1e78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e7c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e7e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e80:	98 ad       	ldd	r25, Y+56	; 0x38
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4a ef       	ldi	r20, 0xFA	; 250
    1e88:	54 e4       	ldi	r21, 0x44	; 68
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	89 ab       	std	Y+49, r24	; 0x31
    1e94:	9a ab       	std	Y+50, r25	; 0x32
    1e96:	ab ab       	std	Y+51, r26	; 0x33
    1e98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e8       	ldi	r20, 0x80	; 128
    1ea8:	5f e3       	ldi	r21, 0x3F	; 63
    1eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eae:	88 23       	and	r24, r24
    1eb0:	2c f4       	brge	.+10     	; 0x1ebc <LCD_voidInit+0x9e>
		__ticks = 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	98 ab       	std	Y+48, r25	; 0x30
    1eb8:	8f a7       	std	Y+47, r24	; 0x2f
    1eba:	3f c0       	rjmp	.+126    	; 0x1f3a <LCD_voidInit+0x11c>
	else if (__tmp > 65535)
    1ebc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ebe:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	3f ef       	ldi	r19, 0xFF	; 255
    1ec8:	4f e7       	ldi	r20, 0x7F	; 127
    1eca:	57 e4       	ldi	r21, 0x47	; 71
    1ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed0:	18 16       	cp	r1, r24
    1ed2:	4c f5       	brge	.+82     	; 0x1f26 <LCD_voidInit+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ed6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eda:	98 ad       	ldd	r25, Y+56	; 0x38
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e2       	ldi	r20, 0x20	; 32
    1ee2:	51 e4       	ldi	r21, 0x41	; 65
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	98 ab       	std	Y+48, r25	; 0x30
    1efa:	8f a7       	std	Y+47, r24	; 0x2f
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <LCD_voidInit+0xfe>
    1efe:	88 ec       	ldi	r24, 0xC8	; 200
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9e a7       	std	Y+46, r25	; 0x2e
    1f04:	8d a7       	std	Y+45, r24	; 0x2d
    1f06:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f08:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <LCD_voidInit+0xec>
    1f0e:	9e a7       	std	Y+46, r25	; 0x2e
    1f10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f14:	98 a9       	ldd	r25, Y+48	; 0x30
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	98 ab       	std	Y+48, r25	; 0x30
    1f1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	69 f7       	brne	.-38     	; 0x1efe <LCD_voidInit+0xe0>
    1f24:	14 c0       	rjmp	.+40     	; 0x1f4e <LCD_voidInit+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f26:	69 a9       	ldd	r22, Y+49	; 0x31
    1f28:	7a a9       	ldd	r23, Y+50	; 0x32
    1f2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	98 ab       	std	Y+48, r25	; 0x30
    1f38:	8f a7       	std	Y+47, r24	; 0x2f
    1f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3e:	9c a7       	std	Y+44, r25	; 0x2c
    1f40:	8b a7       	std	Y+43, r24	; 0x2b
    1f42:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f44:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD_voidInit+0x128>
    1f4a:	9c a7       	std	Y+44, r25	; 0x2c
    1f4c:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_voidSendCommand(DISPLAY_CLEAR);
		_delay_ms(2);
		
	#elif LCD_MODE == MODE_4_BIT
		
		LCD_voidSendCommand(0x33);
    1f4e:	83 e3       	ldi	r24, 0x33	; 51
    1f50:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_voidSendCommand>
		LCD_voidSendCommand(0x32);
    1f54:	82 e3       	ldi	r24, 0x32	; 50
    1f56:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_voidSendCommand>
		LCD_voidSendCommand(0x28);
    1f5a:	88 e2       	ldi	r24, 0x28	; 40
    1f5c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_voidSendCommand>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e8       	ldi	r26, 0x80	; 128
    1f66:	bf e3       	ldi	r27, 0x3F	; 63
    1f68:	8f a3       	std	Y+39, r24	; 0x27
    1f6a:	98 a7       	std	Y+40, r25	; 0x28
    1f6c:	a9 a7       	std	Y+41, r26	; 0x29
    1f6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f70:	6f a1       	ldd	r22, Y+39	; 0x27
    1f72:	78 a5       	ldd	r23, Y+40	; 0x28
    1f74:	89 a5       	ldd	r24, Y+41	; 0x29
    1f76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a ef       	ldi	r20, 0xFA	; 250
    1f7e:	54 e4       	ldi	r21, 0x44	; 68
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	8b a3       	std	Y+35, r24	; 0x23
    1f8a:	9c a3       	std	Y+36, r25	; 0x24
    1f8c:	ad a3       	std	Y+37, r26	; 0x25
    1f8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f90:	6b a1       	ldd	r22, Y+35	; 0x23
    1f92:	7c a1       	ldd	r23, Y+36	; 0x24
    1f94:	8d a1       	ldd	r24, Y+37	; 0x25
    1f96:	9e a1       	ldd	r25, Y+38	; 0x26
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <LCD_voidInit+0x194>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9a a3       	std	Y+34, r25	; 0x22
    1fae:	89 a3       	std	Y+33, r24	; 0x21
    1fb0:	3f c0       	rjmp	.+126    	; 0x2030 <LCD_voidInit+0x212>
	else if (__tmp > 65535)
    1fb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	4f e7       	ldi	r20, 0x7F	; 127
    1fc0:	57 e4       	ldi	r21, 0x47	; 71
    1fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	4c f5       	brge	.+82     	; 0x201c <LCD_voidInit+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fca:	6f a1       	ldd	r22, Y+39	; 0x27
    1fcc:	78 a5       	ldd	r23, Y+40	; 0x28
    1fce:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9a a3       	std	Y+34, r25	; 0x22
    1ff0:	89 a3       	std	Y+33, r24	; 0x21
    1ff2:	0f c0       	rjmp	.+30     	; 0x2012 <LCD_voidInit+0x1f4>
    1ff4:	88 ec       	ldi	r24, 0xC8	; 200
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	98 a3       	std	Y+32, r25	; 0x20
    1ffa:	8f 8f       	std	Y+31, r24	; 0x1f
    1ffc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ffe:	98 a1       	ldd	r25, Y+32	; 0x20
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_voidInit+0x1e2>
    2004:	98 a3       	std	Y+32, r25	; 0x20
    2006:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	89 a1       	ldd	r24, Y+33	; 0x21
    200a:	9a a1       	ldd	r25, Y+34	; 0x22
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	9a a3       	std	Y+34, r25	; 0x22
    2010:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	89 a1       	ldd	r24, Y+33	; 0x21
    2014:	9a a1       	ldd	r25, Y+34	; 0x22
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <LCD_voidInit+0x1d6>
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <LCD_voidInit+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	6b a1       	ldd	r22, Y+35	; 0x23
    201e:	7c a1       	ldd	r23, Y+36	; 0x24
    2020:	8d a1       	ldd	r24, Y+37	; 0x25
    2022:	9e a1       	ldd	r25, Y+38	; 0x26
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9a a3       	std	Y+34, r25	; 0x22
    202e:	89 a3       	std	Y+33, r24	; 0x21
    2030:	89 a1       	ldd	r24, Y+33	; 0x21
    2032:	9a a1       	ldd	r25, Y+34	; 0x22
    2034:	9e 8f       	std	Y+30, r25	; 0x1e
    2036:	8d 8f       	std	Y+29, r24	; 0x1d
    2038:	8d 8d       	ldd	r24, Y+29	; 0x1d
    203a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_voidInit+0x21e>
    2040:	9e 8f       	std	Y+30, r25	; 0x1e
    2042:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		
		LCD_voidSendCommand(DISPLAY_ON_OFF);
    2044:	8e e0       	ldi	r24, 0x0E	; 14
    2046:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_voidSendCommand>
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a0 e8       	ldi	r26, 0x80	; 128
    2050:	bf e3       	ldi	r27, 0x3F	; 63
    2052:	89 8f       	std	Y+25, r24	; 0x19
    2054:	9a 8f       	std	Y+26, r25	; 0x1a
    2056:	ab 8f       	std	Y+27, r26	; 0x1b
    2058:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	69 8d       	ldd	r22, Y+25	; 0x19
    205c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a ef       	ldi	r20, 0xFA	; 250
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8d 8b       	std	Y+21, r24	; 0x15
    2074:	9e 8b       	std	Y+22, r25	; 0x16
    2076:	af 8b       	std	Y+23, r26	; 0x17
    2078:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    207a:	6d 89       	ldd	r22, Y+21	; 0x15
    207c:	7e 89       	ldd	r23, Y+22	; 0x16
    207e:	8f 89       	ldd	r24, Y+23	; 0x17
    2080:	98 8d       	ldd	r25, Y+24	; 0x18
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <LCD_voidInit+0x27e>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c 8b       	std	Y+20, r25	; 0x14
    2098:	8b 8b       	std	Y+19, r24	; 0x13
    209a:	3f c0       	rjmp	.+126    	; 0x211a <LCD_voidInit+0x2fc>
	else if (__tmp > 65535)
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <LCD_voidInit+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	69 8d       	ldd	r22, Y+25	; 0x19
    20b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9c 8b       	std	Y+20, r25	; 0x14
    20da:	8b 8b       	std	Y+19, r24	; 0x13
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <LCD_voidInit+0x2de>
    20de:	88 ec       	ldi	r24, 0xC8	; 200
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9a 8b       	std	Y+18, r25	; 0x12
    20e4:	89 8b       	std	Y+17, r24	; 0x11
    20e6:	89 89       	ldd	r24, Y+17	; 0x11
    20e8:	9a 89       	ldd	r25, Y+18	; 0x12
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_voidInit+0x2cc>
    20ee:	9a 8b       	std	Y+18, r25	; 0x12
    20f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	8b 89       	ldd	r24, Y+19	; 0x13
    20f4:	9c 89       	ldd	r25, Y+20	; 0x14
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9c 8b       	std	Y+20, r25	; 0x14
    20fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	8b 89       	ldd	r24, Y+19	; 0x13
    20fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <LCD_voidInit+0x2c0>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <LCD_voidInit+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6d 89       	ldd	r22, Y+21	; 0x15
    2108:	7e 89       	ldd	r23, Y+22	; 0x16
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	98 8d       	ldd	r25, Y+24	; 0x18
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9c 8b       	std	Y+20, r25	; 0x14
    2118:	8b 8b       	std	Y+19, r24	; 0x13
    211a:	8b 89       	ldd	r24, Y+19	; 0x13
    211c:	9c 89       	ldd	r25, Y+20	; 0x14
    211e:	98 8b       	std	Y+16, r25	; 0x10
    2120:	8f 87       	std	Y+15, r24	; 0x0f
    2122:	8f 85       	ldd	r24, Y+15	; 0x0f
    2124:	98 89       	ldd	r25, Y+16	; 0x10
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_voidInit+0x308>
    212a:	98 8b       	std	Y+16, r25	; 0x10
    212c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		
		LCD_voidSendCommand(DISPLAY_CLEAR);
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_voidSendCommand>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e0       	ldi	r26, 0x00	; 0
    213a:	b0 e4       	ldi	r27, 0x40	; 64
    213c:	8b 87       	std	Y+11, r24	; 0x0b
    213e:	9c 87       	std	Y+12, r25	; 0x0c
    2140:	ad 87       	std	Y+13, r26	; 0x0d
    2142:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	6b 85       	ldd	r22, Y+11	; 0x0b
    2146:	7c 85       	ldd	r23, Y+12	; 0x0c
    2148:	8d 85       	ldd	r24, Y+13	; 0x0d
    214a:	9e 85       	ldd	r25, Y+14	; 0x0e
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a ef       	ldi	r20, 0xFA	; 250
    2152:	54 e4       	ldi	r21, 0x44	; 68
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8f 83       	std	Y+7, r24	; 0x07
    215e:	98 87       	std	Y+8, r25	; 0x08
    2160:	a9 87       	std	Y+9, r26	; 0x09
    2162:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <LCD_voidInit+0x368>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	3f c0       	rjmp	.+126    	; 0x2204 <LCD_voidInit+0x3e6>
	else if (__tmp > 65535)
    2186:	6f 81       	ldd	r22, Y+7	; 0x07
    2188:	78 85       	ldd	r23, Y+8	; 0x08
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	9a 85       	ldd	r25, Y+10	; 0x0a
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	4c f5       	brge	.+82     	; 0x21f0 <LCD_voidInit+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <LCD_voidInit+0x3c8>
    21c8:	88 ec       	ldi	r24, 0xC8	; 200
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_voidInit+0x3b6>
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9e 83       	std	Y+6, r25	; 0x06
    21e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <LCD_voidInit+0x3aa>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <LCD_voidInit+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_voidInit+0x3f2>
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		
		LCD_voidSendCommand(0x06);
    2218:	86 e0       	ldi	r24, 0x06	; 6
    221a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_voidSendCommand>
		
	#else 
		#erroe("You Chosed Wrong LCD Mode")
	#endif
}
    221e:	e8 96       	adiw	r28, 0x38	; 56
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <LCD_voidClearScreen>:



void LCD_voidClearScreen(void){
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	2e 97       	sbiw	r28, 0x0e	; 14
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61

	LCD_voidSendCommand(DISPLAY_CLEAR);
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_voidSendCommand>
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	a0 e0       	ldi	r26, 0x00	; 0
    2250:	b0 e4       	ldi	r27, 0x40	; 64
    2252:	8b 87       	std	Y+11, r24	; 0x0b
    2254:	9c 87       	std	Y+12, r25	; 0x0c
    2256:	ad 87       	std	Y+13, r26	; 0x0d
    2258:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225a:	6b 85       	ldd	r22, Y+11	; 0x0b
    225c:	7c 85       	ldd	r23, Y+12	; 0x0c
    225e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2260:	9e 85       	ldd	r25, Y+14	; 0x0e
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4a ef       	ldi	r20, 0xFA	; 250
    2268:	54 e4       	ldi	r21, 0x44	; 68
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	8f 83       	std	Y+7, r24	; 0x07
    2274:	98 87       	std	Y+8, r25	; 0x08
    2276:	a9 87       	std	Y+9, r26	; 0x09
    2278:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    227a:	6f 81       	ldd	r22, Y+7	; 0x07
    227c:	78 85       	ldd	r23, Y+8	; 0x08
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	9a 85       	ldd	r25, Y+10	; 0x0a
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e8       	ldi	r20, 0x80	; 128
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    228e:	88 23       	and	r24, r24
    2290:	2c f4       	brge	.+10     	; 0x229c <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
    229a:	3f c0       	rjmp	.+126    	; 0x231a <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f e7       	ldi	r20, 0x7F	; 127
    22aa:	57 e4       	ldi	r21, 0x47	; 71
    22ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b0:	18 16       	cp	r1, r24
    22b2:	4c f5       	brge	.+82     	; 0x2306 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e2       	ldi	r20, 0x20	; 32
    22c2:	51 e4       	ldi	r21, 0x41	; 65
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <LCD_voidClearScreen+0xcc>
    22de:	88 ec       	ldi	r24, 0xC8	; 200
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	9c 83       	std	Y+4, r25	; 0x04
    22e4:	8b 83       	std	Y+3, r24	; 0x03
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <LCD_voidClearScreen+0xba>
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	69 f7       	brne	.-38     	; 0x22de <LCD_voidClearScreen+0xae>
    2304:	14 c0       	rjmp	.+40     	; 0x232e <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <LCD_voidClearScreen+0xf6>
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    232e:	2e 96       	adiw	r28, 0x0e	; 14
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <LCD_voidWriteString>:



void LCD_voidWriteString(uint8 *Copy_u8Ptr){
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <LCD_voidWriteString+0x6>
    2346:	0f 92       	push	r0
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	9b 83       	std	Y+3, r25	; 0x03
    234e:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8 Local_u8Counter = 0;
    2350:	19 82       	std	Y+1, r1	; 0x01
    2352:	0e c0       	rjmp	.+28     	; 0x2370 <LCD_voidWriteString+0x30>

	while(Copy_u8Ptr[Local_u8Counter] != 0){
	
		LCD_voidWriteData(Copy_u8Ptr[Local_u8Counter]);
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	9b 81       	ldd	r25, Y+3	; 0x03
    235e:	fc 01       	movw	r30, r24
    2360:	e2 0f       	add	r30, r18
    2362:	f3 1f       	adc	r31, r19
    2364:	80 81       	ld	r24, Z
    2366:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
		Local_u8Counter++;
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	8f 5f       	subi	r24, 0xFF	; 255
    236e:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(uint8 *Copy_u8Ptr){
	
	uint8 Local_u8Counter = 0;

	while(Copy_u8Ptr[Local_u8Counter] != 0){
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	9b 81       	ldd	r25, Y+3	; 0x03
    237a:	fc 01       	movw	r30, r24
    237c:	e2 0f       	add	r30, r18
    237e:	f3 1f       	adc	r31, r19
    2380:	80 81       	ld	r24, Z
    2382:	88 23       	and	r24, r24
    2384:	39 f7       	brne	.-50     	; 0x2354 <LCD_voidWriteString+0x14>
		LCD_voidWriteData(Copy_u8Ptr[Local_u8Counter]);
		Local_u8Counter++;
	
	}

}
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <LCD_voidSetPosition>:



void LCD_voidSetPosition(uint8 Copy_u8Row, uint8 Copy_u8Col){
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	00 d0       	rcall	.+0      	; 0x2398 <LCD_voidSetPosition+0x6>
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	6a 83       	std	Y+2, r22	; 0x02

	if(0 == Copy_u8Row){
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	88 23       	and	r24, r24
    23a4:	29 f4       	brne	.+10     	; 0x23b0 <LCD_voidSetPosition+0x1e>

		/* set ddram */
		LCD_voidSendCommand(128 + Copy_u8Col);
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	80 58       	subi	r24, 0x80	; 128
    23aa:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_voidSendCommand>
    23ae:	09 c0       	rjmp	.+18     	; 0x23c2 <LCD_voidSetPosition+0x30>
	}

	else if(1 == Copy_u8Row){
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	29 f4       	brne	.+10     	; 0x23c0 <LCD_voidSetPosition+0x2e>

		/* set ddram */
		LCD_voidSendCommand(128 + 64 + Copy_u8Col);
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	80 54       	subi	r24, 0x40	; 64
    23ba:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_voidSendCommand>
    23be:	01 c0       	rjmp	.+2      	; 0x23c2 <LCD_voidSetPosition+0x30>
	}

	else{  asm("NOP"); }
    23c0:	00 00       	nop

}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <LCD_voidDisplayLoop>:



void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, uint8 *Copy_u8Ptr){
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	a1 97       	sbiw	r28, 0x21	; 33
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	8e 8f       	std	Y+30, r24	; 0x1e
    23e2:	6f 8f       	std	Y+31, r22	; 0x1f
    23e4:	59 a3       	std	Y+33, r21	; 0x21
    23e6:	48 a3       	std	Y+32, r20	; 0x20

	for(uint8 i=0; i<15; i++){
    23e8:	1d 8e       	std	Y+29, r1	; 0x1d
    23ea:	f9 c0       	rjmp	.+498    	; 0x25de <LCD_voidDisplayLoop+0x212>

		LCD_voidSetPosition(Copy_u8Row, i);
    23ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    23f0:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSetPosition>

		LCD_voidWriteString(Copy_u8Ptr);
    23f4:	88 a1       	ldd	r24, Y+32	; 0x20
    23f6:	99 a1       	ldd	r25, Y+33	; 0x21
    23f8:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_voidWriteString>
		_delay_ms(Copy_u8Speed);
    23fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a0 e0       	ldi	r26, 0x00	; 0
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	89 8f       	std	Y+25, r24	; 0x19
    2414:	9a 8f       	std	Y+26, r25	; 0x1a
    2416:	ab 8f       	std	Y+27, r26	; 0x1b
    2418:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241a:	69 8d       	ldd	r22, Y+25	; 0x19
    241c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4a ef       	ldi	r20, 0xFA	; 250
    2428:	54 e4       	ldi	r21, 0x44	; 68
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	8d 8b       	std	Y+21, r24	; 0x15
    2434:	9e 8b       	std	Y+22, r25	; 0x16
    2436:	af 8b       	std	Y+23, r26	; 0x17
    2438:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    243a:	6d 89       	ldd	r22, Y+21	; 0x15
    243c:	7e 89       	ldd	r23, Y+22	; 0x16
    243e:	8f 89       	ldd	r24, Y+23	; 0x17
    2440:	98 8d       	ldd	r25, Y+24	; 0x18
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e8       	ldi	r20, 0x80	; 128
    2448:	5f e3       	ldi	r21, 0x3F	; 63
    244a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244e:	88 23       	and	r24, r24
    2450:	2c f4       	brge	.+10     	; 0x245c <LCD_voidDisplayLoop+0x90>
		__ticks = 1;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9c 8b       	std	Y+20, r25	; 0x14
    2458:	8b 8b       	std	Y+19, r24	; 0x13
    245a:	3f c0       	rjmp	.+126    	; 0x24da <LCD_voidDisplayLoop+0x10e>
	else if (__tmp > 65535)
    245c:	6d 89       	ldd	r22, Y+21	; 0x15
    245e:	7e 89       	ldd	r23, Y+22	; 0x16
    2460:	8f 89       	ldd	r24, Y+23	; 0x17
    2462:	98 8d       	ldd	r25, Y+24	; 0x18
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	4c f5       	brge	.+82     	; 0x24c6 <LCD_voidDisplayLoop+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2474:	69 8d       	ldd	r22, Y+25	; 0x19
    2476:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2478:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e2       	ldi	r20, 0x20	; 32
    2482:	51 e4       	ldi	r21, 0x41	; 65
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9c 8b       	std	Y+20, r25	; 0x14
    249a:	8b 8b       	std	Y+19, r24	; 0x13
    249c:	0f c0       	rjmp	.+30     	; 0x24bc <LCD_voidDisplayLoop+0xf0>
    249e:	88 ec       	ldi	r24, 0xC8	; 200
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9a 8b       	std	Y+18, r25	; 0x12
    24a4:	89 8b       	std	Y+17, r24	; 0x11
    24a6:	89 89       	ldd	r24, Y+17	; 0x11
    24a8:	9a 89       	ldd	r25, Y+18	; 0x12
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <LCD_voidDisplayLoop+0xde>
    24ae:	9a 8b       	std	Y+18, r25	; 0x12
    24b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b2:	8b 89       	ldd	r24, Y+19	; 0x13
    24b4:	9c 89       	ldd	r25, Y+20	; 0x14
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	9c 8b       	std	Y+20, r25	; 0x14
    24ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24bc:	8b 89       	ldd	r24, Y+19	; 0x13
    24be:	9c 89       	ldd	r25, Y+20	; 0x14
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	69 f7       	brne	.-38     	; 0x249e <LCD_voidDisplayLoop+0xd2>
    24c4:	14 c0       	rjmp	.+40     	; 0x24ee <LCD_voidDisplayLoop+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c6:	6d 89       	ldd	r22, Y+21	; 0x15
    24c8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ca:	8f 89       	ldd	r24, Y+23	; 0x17
    24cc:	98 8d       	ldd	r25, Y+24	; 0x18
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9c 8b       	std	Y+20, r25	; 0x14
    24d8:	8b 8b       	std	Y+19, r24	; 0x13
    24da:	8b 89       	ldd	r24, Y+19	; 0x13
    24dc:	9c 89       	ldd	r25, Y+20	; 0x14
    24de:	98 8b       	std	Y+16, r25	; 0x10
    24e0:	8f 87       	std	Y+15, r24	; 0x0f
    24e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e4:	98 89       	ldd	r25, Y+16	; 0x10
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <LCD_voidDisplayLoop+0x11a>
    24ea:	98 8b       	std	Y+16, r25	; 0x10
    24ec:	8f 87       	std	Y+15, r24	; 0x0f

		LCD_voidSendCommand(DISPLAY_CLEAR);
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_voidSendCommand>
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a0 e0       	ldi	r26, 0x00	; 0
    24fa:	b0 e4       	ldi	r27, 0x40	; 64
    24fc:	8b 87       	std	Y+11, r24	; 0x0b
    24fe:	9c 87       	std	Y+12, r25	; 0x0c
    2500:	ad 87       	std	Y+13, r26	; 0x0d
    2502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2504:	6b 85       	ldd	r22, Y+11	; 0x0b
    2506:	7c 85       	ldd	r23, Y+12	; 0x0c
    2508:	8d 85       	ldd	r24, Y+13	; 0x0d
    250a:	9e 85       	ldd	r25, Y+14	; 0x0e
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	4a ef       	ldi	r20, 0xFA	; 250
    2512:	54 e4       	ldi	r21, 0x44	; 68
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	8f 83       	std	Y+7, r24	; 0x07
    251e:	98 87       	std	Y+8, r25	; 0x08
    2520:	a9 87       	std	Y+9, r26	; 0x09
    2522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2524:	6f 81       	ldd	r22, Y+7	; 0x07
    2526:	78 85       	ldd	r23, Y+8	; 0x08
    2528:	89 85       	ldd	r24, Y+9	; 0x09
    252a:	9a 85       	ldd	r25, Y+10	; 0x0a
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e8       	ldi	r20, 0x80	; 128
    2532:	5f e3       	ldi	r21, 0x3F	; 63
    2534:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2538:	88 23       	and	r24, r24
    253a:	2c f4       	brge	.+10     	; 0x2546 <LCD_voidDisplayLoop+0x17a>
		__ticks = 1;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	3f c0       	rjmp	.+126    	; 0x25c4 <LCD_voidDisplayLoop+0x1f8>
	else if (__tmp > 65535)
    2546:	6f 81       	ldd	r22, Y+7	; 0x07
    2548:	78 85       	ldd	r23, Y+8	; 0x08
    254a:	89 85       	ldd	r24, Y+9	; 0x09
    254c:	9a 85       	ldd	r25, Y+10	; 0x0a
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	3f ef       	ldi	r19, 0xFF	; 255
    2552:	4f e7       	ldi	r20, 0x7F	; 127
    2554:	57 e4       	ldi	r21, 0x47	; 71
    2556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255a:	18 16       	cp	r1, r24
    255c:	4c f5       	brge	.+82     	; 0x25b0 <LCD_voidDisplayLoop+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2560:	7c 85       	ldd	r23, Y+12	; 0x0c
    2562:	8d 85       	ldd	r24, Y+13	; 0x0d
    2564:	9e 85       	ldd	r25, Y+14	; 0x0e
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9e 83       	std	Y+6, r25	; 0x06
    2584:	8d 83       	std	Y+5, r24	; 0x05
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <LCD_voidDisplayLoop+0x1da>
    2588:	88 ec       	ldi	r24, 0xC8	; 200
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9c 83       	std	Y+4, r25	; 0x04
    258e:	8b 83       	std	Y+3, r24	; 0x03
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <LCD_voidDisplayLoop+0x1c8>
    2598:	9c 83       	std	Y+4, r25	; 0x04
    259a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	9e 83       	std	Y+6, r25	; 0x06
    25a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	69 f7       	brne	.-38     	; 0x2588 <LCD_voidDisplayLoop+0x1bc>
    25ae:	14 c0       	rjmp	.+40     	; 0x25d8 <LCD_voidDisplayLoop+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <LCD_voidDisplayLoop+0x204>
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	89 83       	std	Y+1, r24	; 0x01



void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, uint8 *Copy_u8Ptr){

	for(uint8 i=0; i<15; i++){
    25d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	8d 8f       	std	Y+29, r24	; 0x1d
    25de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e0:	8f 30       	cpi	r24, 0x0F	; 15
    25e2:	08 f4       	brcc	.+2      	; 0x25e6 <LCD_voidDisplayLoop+0x21a>
    25e4:	03 cf       	rjmp	.-506    	; 0x23ec <LCD_voidDisplayLoop+0x20>

		LCD_voidSendCommand(DISPLAY_CLEAR);
		_delay_ms(2);

	}
}
    25e6:	a1 96       	adiw	r28, 0x21	; 33
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <LCD_voidSetCGRAMAdres>:


void LCD_voidSetCGRAMAdres(void){
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSendCommand(64);
    2600:	80 e4       	ldi	r24, 0x40	; 64
    2602:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_voidSendCommand>
	LCD_voidWriteData(0b00000011);
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000011);
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000011);
    2624:	83 e0       	ldi	r24, 0x03	; 3
    2626:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000101);
    262a:	85 e0       	ldi	r24, 0x05	; 5
    262c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00001001);
    2630:	89 e0       	ldi	r24, 0x09	; 9
    2632:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>

	LCD_voidWriteData(0b00011000);
    2636:	88 e1       	ldi	r24, 0x18	; 24
    2638:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00011000);
    263c:	88 e1       	ldi	r24, 0x18	; 24
    263e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2642:	80 e1       	ldi	r24, 0x10	; 16
    2644:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2648:	80 e1       	ldi	r24, 0x10	; 16
    264a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    264e:	80 e1       	ldi	r24, 0x10	; 16
    2650:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00011000);
    2654:	88 e1       	ldi	r24, 0x18	; 24
    2656:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00010100);
    265a:	84 e1       	ldi	r24, 0x14	; 20
    265c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00010010);
    2660:	82 e1       	ldi	r24, 0x12	; 18
    2662:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>

	LCD_voidWriteData(0b00000001);
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000010);
    267e:	82 e0       	ldi	r24, 0x02	; 2
    2680:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    2684:	84 e0       	ldi	r24, 0x04	; 4
    2686:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    268a:	84 e0       	ldi	r24, 0x04	; 4
    268c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00001100);
    2690:	8c e0       	ldi	r24, 0x0C	; 12
    2692:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>

	LCD_voidWriteData(0b00010000);
    2696:	80 e1       	ldi	r24, 0x10	; 16
    2698:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    269c:	80 e1       	ldi	r24, 0x10	; 16
    269e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    26a2:	80 e1       	ldi	r24, 0x10	; 16
    26a4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    26a8:	80 e1       	ldi	r24, 0x10	; 16
    26aa:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00001000);
    26ae:	88 e0       	ldi	r24, 0x08	; 8
    26b0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    26b4:	84 e0       	ldi	r24, 0x04	; 4
    26b6:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    26ba:	84 e0       	ldi	r24, 0x04	; 4
    26bc:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000110);
    26c0:	86 e0       	ldi	r24, 0x06	; 6
    26c2:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>

	LCD_voidWriteData(0b00011111);
    26c6:	8f e1       	ldi	r24, 0x1F	; 31
    26c8:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>

	LCD_voidWriteData(0b00000001);
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00011111);
    2720:	8f e1       	ldi	r24, 0x1F	; 31
    2722:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>

	LCD_voidWriteData(0b00010000);
    2726:	80 e1       	ldi	r24, 0x10	; 16
    2728:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00010010);
    272c:	82 e1       	ldi	r24, 0x12	; 18
    272e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2732:	80 e1       	ldi	r24, 0x10	; 16
    2734:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2738:	80 e1       	ldi	r24, 0x10	; 16
    273a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00001000);
    273e:	88 e0       	ldi	r24, 0x08	; 8
    2740:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    2744:	84 e0       	ldi	r24, 0x04	; 4
    2746:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000010);
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>

	LCD_voidWriteData(0b00000001);
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
}
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <LCD_voidWriteNumber>:


void LCD_voidWriteNumber(uint8 Copy_u8Value){
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	0f 92       	push	r0
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	89 83       	std	Y+1, r24	; 0x01


	LCD_voidReverceNumber(Copy_u8Value);
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_voidReverceNumber>

}
    279e:	0f 90       	pop	r0
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <LCD_voidReverceNumber>:



void LCD_voidReverceNumber(uint8 Copy_u8Value){
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <LCD_voidReverceNumber+0x6>
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Number = 0;
    27b2:	19 82       	std	Y+1, r1	; 0x01

	if(0 == Copy_u8Value){
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	88 23       	and	r24, r24
    27b8:	01 f5       	brne	.+64     	; 0x27fa <LCD_voidReverceNumber+0x54>

		LCD_voidWriteData('0');
    27ba:	80 e3       	ldi	r24, 0x30	; 48
    27bc:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
    27c0:	22 c0       	rjmp	.+68     	; 0x2806 <LCD_voidReverceNumber+0x60>

	else{

		while(Copy_u8Value > 0){

			Local_u8Number = (Local_u8Number * 10) + (Copy_u8Value % 10);
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	9c 01       	movw	r18, r24
    27ca:	22 0f       	add	r18, r18
    27cc:	33 1f       	adc	r19, r19
    27ce:	c9 01       	movw	r24, r18
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	82 0f       	add	r24, r18
    27da:	93 1f       	adc	r25, r19
    27dc:	28 2f       	mov	r18, r24
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	9a e0       	ldi	r25, 0x0A	; 10
    27e2:	69 2f       	mov	r22, r25
    27e4:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__udivmodqi4>
    27e8:	89 2f       	mov	r24, r25
    27ea:	82 0f       	add	r24, r18
    27ec:	89 83       	std	Y+1, r24	; 0x01
			Copy_u8Value = (Copy_u8Value / 10);
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	9a e0       	ldi	r25, 0x0A	; 10
    27f2:	69 2f       	mov	r22, r25
    27f4:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__udivmodqi4>
    27f8:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidWriteData('0');
	}

	else{

		while(Copy_u8Value > 0){
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	88 23       	and	r24, r24
    27fe:	09 f7       	brne	.-62     	; 0x27c2 <LCD_voidReverceNumber+0x1c>
			Local_u8Number = (Local_u8Number * 10) + (Copy_u8Value % 10);
			Copy_u8Value = (Copy_u8Value / 10);

		}

		LCD_voidDetachNumber(Local_u8Number);
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_voidDetachNumber>
	}

}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <LCD_voidDetachNumber>:



void LCD_voidDetachNumber(uint8 Copy_u8Value){
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	00 d0       	rcall	.+0      	; 0x2816 <LCD_voidDetachNumber+0x6>
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Number = 0;
    281c:	19 82       	std	Y+1, r1	; 0x01
    281e:	11 c0       	rjmp	.+34     	; 0x2842 <LCD_voidDetachNumber+0x32>

	while(Copy_u8Value > 0){

		Local_u8Number = (Copy_u8Value % 10);
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	9a e0       	ldi	r25, 0x0A	; 10
    2824:	69 2f       	mov	r22, r25
    2826:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__udivmodqi4>
    282a:	89 2f       	mov	r24, r25
    282c:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteData(Local_u8Number + 48);
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	80 5d       	subi	r24, 0xD0	; 208
    2832:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_voidWriteData>
		Copy_u8Value = (Copy_u8Value / 10);
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	9a e0       	ldi	r25, 0x0A	; 10
    283a:	69 2f       	mov	r22, r25
    283c:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__udivmodqi4>
    2840:	8a 83       	std	Y+2, r24	; 0x02

void LCD_voidDetachNumber(uint8 Copy_u8Value){

	uint8 Local_u8Number = 0;

	while(Copy_u8Value > 0){
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	88 23       	and	r24, r24
    2846:	61 f7       	brne	.-40     	; 0x2820 <LCD_voidDetachNumber+0x10>
		Local_u8Number = (Copy_u8Value % 10);
		LCD_voidWriteData(Local_u8Number + 48);
		Copy_u8Value = (Copy_u8Value / 10);
	}

}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <main>:
#include <avr/delay.h>




void main(void){
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	66 97       	sbiw	r28, 0x16	; 22
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61

	ADC_voidInit();
    2866:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <ADC_voidInit>
	LCD_voidInit();
    286a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_voidInit>

	DIO_voidSetPinDirection(PORT_B, PIN7, OUTPUT);
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	67 e0       	ldi	r22, 0x07	; 7
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_voidSetPinDirection>

	uint16 Local_u16AnalogValue = 0;
    2878:	1e 8a       	std	Y+22, r1	; 0x16
    287a:	1d 8a       	std	Y+21, r1	; 0x15
	uint16 Local_u16DigitalValue = 0;
    287c:	1c 8a       	std	Y+20, r1	; 0x14
    287e:	1b 8a       	std	Y+19, r1	; 0x13
	uint32 Local_u16Result = 0;
    2880:	1f 86       	std	Y+15, r1	; 0x0f
    2882:	18 8a       	std	Y+16, r1	; 0x10
    2884:	19 8a       	std	Y+17, r1	; 0x11
    2886:	1a 8a       	std	Y+18, r1	; 0x12

	LCD_voidClearScreen();
    2888:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_voidClearScreen>

	while(1){

		Local_u16AnalogValue = ADC_u16ReadValue(CHANNEL_A0);
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	0e 94 b1 06 	call	0xd62	; 0xd62 <ADC_u16ReadValue>
    2892:	9e 8b       	std	Y+22, r25	; 0x16
    2894:	8d 8b       	std	Y+21, r24	; 0x15

		Local_u16DigitalValue  = (5 * Local_u16AnalogValue ) / 1023;
    2896:	2d 89       	ldd	r18, Y+21	; 0x15
    2898:	3e 89       	ldd	r19, Y+22	; 0x16
    289a:	c9 01       	movw	r24, r18
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	88 0f       	add	r24, r24
    28a2:	99 1f       	adc	r25, r25
    28a4:	82 0f       	add	r24, r18
    28a6:	93 1f       	adc	r25, r19
    28a8:	2f ef       	ldi	r18, 0xFF	; 255
    28aa:	33 e0       	ldi	r19, 0x03	; 3
    28ac:	b9 01       	movw	r22, r18
    28ae:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <__udivmodhi4>
    28b2:	cb 01       	movw	r24, r22
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13

		Local_u16Result = (1000 * Local_u16DigitalValue)/(5 - Local_u16DigitalValue);
    28b8:	2b 89       	ldd	r18, Y+19	; 0x13
    28ba:	3c 89       	ldd	r19, Y+20	; 0x14
    28bc:	88 ee       	ldi	r24, 0xE8	; 232
    28be:	93 e0       	ldi	r25, 0x03	; 3
    28c0:	28 9f       	mul	r18, r24
    28c2:	a0 01       	movw	r20, r0
    28c4:	29 9f       	mul	r18, r25
    28c6:	50 0d       	add	r21, r0
    28c8:	38 9f       	mul	r19, r24
    28ca:	50 0d       	add	r21, r0
    28cc:	11 24       	eor	r1, r1
    28ce:	25 e0       	ldi	r18, 0x05	; 5
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	8b 89       	ldd	r24, Y+19	; 0x13
    28d4:	9c 89       	ldd	r25, Y+20	; 0x14
    28d6:	28 1b       	sub	r18, r24
    28d8:	39 0b       	sbc	r19, r25
    28da:	ca 01       	movw	r24, r20
    28dc:	b9 01       	movw	r22, r18
    28de:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <__udivmodhi4>
    28e2:	cb 01       	movw	r24, r22
    28e4:	cc 01       	movw	r24, r24
    28e6:	a0 e0       	ldi	r26, 0x00	; 0
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	8f 87       	std	Y+15, r24	; 0x0f
    28ec:	98 8b       	std	Y+16, r25	; 0x10
    28ee:	a9 8b       	std	Y+17, r26	; 0x11
    28f0:	ba 8b       	std	Y+18, r27	; 0x12


		if(Local_u16Result >= 3000){
    28f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f4:	98 89       	ldd	r25, Y+16	; 0x10
    28f6:	a9 89       	ldd	r26, Y+17	; 0x11
    28f8:	ba 89       	ldd	r27, Y+18	; 0x12
    28fa:	88 3b       	cpi	r24, 0xB8	; 184
    28fc:	2b e0       	ldi	r18, 0x0B	; 11
    28fe:	92 07       	cpc	r25, r18
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	a2 07       	cpc	r26, r18
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	b2 07       	cpc	r27, r18
    2908:	30 f0       	brcs	.+12     	; 0x2916 <main+0xc4>

			DIO_voidSetPinValue(PORT_B, PIN7, HIGH);
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	67 e0       	ldi	r22, 0x07	; 7
    290e:	41 e0       	ldi	r20, 0x01	; 1
    2910:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
    2914:	05 c0       	rjmp	.+10     	; 0x2920 <main+0xce>

		}
		else {

			DIO_voidSetPinValue(PORT_B, PIN7, LOW);
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	67 e0       	ldi	r22, 0x07	; 7
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_voidSetPinValue>
		}


		LCD_voidSetPosition(0, 1);
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	61 e0       	ldi	r22, 0x01	; 1
    2924:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSetPosition>
		LCD_voidWriteNumber(Local_u16Result);
    2928:	8f 85       	ldd	r24, Y+15	; 0x0f
    292a:	0e 94 c6 13 	call	0x278c	; 0x278c <LCD_voidWriteNumber>

		LCD_voidSetPosition(1, 1);
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	61 e0       	ldi	r22, 0x01	; 1
    2932:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSetPosition>
		LCD_voidWriteNumber(Local_u16DigitalValue);
    2936:	8b 89       	ldd	r24, Y+19	; 0x13
    2938:	0e 94 c6 13 	call	0x278c	; 0x278c <LCD_voidWriteNumber>
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a6 e9       	ldi	r26, 0x96	; 150
    2942:	b3 e4       	ldi	r27, 0x43	; 67
    2944:	8b 87       	std	Y+11, r24	; 0x0b
    2946:	9c 87       	std	Y+12, r25	; 0x0c
    2948:	ad 87       	std	Y+13, r26	; 0x0d
    294a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294c:	6b 85       	ldd	r22, Y+11	; 0x0b
    294e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2950:	8d 85       	ldd	r24, Y+13	; 0x0d
    2952:	9e 85       	ldd	r25, Y+14	; 0x0e
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4a ef       	ldi	r20, 0xFA	; 250
    295a:	54 e4       	ldi	r21, 0x44	; 68
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	8f 83       	std	Y+7, r24	; 0x07
    2966:	98 87       	std	Y+8, r25	; 0x08
    2968:	a9 87       	std	Y+9, r26	; 0x09
    296a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e8       	ldi	r20, 0x80	; 128
    297a:	5f e3       	ldi	r21, 0x3F	; 63
    297c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2980:	88 23       	and	r24, r24
    2982:	2c f4       	brge	.+10     	; 0x298e <main+0x13c>
		__ticks = 1;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
    298c:	3f c0       	rjmp	.+126    	; 0x2a0c <main+0x1ba>
	else if (__tmp > 65535)
    298e:	6f 81       	ldd	r22, Y+7	; 0x07
    2990:	78 85       	ldd	r23, Y+8	; 0x08
    2992:	89 85       	ldd	r24, Y+9	; 0x09
    2994:	9a 85       	ldd	r25, Y+10	; 0x0a
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	3f ef       	ldi	r19, 0xFF	; 255
    299a:	4f e7       	ldi	r20, 0x7F	; 127
    299c:	57 e4       	ldi	r21, 0x47	; 71
    299e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29a2:	18 16       	cp	r1, r24
    29a4:	4c f5       	brge	.+82     	; 0x29f8 <main+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e2       	ldi	r20, 0x20	; 32
    29b4:	51 e4       	ldi	r21, 0x41	; 65
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9e 83       	std	Y+6, r25	; 0x06
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	0f c0       	rjmp	.+30     	; 0x29ee <main+0x19c>
    29d0:	88 ec       	ldi	r24, 0xC8	; 200
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	9c 83       	std	Y+4, r25	; 0x04
    29d6:	8b 83       	std	Y+3, r24	; 0x03
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	9c 81       	ldd	r25, Y+4	; 0x04
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <main+0x18a>
    29e0:	9c 83       	std	Y+4, r25	; 0x04
    29e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	9e 83       	std	Y+6, r25	; 0x06
    29ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ee:	8d 81       	ldd	r24, Y+5	; 0x05
    29f0:	9e 81       	ldd	r25, Y+6	; 0x06
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	69 f7       	brne	.-38     	; 0x29d0 <main+0x17e>
    29f6:	4a cf       	rjmp	.-364    	; 0x288c <main+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f8:	6f 81       	ldd	r22, Y+7	; 0x07
    29fa:	78 85       	ldd	r23, Y+8	; 0x08
    29fc:	89 85       	ldd	r24, Y+9	; 0x09
    29fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9e 83       	std	Y+6, r25	; 0x06
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	9a 83       	std	Y+2, r25	; 0x02
    2a12:	89 83       	std	Y+1, r24	; 0x01
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	9a 81       	ldd	r25, Y+2	; 0x02
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <main+0x1c6>
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	35 cf       	rjmp	.-406    	; 0x288c <main+0x3a>

00002a22 <__udivmodqi4>:
    2a22:	99 1b       	sub	r25, r25
    2a24:	79 e0       	ldi	r23, 0x09	; 9
    2a26:	04 c0       	rjmp	.+8      	; 0x2a30 <__udivmodqi4_ep>

00002a28 <__udivmodqi4_loop>:
    2a28:	99 1f       	adc	r25, r25
    2a2a:	96 17       	cp	r25, r22
    2a2c:	08 f0       	brcs	.+2      	; 0x2a30 <__udivmodqi4_ep>
    2a2e:	96 1b       	sub	r25, r22

00002a30 <__udivmodqi4_ep>:
    2a30:	88 1f       	adc	r24, r24
    2a32:	7a 95       	dec	r23
    2a34:	c9 f7       	brne	.-14     	; 0x2a28 <__udivmodqi4_loop>
    2a36:	80 95       	com	r24
    2a38:	08 95       	ret

00002a3a <__udivmodhi4>:
    2a3a:	aa 1b       	sub	r26, r26
    2a3c:	bb 1b       	sub	r27, r27
    2a3e:	51 e1       	ldi	r21, 0x11	; 17
    2a40:	07 c0       	rjmp	.+14     	; 0x2a50 <__udivmodhi4_ep>

00002a42 <__udivmodhi4_loop>:
    2a42:	aa 1f       	adc	r26, r26
    2a44:	bb 1f       	adc	r27, r27
    2a46:	a6 17       	cp	r26, r22
    2a48:	b7 07       	cpc	r27, r23
    2a4a:	10 f0       	brcs	.+4      	; 0x2a50 <__udivmodhi4_ep>
    2a4c:	a6 1b       	sub	r26, r22
    2a4e:	b7 0b       	sbc	r27, r23

00002a50 <__udivmodhi4_ep>:
    2a50:	88 1f       	adc	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	5a 95       	dec	r21
    2a56:	a9 f7       	brne	.-22     	; 0x2a42 <__udivmodhi4_loop>
    2a58:	80 95       	com	r24
    2a5a:	90 95       	com	r25
    2a5c:	bc 01       	movw	r22, r24
    2a5e:	cd 01       	movw	r24, r26
    2a60:	08 95       	ret

00002a62 <__prologue_saves__>:
    2a62:	2f 92       	push	r2
    2a64:	3f 92       	push	r3
    2a66:	4f 92       	push	r4
    2a68:	5f 92       	push	r5
    2a6a:	6f 92       	push	r6
    2a6c:	7f 92       	push	r7
    2a6e:	8f 92       	push	r8
    2a70:	9f 92       	push	r9
    2a72:	af 92       	push	r10
    2a74:	bf 92       	push	r11
    2a76:	cf 92       	push	r12
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	ca 1b       	sub	r28, r26
    2a8c:	db 0b       	sbc	r29, r27
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	09 94       	ijmp

00002a9a <__epilogue_restores__>:
    2a9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2a9c:	39 88       	ldd	r3, Y+17	; 0x11
    2a9e:	48 88       	ldd	r4, Y+16	; 0x10
    2aa0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2aa2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2aa4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aa6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aa8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aaa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aac:	b9 84       	ldd	r11, Y+9	; 0x09
    2aae:	c8 84       	ldd	r12, Y+8	; 0x08
    2ab0:	df 80       	ldd	r13, Y+7	; 0x07
    2ab2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ab4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ab6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ab8:	1b 81       	ldd	r17, Y+3	; 0x03
    2aba:	aa 81       	ldd	r26, Y+2	; 0x02
    2abc:	b9 81       	ldd	r27, Y+1	; 0x01
    2abe:	ce 0f       	add	r28, r30
    2ac0:	d1 1d       	adc	r29, r1
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	ed 01       	movw	r28, r26
    2ace:	08 95       	ret

00002ad0 <_exit>:
    2ad0:	f8 94       	cli

00002ad2 <__stop_program>:
    2ad2:	ff cf       	rjmp	.-2      	; 0x2ad2 <__stop_program>
