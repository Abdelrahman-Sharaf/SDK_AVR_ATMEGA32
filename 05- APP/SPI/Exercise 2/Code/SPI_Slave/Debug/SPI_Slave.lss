
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ac6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002ac6  00002b5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800168  00800168  00002c62  2**0
                  ALLOC
  3 .stab         0000234c  00000000  00000000  00002c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ed7  00000000  00000000  00004fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00006007  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000061da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000081e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00009359  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a35c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000a4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b06b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ec       	ldi	r30, 0xC6	; 198
      78:	fa e2       	ldi	r31, 0x2A	; 42
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <main>
      8a:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Mode){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	27 97       	sbiw	r28, 0x07	; 7
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	6a 83       	std	Y+2, r22	; 0x02
     cee:	4b 83       	std	Y+3, r20	; 0x03

	if(OUTPUT == Copy_u8Mode){
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <DIO_voidSetPinDirection+0x22>
     cf6:	6f c0       	rjmp	.+222    	; 0xdd6 <DIO_voidSetPinDirection+0x100>
	
		switch(Copy_u8Port){
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	3f 83       	std	Y+7, r19	; 0x07
     d00:	2e 83       	std	Y+6, r18	; 0x06
     d02:	8e 81       	ldd	r24, Y+6	; 0x06
     d04:	9f 81       	ldd	r25, Y+7	; 0x07
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	91 05       	cpc	r25, r1
     d0a:	49 f1       	breq	.+82     	; 0xd5e <DIO_voidSetPinDirection+0x88>
     d0c:	2e 81       	ldd	r18, Y+6	; 0x06
     d0e:	3f 81       	ldd	r19, Y+7	; 0x07
     d10:	22 30       	cpi	r18, 0x02	; 2
     d12:	31 05       	cpc	r19, r1
     d14:	2c f4       	brge	.+10     	; 0xd20 <DIO_voidSetPinDirection+0x4a>
     d16:	8e 81       	ldd	r24, Y+6	; 0x06
     d18:	9f 81       	ldd	r25, Y+7	; 0x07
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	61 f0       	breq	.+24     	; 0xd36 <DIO_voidSetPinDirection+0x60>
     d1e:	d2 c0       	rjmp	.+420    	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
     d20:	2e 81       	ldd	r18, Y+6	; 0x06
     d22:	3f 81       	ldd	r19, Y+7	; 0x07
     d24:	22 30       	cpi	r18, 0x02	; 2
     d26:	31 05       	cpc	r19, r1
     d28:	71 f1       	breq	.+92     	; 0xd86 <DIO_voidSetPinDirection+0xb0>
     d2a:	8e 81       	ldd	r24, Y+6	; 0x06
     d2c:	9f 81       	ldd	r25, Y+7	; 0x07
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	91 05       	cpc	r25, r1
     d32:	e9 f1       	breq	.+122    	; 0xdae <DIO_voidSetPinDirection+0xd8>
     d34:	c7 c0       	rjmp	.+398    	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
		
			case PORT_A:	SET_BIT(DDRA, Copy_u8Pin);		break;
     d36:	aa e3       	ldi	r26, 0x3A	; 58
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ea e3       	ldi	r30, 0x3A	; 58
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_voidSetPinDirection+0x7e>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_voidSetPinDirection+0x7a>
     d58:	84 2b       	or	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	b3 c0       	rjmp	.+358    	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
			case PORT_B:	SET_BIT(DDRB, Copy_u8Pin);		break;
     d5e:	a7 e3       	ldi	r26, 0x37	; 55
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e7 e3       	ldi	r30, 0x37	; 55
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_voidSetPinDirection+0xa6>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_voidSetPinDirection+0xa2>
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	9f c0       	rjmp	.+318    	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
			case PORT_C:	SET_BIT(DDRC, Copy_u8Pin);		break;
     d86:	a4 e3       	ldi	r26, 0x34	; 52
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e4 e3       	ldi	r30, 0x34	; 52
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_voidSetPinDirection+0xce>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_voidSetPinDirection+0xca>
     da8:	84 2b       	or	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	8b c0       	rjmp	.+278    	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
			case PORT_D:	SET_BIT(DDRD, Copy_u8Pin);		break;
     dae:	a1 e3       	ldi	r26, 0x31	; 49
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e1 e3       	ldi	r30, 0x31	; 49
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_voidSetPinDirection+0xf6>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_voidSetPinDirection+0xf2>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	77 c0       	rjmp	.+238    	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
			
		}
	}
	
	else if(INPUT == Copy_u8Mode){
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	88 23       	and	r24, r24
     dda:	09 f0       	breq	.+2      	; 0xdde <DIO_voidSetPinDirection+0x108>
     ddc:	73 c0       	rjmp	.+230    	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
	
		switch(Copy_u8Port){
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	3d 83       	std	Y+5, r19	; 0x05
     de6:	2c 83       	std	Y+4, r18	; 0x04
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	91 05       	cpc	r25, r1
     df0:	59 f1       	breq	.+86     	; 0xe48 <DIO_voidSetPinDirection+0x172>
     df2:	2c 81       	ldd	r18, Y+4	; 0x04
     df4:	3d 81       	ldd	r19, Y+5	; 0x05
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	2c f4       	brge	.+10     	; 0xe06 <DIO_voidSetPinDirection+0x130>
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	9d 81       	ldd	r25, Y+5	; 0x05
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	69 f0       	breq	.+26     	; 0xe1e <DIO_voidSetPinDirection+0x148>
     e04:	5f c0       	rjmp	.+190    	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
     e06:	2c 81       	ldd	r18, Y+4	; 0x04
     e08:	3d 81       	ldd	r19, Y+5	; 0x05
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	89 f1       	breq	.+98     	; 0xe72 <DIO_voidSetPinDirection+0x19c>
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	9d 81       	ldd	r25, Y+5	; 0x05
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <DIO_voidSetPinDirection+0x146>
     e1a:	40 c0       	rjmp	.+128    	; 0xe9c <DIO_voidSetPinDirection+0x1c6>
     e1c:	53 c0       	rjmp	.+166    	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
		
			case PORT_A:	CLR_BIT(DDRA, Copy_u8Pin);		break;
     e1e:	aa e3       	ldi	r26, 0x3A	; 58
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	ea e3       	ldi	r30, 0x3A	; 58
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_voidSetPinDirection+0x166>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_voidSetPinDirection+0x162>
     e40:	80 95       	com	r24
     e42:	84 23       	and	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	3e c0       	rjmp	.+124    	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
			case PORT_B:	CLR_BIT(DDRB, Copy_u8Pin);		break;
     e48:	a7 e3       	ldi	r26, 0x37	; 55
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e7 e3       	ldi	r30, 0x37	; 55
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_voidSetPinDirection+0x190>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_voidSetPinDirection+0x18c>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	29 c0       	rjmp	.+82     	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
			case PORT_C:	CLR_BIT(DDRC, Copy_u8Pin);		break;
     e72:	a4 e3       	ldi	r26, 0x34	; 52
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e4 e3       	ldi	r30, 0x34	; 52
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_voidSetPinDirection+0x1ba>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_voidSetPinDirection+0x1b6>
     e94:	80 95       	com	r24
     e96:	84 23       	and	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	14 c0       	rjmp	.+40     	; 0xec4 <DIO_voidSetPinDirection+0x1ee>
			case PORT_D:	CLR_BIT(DDRD, Copy_u8Pin);		break;
     e9c:	a1 e3       	ldi	r26, 0x31	; 49
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e1 e3       	ldi	r30, 0x31	; 49
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_voidSetPinDirection+0x1e4>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <DIO_voidSetPinDirection+0x1e0>
     ebe:	80 95       	com	r24
     ec0:	84 23       	and	r24, r20
     ec2:	8c 93       	st	X, r24
		}
	}
	
	else{    /* return error  */   }
	
}
     ec4:	27 96       	adiw	r28, 0x07	; 7
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value){
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	27 97       	sbiw	r28, 0x07	; 7
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	6a 83       	std	Y+2, r22	; 0x02
     eee:	4b 83       	std	Y+3, r20	; 0x03

	if(HIGH == Copy_u8Value){
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	09 f0       	breq	.+2      	; 0xef8 <DIO_voidSetPinValue+0x22>
     ef6:	6f c0       	rjmp	.+222    	; 0xfd6 <DIO_voidSetPinValue+0x100>
	
		switch(Copy_u8Port){
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3f 83       	std	Y+7, r19	; 0x07
     f00:	2e 83       	std	Y+6, r18	; 0x06
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	49 f1       	breq	.+82     	; 0xf5e <DIO_voidSetPinValue+0x88>
     f0c:	2e 81       	ldd	r18, Y+6	; 0x06
     f0e:	3f 81       	ldd	r19, Y+7	; 0x07
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	2c f4       	brge	.+10     	; 0xf20 <DIO_voidSetPinValue+0x4a>
     f16:	8e 81       	ldd	r24, Y+6	; 0x06
     f18:	9f 81       	ldd	r25, Y+7	; 0x07
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	61 f0       	breq	.+24     	; 0xf36 <DIO_voidSetPinValue+0x60>
     f1e:	d2 c0       	rjmp	.+420    	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
     f20:	2e 81       	ldd	r18, Y+6	; 0x06
     f22:	3f 81       	ldd	r19, Y+7	; 0x07
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	71 f1       	breq	.+92     	; 0xf86 <DIO_voidSetPinValue+0xb0>
     f2a:	8e 81       	ldd	r24, Y+6	; 0x06
     f2c:	9f 81       	ldd	r25, Y+7	; 0x07
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	91 05       	cpc	r25, r1
     f32:	e9 f1       	breq	.+122    	; 0xfae <DIO_voidSetPinValue+0xd8>
     f34:	c7 c0       	rjmp	.+398    	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
		
			case PORT_A:	SET_BIT(PORTA, Copy_u8Pin);		break;
     f36:	ab e3       	ldi	r26, 0x3B	; 59
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	eb e3       	ldi	r30, 0x3B	; 59
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_voidSetPinValue+0x7e>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_voidSetPinValue+0x7a>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	b3 c0       	rjmp	.+358    	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
			case PORT_B:	SET_BIT(PORTB, Copy_u8Pin);		break;
     f5e:	a8 e3       	ldi	r26, 0x38	; 56
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e3       	ldi	r30, 0x38	; 56
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_voidSetPinValue+0xa6>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_voidSetPinValue+0xa2>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	9f c0       	rjmp	.+318    	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
			case PORT_C:	SET_BIT(PORTC, Copy_u8Pin);		break;
     f86:	a5 e3       	ldi	r26, 0x35	; 53
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e5 e3       	ldi	r30, 0x35	; 53
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_voidSetPinValue+0xce>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_voidSetPinValue+0xca>
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	8b c0       	rjmp	.+278    	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
			case PORT_D:	SET_BIT(PORTD, Copy_u8Pin);		break;
     fae:	a2 e3       	ldi	r26, 0x32	; 50
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e2 e3       	ldi	r30, 0x32	; 50
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_voidSetPinValue+0xf6>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_voidSetPinValue+0xf2>
     fd0:	84 2b       	or	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	77 c0       	rjmp	.+238    	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
			
		}
	}
	
	else if(LOW == Copy_u8Value){
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	88 23       	and	r24, r24
     fda:	09 f0       	breq	.+2      	; 0xfde <DIO_voidSetPinValue+0x108>
     fdc:	73 c0       	rjmp	.+230    	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
	
		switch(Copy_u8Port){
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	3d 83       	std	Y+5, r19	; 0x05
     fe6:	2c 83       	std	Y+4, r18	; 0x04
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	91 05       	cpc	r25, r1
     ff0:	59 f1       	breq	.+86     	; 0x1048 <DIO_voidSetPinValue+0x172>
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	3d 81       	ldd	r19, Y+5	; 0x05
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	2c f4       	brge	.+10     	; 0x1006 <DIO_voidSetPinValue+0x130>
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	69 f0       	breq	.+26     	; 0x101e <DIO_voidSetPinValue+0x148>
    1004:	5f c0       	rjmp	.+190    	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	89 f1       	breq	.+98     	; 0x1072 <DIO_voidSetPinValue+0x19c>
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	9d 81       	ldd	r25, Y+5	; 0x05
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <DIO_voidSetPinValue+0x146>
    101a:	40 c0       	rjmp	.+128    	; 0x109c <DIO_voidSetPinValue+0x1c6>
    101c:	53 c0       	rjmp	.+166    	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
		
			case PORT_A:	CLR_BIT(PORTA, Copy_u8Pin);		break;
    101e:	ab e3       	ldi	r26, 0x3B	; 59
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	eb e3       	ldi	r30, 0x3B	; 59
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_voidSetPinValue+0x166>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_voidSetPinValue+0x162>
    1040:	80 95       	com	r24
    1042:	84 23       	and	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	3e c0       	rjmp	.+124    	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
			case PORT_B:	CLR_BIT(PORTB, Copy_u8Pin);		break;
    1048:	a8 e3       	ldi	r26, 0x38	; 56
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e8 e3       	ldi	r30, 0x38	; 56
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_voidSetPinValue+0x190>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_voidSetPinValue+0x18c>
    106a:	80 95       	com	r24
    106c:	84 23       	and	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	29 c0       	rjmp	.+82     	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
			case PORT_C:	CLR_BIT(PORTC, Copy_u8Pin);		break;
    1072:	a5 e3       	ldi	r26, 0x35	; 53
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e5 e3       	ldi	r30, 0x35	; 53
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_voidSetPinValue+0x1ba>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_voidSetPinValue+0x1b6>
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <DIO_voidSetPinValue+0x1ee>
			case PORT_D:	CLR_BIT(PORTD, Copy_u8Pin);		break;
    109c:	a2 e3       	ldi	r26, 0x32	; 50
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e2 e3       	ldi	r30, 0x32	; 50
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_voidSetPinValue+0x1e4>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_voidSetPinValue+0x1e0>
    10be:	80 95       	com	r24
    10c0:	84 23       	and	r24, r20
    10c2:	8c 93       	st	X, r24
		}
	}
	
	else{    /* return error  */   }
	
}
    10c4:	27 96       	adiw	r28, 0x07	; 7
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <DIO_u8GetPinValue>:



uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin){
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <DIO_u8GetPinValue+0x6>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <DIO_u8GetPinValue+0x8>
    10de:	0f 92       	push	r0
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	8a 83       	std	Y+2, r24	; 0x02
    10e6:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8Result = 0; 
    10e8:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){ 
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3d 83       	std	Y+5, r19	; 0x05
    10f2:	2c 83       	std	Y+4, r18	; 0x04
    10f4:	4c 81       	ldd	r20, Y+4	; 0x04
    10f6:	5d 81       	ldd	r21, Y+5	; 0x05
    10f8:	41 30       	cpi	r20, 0x01	; 1
    10fa:	51 05       	cpc	r21, r1
    10fc:	41 f1       	breq	.+80     	; 0x114e <DIO_u8GetPinValue+0x78>
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	91 05       	cpc	r25, r1
    1106:	34 f4       	brge	.+12     	; 0x1114 <DIO_u8GetPinValue+0x3e>
    1108:	2c 81       	ldd	r18, Y+4	; 0x04
    110a:	3d 81       	ldd	r19, Y+5	; 0x05
    110c:	21 15       	cp	r18, r1
    110e:	31 05       	cpc	r19, r1
    1110:	61 f0       	breq	.+24     	; 0x112a <DIO_u8GetPinValue+0x54>
    1112:	52 c0       	rjmp	.+164    	; 0x11b8 <DIO_u8GetPinValue+0xe2>
    1114:	4c 81       	ldd	r20, Y+4	; 0x04
    1116:	5d 81       	ldd	r21, Y+5	; 0x05
    1118:	42 30       	cpi	r20, 0x02	; 2
    111a:	51 05       	cpc	r21, r1
    111c:	51 f1       	breq	.+84     	; 0x1172 <DIO_u8GetPinValue+0x9c>
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	9d 81       	ldd	r25, Y+5	; 0x05
    1122:	83 30       	cpi	r24, 0x03	; 3
    1124:	91 05       	cpc	r25, r1
    1126:	b9 f1       	breq	.+110    	; 0x1196 <DIO_u8GetPinValue+0xc0>
    1128:	47 c0       	rjmp	.+142    	; 0x11b8 <DIO_u8GetPinValue+0xe2>
	
		case PORT_A:
			Local_u8Result = GET_BIT(PINA, Copy_u8Pin);
    112a:	e9 e3       	ldi	r30, 0x39	; 57
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_u8GetPinValue+0x6c>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_u8GetPinValue+0x68>
    1146:	ca 01       	movw	r24, r20
    1148:	81 70       	andi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	35 c0       	rjmp	.+106    	; 0x11b8 <DIO_u8GetPinValue+0xe2>
		break;
		
		case PORT_B:
			Local_u8Result = GET_BIT(PINB, Copy_u8Pin);
    114e:	e6 e3       	ldi	r30, 0x36	; 54
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_u8GetPinValue+0x90>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_u8GetPinValue+0x8c>
    116a:	ca 01       	movw	r24, r20
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	23 c0       	rjmp	.+70     	; 0x11b8 <DIO_u8GetPinValue+0xe2>
		break;
		
		case PORT_C:
			Local_u8Result = GET_BIT(PINC, Copy_u8Pin);
    1172:	e3 e3       	ldi	r30, 0x33	; 51
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_u8GetPinValue+0xb4>
    1186:	55 95       	asr	r21
    1188:	47 95       	ror	r20
    118a:	8a 95       	dec	r24
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_u8GetPinValue+0xb0>
    118e:	ca 01       	movw	r24, r20
    1190:	81 70       	andi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	11 c0       	rjmp	.+34     	; 0x11b8 <DIO_u8GetPinValue+0xe2>
		break;
		
		case PORT_D:
			Local_u8Result = GET_BIT(PIND, Copy_u8Pin);
    1196:	e0 e3       	ldi	r30, 0x30	; 48
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a9 01       	movw	r20, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_u8GetPinValue+0xd8>
    11aa:	55 95       	asr	r21
    11ac:	47 95       	ror	r20
    11ae:	8a 95       	dec	r24
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_u8GetPinValue+0xd4>
    11b2:	ca 01       	movw	r24, r20
    11b4:	81 70       	andi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
		break;
		
	}
	return Local_u8Result;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <DIO_voidSetPortDirection>:



void DIO_voidSetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Mode){
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_voidSetPortDirection+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <DIO_voidSetPortDirection+0x8>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	6a 83       	std	Y+2, r22	; 0x02
	
		switch(Copy_u8Port){ 
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3c 83       	std	Y+4, r19	; 0x04
    11e2:	2b 83       	std	Y+3, r18	; 0x03
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	d1 f0       	breq	.+52     	; 0x1222 <DIO_voidSetPortDirection+0x58>
    11ee:	2b 81       	ldd	r18, Y+3	; 0x03
    11f0:	3c 81       	ldd	r19, Y+4	; 0x04
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <DIO_voidSetPortDirection+0x38>
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 f0       	breq	.+24     	; 0x1218 <DIO_voidSetPortDirection+0x4e>
    1200:	1e c0       	rjmp	.+60     	; 0x123e <DIO_voidSetPortDirection+0x74>
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	81 f0       	breq	.+32     	; 0x122c <DIO_voidSetPortDirection+0x62>
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	81 f0       	breq	.+32     	; 0x1236 <DIO_voidSetPortDirection+0x6c>
    1216:	13 c0       	rjmp	.+38     	; 0x123e <DIO_voidSetPortDirection+0x74>
	
			case PORT_A:	DDRA = Copy_u8Mode;		break;
    1218:	ea e3       	ldi	r30, 0x3A	; 58
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	80 83       	st	Z, r24
    1220:	0e c0       	rjmp	.+28     	; 0x123e <DIO_voidSetPortDirection+0x74>
			case PORT_B:	DDRB = Copy_u8Mode;		break;
    1222:	e7 e3       	ldi	r30, 0x37	; 55
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 83       	st	Z, r24
    122a:	09 c0       	rjmp	.+18     	; 0x123e <DIO_voidSetPortDirection+0x74>
			case PORT_C:	DDRC = Copy_u8Mode;		break;
    122c:	e4 e3       	ldi	r30, 0x34	; 52
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	80 83       	st	Z, r24
    1234:	04 c0       	rjmp	.+8      	; 0x123e <DIO_voidSetPortDirection+0x74>
			case PORT_D:	DDRD = Copy_u8Mode;		break;
    1236:	e1 e3       	ldi	r30, 0x31	; 49
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	80 83       	st	Z, r24
			
	    }
	

}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value){
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <DIO_voidSetPortValue+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <DIO_voidSetPortValue+0x8>
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	6a 83       	std	Y+2, r22	; 0x02

		switch(Copy_u8Port){ 
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	3c 83       	std	Y+4, r19	; 0x04
    1264:	2b 83       	std	Y+3, r18	; 0x03
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	91 05       	cpc	r25, r1
    126e:	d1 f0       	breq	.+52     	; 0x12a4 <DIO_voidSetPortValue+0x58>
    1270:	2b 81       	ldd	r18, Y+3	; 0x03
    1272:	3c 81       	ldd	r19, Y+4	; 0x04
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	2c f4       	brge	.+10     	; 0x1284 <DIO_voidSetPortValue+0x38>
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	61 f0       	breq	.+24     	; 0x129a <DIO_voidSetPortValue+0x4e>
    1282:	1e c0       	rjmp	.+60     	; 0x12c0 <DIO_voidSetPortValue+0x74>
    1284:	2b 81       	ldd	r18, Y+3	; 0x03
    1286:	3c 81       	ldd	r19, Y+4	; 0x04
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	81 f0       	breq	.+32     	; 0x12ae <DIO_voidSetPortValue+0x62>
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	91 05       	cpc	r25, r1
    1296:	81 f0       	breq	.+32     	; 0x12b8 <DIO_voidSetPortValue+0x6c>
    1298:	13 c0       	rjmp	.+38     	; 0x12c0 <DIO_voidSetPortValue+0x74>
	
			case PORT_A:	PORTA = Copy_u8Value;		break;
    129a:	eb e3       	ldi	r30, 0x3B	; 59
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	80 83       	st	Z, r24
    12a2:	0e c0       	rjmp	.+28     	; 0x12c0 <DIO_voidSetPortValue+0x74>
			case PORT_B:	PORTB = Copy_u8Value;		break;
    12a4:	e8 e3       	ldi	r30, 0x38	; 56
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	80 83       	st	Z, r24
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <DIO_voidSetPortValue+0x74>
			case PORT_C:	PORTC = Copy_u8Value;		break;
    12ae:	e5 e3       	ldi	r30, 0x35	; 53
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	80 83       	st	Z, r24
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <DIO_voidSetPortValue+0x74>
			case PORT_D:	PORTD = Copy_u8Value;		break;
    12b8:	e2 e3       	ldi	r30, 0x32	; 50
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	80 83       	st	Z, r24
			
	    }
	

}
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <DIO_voidTogglePin>:


void DIO_voidTogglePin(uint8 Copy_u8Port, uint8 Copy_u8Pin){
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <DIO_voidTogglePin+0x6>
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <DIO_voidTogglePin+0x8>
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8Port){ 
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	3c 83       	std	Y+4, r19	; 0x04
    12e6:	2b 83       	std	Y+3, r18	; 0x03
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	91 05       	cpc	r25, r1
    12f0:	49 f1       	breq	.+82     	; 0x1344 <DIO_voidTogglePin+0x76>
    12f2:	2b 81       	ldd	r18, Y+3	; 0x03
    12f4:	3c 81       	ldd	r19, Y+4	; 0x04
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	31 05       	cpc	r19, r1
    12fa:	2c f4       	brge	.+10     	; 0x1306 <DIO_voidTogglePin+0x38>
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	61 f0       	breq	.+24     	; 0x131c <DIO_voidTogglePin+0x4e>
    1304:	5a c0       	rjmp	.+180    	; 0x13ba <DIO_voidTogglePin+0xec>
    1306:	2b 81       	ldd	r18, Y+3	; 0x03
    1308:	3c 81       	ldd	r19, Y+4	; 0x04
    130a:	22 30       	cpi	r18, 0x02	; 2
    130c:	31 05       	cpc	r19, r1
    130e:	71 f1       	breq	.+92     	; 0x136c <DIO_voidTogglePin+0x9e>
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	91 05       	cpc	r25, r1
    1318:	e9 f1       	breq	.+122    	; 0x1394 <DIO_voidTogglePin+0xc6>
    131a:	4f c0       	rjmp	.+158    	; 0x13ba <DIO_voidTogglePin+0xec>
	
		case PORT_A:  TOG_BIT(PORTA, Copy_u8Pin);    break;
    131c:	ab e3       	ldi	r26, 0x3B	; 59
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	eb e3       	ldi	r30, 0x3B	; 59
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_voidTogglePin+0x6c>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_voidTogglePin+0x68>
    133e:	84 27       	eor	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	3b c0       	rjmp	.+118    	; 0x13ba <DIO_voidTogglePin+0xec>
		
		case PORT_B:  TOG_BIT(PORTB, Copy_u8Pin);    break;
    1344:	a8 e3       	ldi	r26, 0x38	; 56
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e8 e3       	ldi	r30, 0x38	; 56
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_voidTogglePin+0x94>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_voidTogglePin+0x90>
    1366:	84 27       	eor	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	27 c0       	rjmp	.+78     	; 0x13ba <DIO_voidTogglePin+0xec>
		
		case PORT_C:  TOG_BIT(PORTC, Copy_u8Pin);    break;
    136c:	a5 e3       	ldi	r26, 0x35	; 53
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e5 e3       	ldi	r30, 0x35	; 53
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_voidTogglePin+0xbc>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_voidTogglePin+0xb8>
    138e:	84 27       	eor	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	13 c0       	rjmp	.+38     	; 0x13ba <DIO_voidTogglePin+0xec>
		
		case PORT_D:  TOG_BIT(PORTD, Copy_u8Pin);    break;
    1394:	a2 e3       	ldi	r26, 0x32	; 50
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e2 e3       	ldi	r30, 0x32	; 50
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_voidTogglePin+0xe4>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_voidTogglePin+0xe0>
    13b6:	84 27       	eor	r24, r20
    13b8:	8c 93       	st	X, r24
		
	}

}
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <LCD_voidWriteData>:

#include <avr/delay.h>



void LCD_voidWriteData(uint8 Copy_u8Data){
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	e9 97       	sbiw	r28, 0x39	; 57
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(RS, HIGH);
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	41 e0       	ldi	r20, 0x01	; 1
    13e4:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW, LOW);
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
		
	}
	
	else if(LCD_MODE == MODE_4_BIT){
	
		DIO_voidSetPortValue(PORT_DATA, Copy_u8Data & 0xF0);
    13f2:	89 ad       	ldd	r24, Y+57	; 0x39
    13f4:	98 2f       	mov	r25, r24
    13f6:	90 7f       	andi	r25, 0xF0	; 240
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	69 2f       	mov	r22, r25
    13fc:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(EN, HIGH);
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	62 e0       	ldi	r22, 0x02	; 2
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a0 e8       	ldi	r26, 0x80	; 128
    1410:	bf e3       	ldi	r27, 0x3F	; 63
    1412:	8d ab       	std	Y+53, r24	; 0x35
    1414:	9e ab       	std	Y+54, r25	; 0x36
    1416:	af ab       	std	Y+55, r26	; 0x37
    1418:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141a:	6d a9       	ldd	r22, Y+53	; 0x35
    141c:	7e a9       	ldd	r23, Y+54	; 0x36
    141e:	8f a9       	ldd	r24, Y+55	; 0x37
    1420:	98 ad       	ldd	r25, Y+56	; 0x38
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	4a ef       	ldi	r20, 0xFA	; 250
    1428:	54 e4       	ldi	r21, 0x44	; 68
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	89 ab       	std	Y+49, r24	; 0x31
    1434:	9a ab       	std	Y+50, r25	; 0x32
    1436:	ab ab       	std	Y+51, r26	; 0x33
    1438:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    143a:	69 a9       	ldd	r22, Y+49	; 0x31
    143c:	7a a9       	ldd	r23, Y+50	; 0x32
    143e:	8b a9       	ldd	r24, Y+51	; 0x33
    1440:	9c a9       	ldd	r25, Y+52	; 0x34
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e8       	ldi	r20, 0x80	; 128
    1448:	5f e3       	ldi	r21, 0x3F	; 63
    144a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    144e:	88 23       	and	r24, r24
    1450:	2c f4       	brge	.+10     	; 0x145c <LCD_voidWriteData+0x94>
		__ticks = 1;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	98 ab       	std	Y+48, r25	; 0x30
    1458:	8f a7       	std	Y+47, r24	; 0x2f
    145a:	3f c0       	rjmp	.+126    	; 0x14da <LCD_voidWriteData+0x112>
	else if (__tmp > 65535)
    145c:	69 a9       	ldd	r22, Y+49	; 0x31
    145e:	7a a9       	ldd	r23, Y+50	; 0x32
    1460:	8b a9       	ldd	r24, Y+51	; 0x33
    1462:	9c a9       	ldd	r25, Y+52	; 0x34
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	3f ef       	ldi	r19, 0xFF	; 255
    1468:	4f e7       	ldi	r20, 0x7F	; 127
    146a:	57 e4       	ldi	r21, 0x47	; 71
    146c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1470:	18 16       	cp	r1, r24
    1472:	4c f5       	brge	.+82     	; 0x14c6 <LCD_voidWriteData+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1474:	6d a9       	ldd	r22, Y+53	; 0x35
    1476:	7e a9       	ldd	r23, Y+54	; 0x36
    1478:	8f a9       	ldd	r24, Y+55	; 0x37
    147a:	98 ad       	ldd	r25, Y+56	; 0x38
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	51 e4       	ldi	r21, 0x41	; 65
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	98 ab       	std	Y+48, r25	; 0x30
    149a:	8f a7       	std	Y+47, r24	; 0x2f
    149c:	0f c0       	rjmp	.+30     	; 0x14bc <LCD_voidWriteData+0xf4>
    149e:	88 ec       	ldi	r24, 0xC8	; 200
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	9e a7       	std	Y+46, r25	; 0x2e
    14a4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    14a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <LCD_voidWriteData+0xe2>
    14ae:	9e a7       	std	Y+46, r25	; 0x2e
    14b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14b4:	98 a9       	ldd	r25, Y+48	; 0x30
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	98 ab       	std	Y+48, r25	; 0x30
    14ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    14be:	98 a9       	ldd	r25, Y+48	; 0x30
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	69 f7       	brne	.-38     	; 0x149e <LCD_voidWriteData+0xd6>
    14c4:	14 c0       	rjmp	.+40     	; 0x14ee <LCD_voidWriteData+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c6:	69 a9       	ldd	r22, Y+49	; 0x31
    14c8:	7a a9       	ldd	r23, Y+50	; 0x32
    14ca:	8b a9       	ldd	r24, Y+51	; 0x33
    14cc:	9c a9       	ldd	r25, Y+52	; 0x34
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	98 ab       	std	Y+48, r25	; 0x30
    14d8:	8f a7       	std	Y+47, r24	; 0x2f
    14da:	8f a5       	ldd	r24, Y+47	; 0x2f
    14dc:	98 a9       	ldd	r25, Y+48	; 0x30
    14de:	9c a7       	std	Y+44, r25	; 0x2c
    14e0:	8b a7       	std	Y+43, r24	; 0x2b
    14e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    14e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <LCD_voidWriteData+0x11e>
    14ea:	9c a7       	std	Y+44, r25	; 0x2c
    14ec:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		
		DIO_voidSetPinValue(EN, LOW);
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	62 e0       	ldi	r22, 0x02	; 2
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a0 e8       	ldi	r26, 0x80	; 128
    14fe:	bf e3       	ldi	r27, 0x3F	; 63
    1500:	8f a3       	std	Y+39, r24	; 0x27
    1502:	98 a7       	std	Y+40, r25	; 0x28
    1504:	a9 a7       	std	Y+41, r26	; 0x29
    1506:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1508:	6f a1       	ldd	r22, Y+39	; 0x27
    150a:	78 a5       	ldd	r23, Y+40	; 0x28
    150c:	89 a5       	ldd	r24, Y+41	; 0x29
    150e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a ef       	ldi	r20, 0xFA	; 250
    1516:	54 e4       	ldi	r21, 0x44	; 68
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	8b a3       	std	Y+35, r24	; 0x23
    1522:	9c a3       	std	Y+36, r25	; 0x24
    1524:	ad a3       	std	Y+37, r26	; 0x25
    1526:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1528:	6b a1       	ldd	r22, Y+35	; 0x23
    152a:	7c a1       	ldd	r23, Y+36	; 0x24
    152c:	8d a1       	ldd	r24, Y+37	; 0x25
    152e:	9e a1       	ldd	r25, Y+38	; 0x26
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    153c:	88 23       	and	r24, r24
    153e:	2c f4       	brge	.+10     	; 0x154a <LCD_voidWriteData+0x182>
		__ticks = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9a a3       	std	Y+34, r25	; 0x22
    1546:	89 a3       	std	Y+33, r24	; 0x21
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <LCD_voidWriteData+0x200>
	else if (__tmp > 65535)
    154a:	6b a1       	ldd	r22, Y+35	; 0x23
    154c:	7c a1       	ldd	r23, Y+36	; 0x24
    154e:	8d a1       	ldd	r24, Y+37	; 0x25
    1550:	9e a1       	ldd	r25, Y+38	; 0x26
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	3f ef       	ldi	r19, 0xFF	; 255
    1556:	4f e7       	ldi	r20, 0x7F	; 127
    1558:	57 e4       	ldi	r21, 0x47	; 71
    155a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    155e:	18 16       	cp	r1, r24
    1560:	4c f5       	brge	.+82     	; 0x15b4 <LCD_voidWriteData+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	6f a1       	ldd	r22, Y+39	; 0x27
    1564:	78 a5       	ldd	r23, Y+40	; 0x28
    1566:	89 a5       	ldd	r24, Y+41	; 0x29
    1568:	9a a5       	ldd	r25, Y+42	; 0x2a
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e2       	ldi	r20, 0x20	; 32
    1570:	51 e4       	ldi	r21, 0x41	; 65
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9a a3       	std	Y+34, r25	; 0x22
    1588:	89 a3       	std	Y+33, r24	; 0x21
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <LCD_voidWriteData+0x1e2>
    158c:	88 ec       	ldi	r24, 0xC8	; 200
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	98 a3       	std	Y+32, r25	; 0x20
    1592:	8f 8f       	std	Y+31, r24	; 0x1f
    1594:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1596:	98 a1       	ldd	r25, Y+32	; 0x20
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <LCD_voidWriteData+0x1d0>
    159c:	98 a3       	std	Y+32, r25	; 0x20
    159e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	89 a1       	ldd	r24, Y+33	; 0x21
    15a2:	9a a1       	ldd	r25, Y+34	; 0x22
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	9a a3       	std	Y+34, r25	; 0x22
    15a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15aa:	89 a1       	ldd	r24, Y+33	; 0x21
    15ac:	9a a1       	ldd	r25, Y+34	; 0x22
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	69 f7       	brne	.-38     	; 0x158c <LCD_voidWriteData+0x1c4>
    15b2:	14 c0       	rjmp	.+40     	; 0x15dc <LCD_voidWriteData+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b4:	6b a1       	ldd	r22, Y+35	; 0x23
    15b6:	7c a1       	ldd	r23, Y+36	; 0x24
    15b8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ba:	9e a1       	ldd	r25, Y+38	; 0x26
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9a a3       	std	Y+34, r25	; 0x22
    15c6:	89 a3       	std	Y+33, r24	; 0x21
    15c8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ca:	9a a1       	ldd	r25, Y+34	; 0x22
    15cc:	9e 8f       	std	Y+30, r25	; 0x1e
    15ce:	8d 8f       	std	Y+29, r24	; 0x1d
    15d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <LCD_voidWriteData+0x20c>
    15d8:	9e 8f       	std	Y+30, r25	; 0x1e
    15da:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		
		DIO_voidSetPortValue(PORT_DATA, Copy_u8Data << 4);
    15dc:	89 ad       	ldd	r24, Y+57	; 0x39
    15de:	98 2f       	mov	r25, r24
    15e0:	92 95       	swap	r25
    15e2:	90 7f       	andi	r25, 0xF0	; 240
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	69 2f       	mov	r22, r25
    15e8:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(EN, HIGH);
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	62 e0       	ldi	r22, 0x02	; 2
    15f0:	41 e0       	ldi	r20, 0x01	; 1
    15f2:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a0 e8       	ldi	r26, 0x80	; 128
    15fc:	bf e3       	ldi	r27, 0x3F	; 63
    15fe:	89 8f       	std	Y+25, r24	; 0x19
    1600:	9a 8f       	std	Y+26, r25	; 0x1a
    1602:	ab 8f       	std	Y+27, r26	; 0x1b
    1604:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1606:	69 8d       	ldd	r22, Y+25	; 0x19
    1608:	7a 8d       	ldd	r23, Y+26	; 0x1a
    160a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    160c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a ef       	ldi	r20, 0xFA	; 250
    1614:	54 e4       	ldi	r21, 0x44	; 68
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8d 8b       	std	Y+21, r24	; 0x15
    1620:	9e 8b       	std	Y+22, r25	; 0x16
    1622:	af 8b       	std	Y+23, r26	; 0x17
    1624:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1626:	6d 89       	ldd	r22, Y+21	; 0x15
    1628:	7e 89       	ldd	r23, Y+22	; 0x16
    162a:	8f 89       	ldd	r24, Y+23	; 0x17
    162c:	98 8d       	ldd	r25, Y+24	; 0x18
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f e3       	ldi	r21, 0x3F	; 63
    1636:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163a:	88 23       	and	r24, r24
    163c:	2c f4       	brge	.+10     	; 0x1648 <LCD_voidWriteData+0x280>
		__ticks = 1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9c 8b       	std	Y+20, r25	; 0x14
    1644:	8b 8b       	std	Y+19, r24	; 0x13
    1646:	3f c0       	rjmp	.+126    	; 0x16c6 <LCD_voidWriteData+0x2fe>
	else if (__tmp > 65535)
    1648:	6d 89       	ldd	r22, Y+21	; 0x15
    164a:	7e 89       	ldd	r23, Y+22	; 0x16
    164c:	8f 89       	ldd	r24, Y+23	; 0x17
    164e:	98 8d       	ldd	r25, Y+24	; 0x18
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	3f ef       	ldi	r19, 0xFF	; 255
    1654:	4f e7       	ldi	r20, 0x7F	; 127
    1656:	57 e4       	ldi	r21, 0x47	; 71
    1658:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165c:	18 16       	cp	r1, r24
    165e:	4c f5       	brge	.+82     	; 0x16b2 <LCD_voidWriteData+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1660:	69 8d       	ldd	r22, Y+25	; 0x19
    1662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e2       	ldi	r20, 0x20	; 32
    166e:	51 e4       	ldi	r21, 0x41	; 65
    1670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9c 8b       	std	Y+20, r25	; 0x14
    1686:	8b 8b       	std	Y+19, r24	; 0x13
    1688:	0f c0       	rjmp	.+30     	; 0x16a8 <LCD_voidWriteData+0x2e0>
    168a:	88 ec       	ldi	r24, 0xC8	; 200
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9a 8b       	std	Y+18, r25	; 0x12
    1690:	89 8b       	std	Y+17, r24	; 0x11
    1692:	89 89       	ldd	r24, Y+17	; 0x11
    1694:	9a 89       	ldd	r25, Y+18	; 0x12
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <LCD_voidWriteData+0x2ce>
    169a:	9a 8b       	std	Y+18, r25	; 0x12
    169c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169e:	8b 89       	ldd	r24, Y+19	; 0x13
    16a0:	9c 89       	ldd	r25, Y+20	; 0x14
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	9c 8b       	std	Y+20, r25	; 0x14
    16a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a8:	8b 89       	ldd	r24, Y+19	; 0x13
    16aa:	9c 89       	ldd	r25, Y+20	; 0x14
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	69 f7       	brne	.-38     	; 0x168a <LCD_voidWriteData+0x2c2>
    16b0:	14 c0       	rjmp	.+40     	; 0x16da <LCD_voidWriteData+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b2:	6d 89       	ldd	r22, Y+21	; 0x15
    16b4:	7e 89       	ldd	r23, Y+22	; 0x16
    16b6:	8f 89       	ldd	r24, Y+23	; 0x17
    16b8:	98 8d       	ldd	r25, Y+24	; 0x18
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	9c 8b       	std	Y+20, r25	; 0x14
    16c4:	8b 8b       	std	Y+19, r24	; 0x13
    16c6:	8b 89       	ldd	r24, Y+19	; 0x13
    16c8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ca:	98 8b       	std	Y+16, r25	; 0x10
    16cc:	8f 87       	std	Y+15, r24	; 0x0f
    16ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d0:	98 89       	ldd	r25, Y+16	; 0x10
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <LCD_voidWriteData+0x30a>
    16d6:	98 8b       	std	Y+16, r25	; 0x10
    16d8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		
		DIO_voidSetPinValue(EN, LOW);
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	62 e0       	ldi	r22, 0x02	; 2
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e8       	ldi	r26, 0x80	; 128
    16ea:	bf e3       	ldi	r27, 0x3F	; 63
    16ec:	8b 87       	std	Y+11, r24	; 0x0b
    16ee:	9c 87       	std	Y+12, r25	; 0x0c
    16f0:	ad 87       	std	Y+13, r26	; 0x0d
    16f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	4a ef       	ldi	r20, 0xFA	; 250
    1702:	54 e4       	ldi	r21, 0x44	; 68
    1704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	8f 83       	std	Y+7, r24	; 0x07
    170e:	98 87       	std	Y+8, r25	; 0x08
    1710:	a9 87       	std	Y+9, r26	; 0x09
    1712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1714:	6f 81       	ldd	r22, Y+7	; 0x07
    1716:	78 85       	ldd	r23, Y+8	; 0x08
    1718:	89 85       	ldd	r24, Y+9	; 0x09
    171a:	9a 85       	ldd	r25, Y+10	; 0x0a
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	5f e3       	ldi	r21, 0x3F	; 63
    1724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1728:	88 23       	and	r24, r24
    172a:	2c f4       	brge	.+10     	; 0x1736 <LCD_voidWriteData+0x36e>
		__ticks = 1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
    1734:	3f c0       	rjmp	.+126    	; 0x17b4 <LCD_voidWriteData+0x3ec>
	else if (__tmp > 65535)
    1736:	6f 81       	ldd	r22, Y+7	; 0x07
    1738:	78 85       	ldd	r23, Y+8	; 0x08
    173a:	89 85       	ldd	r24, Y+9	; 0x09
    173c:	9a 85       	ldd	r25, Y+10	; 0x0a
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	4f e7       	ldi	r20, 0x7F	; 127
    1744:	57 e4       	ldi	r21, 0x47	; 71
    1746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    174a:	18 16       	cp	r1, r24
    174c:	4c f5       	brge	.+82     	; 0x17a0 <LCD_voidWriteData+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1750:	7c 85       	ldd	r23, Y+12	; 0x0c
    1752:	8d 85       	ldd	r24, Y+13	; 0x0d
    1754:	9e 85       	ldd	r25, Y+14	; 0x0e
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e2       	ldi	r20, 0x20	; 32
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	9e 83       	std	Y+6, r25	; 0x06
    1774:	8d 83       	std	Y+5, r24	; 0x05
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <LCD_voidWriteData+0x3ce>
    1778:	88 ec       	ldi	r24, 0xC8	; 200
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9c 83       	std	Y+4, r25	; 0x04
    177e:	8b 83       	std	Y+3, r24	; 0x03
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <LCD_voidWriteData+0x3bc>
    1788:	9c 83       	std	Y+4, r25	; 0x04
    178a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	9e 83       	std	Y+6, r25	; 0x06
    1794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	69 f7       	brne	.-38     	; 0x1778 <LCD_voidWriteData+0x3b0>
    179e:	14 c0       	rjmp	.+40     	; 0x17c8 <LCD_voidWriteData+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	6f 81       	ldd	r22, Y+7	; 0x07
    17a2:	78 85       	ldd	r23, Y+8	; 0x08
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <LCD_voidWriteData+0x3f8>
    17c4:	9a 83       	std	Y+2, r25	; 0x02
    17c6:	89 83       	std	Y+1, r24	; 0x01
		
	}	
	
	else{   asm("NOP");  }
		
}
    17c8:	e9 96       	adiw	r28, 0x39	; 57
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <LCD_voidSendCommand>:


void LCD_voidSendCommand(uint8 Copy_u8Command){
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	e9 97       	sbiw	r28, 0x39	; 57
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue (RS, LOW);
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (RW, LOW);
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	61 e0       	ldi	r22, 0x01	; 1
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
		
	}
	
	else if(LCD_MODE == MODE_4_BIT){

		DIO_voidSetPortValue(PORT_DATA, Copy_u8Command & 0xF0);
    1804:	89 ad       	ldd	r24, Y+57	; 0x39
    1806:	98 2f       	mov	r25, r24
    1808:	90 7f       	andi	r25, 0xF0	; 240
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	69 2f       	mov	r22, r25
    180e:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPortValue>
		
		DIO_voidSetPinValue(EN, HIGH);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	62 e0       	ldi	r22, 0x02	; 2
    1816:	41 e0       	ldi	r20, 0x01	; 1
    1818:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	a0 e8       	ldi	r26, 0x80	; 128
    1822:	bf e3       	ldi	r27, 0x3F	; 63
    1824:	8d ab       	std	Y+53, r24	; 0x35
    1826:	9e ab       	std	Y+54, r25	; 0x36
    1828:	af ab       	std	Y+55, r26	; 0x37
    182a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182c:	6d a9       	ldd	r22, Y+53	; 0x35
    182e:	7e a9       	ldd	r23, Y+54	; 0x36
    1830:	8f a9       	ldd	r24, Y+55	; 0x37
    1832:	98 ad       	ldd	r25, Y+56	; 0x38
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a ef       	ldi	r20, 0xFA	; 250
    183a:	54 e4       	ldi	r21, 0x44	; 68
    183c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	89 ab       	std	Y+49, r24	; 0x31
    1846:	9a ab       	std	Y+50, r25	; 0x32
    1848:	ab ab       	std	Y+51, r26	; 0x33
    184a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    184c:	69 a9       	ldd	r22, Y+49	; 0x31
    184e:	7a a9       	ldd	r23, Y+50	; 0x32
    1850:	8b a9       	ldd	r24, Y+51	; 0x33
    1852:	9c a9       	ldd	r25, Y+52	; 0x34
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e8       	ldi	r20, 0x80	; 128
    185a:	5f e3       	ldi	r21, 0x3F	; 63
    185c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1860:	88 23       	and	r24, r24
    1862:	2c f4       	brge	.+10     	; 0x186e <LCD_voidSendCommand+0x94>
		__ticks = 1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	98 ab       	std	Y+48, r25	; 0x30
    186a:	8f a7       	std	Y+47, r24	; 0x2f
    186c:	3f c0       	rjmp	.+126    	; 0x18ec <LCD_voidSendCommand+0x112>
	else if (__tmp > 65535)
    186e:	69 a9       	ldd	r22, Y+49	; 0x31
    1870:	7a a9       	ldd	r23, Y+50	; 0x32
    1872:	8b a9       	ldd	r24, Y+51	; 0x33
    1874:	9c a9       	ldd	r25, Y+52	; 0x34
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	3f ef       	ldi	r19, 0xFF	; 255
    187a:	4f e7       	ldi	r20, 0x7F	; 127
    187c:	57 e4       	ldi	r21, 0x47	; 71
    187e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1882:	18 16       	cp	r1, r24
    1884:	4c f5       	brge	.+82     	; 0x18d8 <LCD_voidSendCommand+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1886:	6d a9       	ldd	r22, Y+53	; 0x35
    1888:	7e a9       	ldd	r23, Y+54	; 0x36
    188a:	8f a9       	ldd	r24, Y+55	; 0x37
    188c:	98 ad       	ldd	r25, Y+56	; 0x38
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	51 e4       	ldi	r21, 0x41	; 65
    1896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	98 ab       	std	Y+48, r25	; 0x30
    18ac:	8f a7       	std	Y+47, r24	; 0x2f
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <LCD_voidSendCommand+0xf4>
    18b0:	88 ec       	ldi	r24, 0xC8	; 200
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9e a7       	std	Y+46, r25	; 0x2e
    18b6:	8d a7       	std	Y+45, r24	; 0x2d
    18b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCD_voidSendCommand+0xe2>
    18c0:	9e a7       	std	Y+46, r25	; 0x2e
    18c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c6:	98 a9       	ldd	r25, Y+48	; 0x30
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	98 ab       	std	Y+48, r25	; 0x30
    18cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d0:	98 a9       	ldd	r25, Y+48	; 0x30
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	69 f7       	brne	.-38     	; 0x18b0 <LCD_voidSendCommand+0xd6>
    18d6:	14 c0       	rjmp	.+40     	; 0x1900 <LCD_voidSendCommand+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d8:	69 a9       	ldd	r22, Y+49	; 0x31
    18da:	7a a9       	ldd	r23, Y+50	; 0x32
    18dc:	8b a9       	ldd	r24, Y+51	; 0x33
    18de:	9c a9       	ldd	r25, Y+52	; 0x34
    18e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	98 ab       	std	Y+48, r25	; 0x30
    18ea:	8f a7       	std	Y+47, r24	; 0x2f
    18ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ee:	98 a9       	ldd	r25, Y+48	; 0x30
    18f0:	9c a7       	std	Y+44, r25	; 0x2c
    18f2:	8b a7       	std	Y+43, r24	; 0x2b
    18f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    18f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <LCD_voidSendCommand+0x11e>
    18fc:	9c a7       	std	Y+44, r25	; 0x2c
    18fe:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		
		DIO_voidSetPinValue(EN, LOW);
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	62 e0       	ldi	r22, 0x02	; 2
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a0 e8       	ldi	r26, 0x80	; 128
    1910:	bf e3       	ldi	r27, 0x3F	; 63
    1912:	8f a3       	std	Y+39, r24	; 0x27
    1914:	98 a7       	std	Y+40, r25	; 0x28
    1916:	a9 a7       	std	Y+41, r26	; 0x29
    1918:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191a:	6f a1       	ldd	r22, Y+39	; 0x27
    191c:	78 a5       	ldd	r23, Y+40	; 0x28
    191e:	89 a5       	ldd	r24, Y+41	; 0x29
    1920:	9a a5       	ldd	r25, Y+42	; 0x2a
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4a ef       	ldi	r20, 0xFA	; 250
    1928:	54 e4       	ldi	r21, 0x44	; 68
    192a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	8b a3       	std	Y+35, r24	; 0x23
    1934:	9c a3       	std	Y+36, r25	; 0x24
    1936:	ad a3       	std	Y+37, r26	; 0x25
    1938:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    193a:	6b a1       	ldd	r22, Y+35	; 0x23
    193c:	7c a1       	ldd	r23, Y+36	; 0x24
    193e:	8d a1       	ldd	r24, Y+37	; 0x25
    1940:	9e a1       	ldd	r25, Y+38	; 0x26
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e8       	ldi	r20, 0x80	; 128
    1948:	5f e3       	ldi	r21, 0x3F	; 63
    194a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    194e:	88 23       	and	r24, r24
    1950:	2c f4       	brge	.+10     	; 0x195c <LCD_voidSendCommand+0x182>
		__ticks = 1;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9a a3       	std	Y+34, r25	; 0x22
    1958:	89 a3       	std	Y+33, r24	; 0x21
    195a:	3f c0       	rjmp	.+126    	; 0x19da <LCD_voidSendCommand+0x200>
	else if (__tmp > 65535)
    195c:	6b a1       	ldd	r22, Y+35	; 0x23
    195e:	7c a1       	ldd	r23, Y+36	; 0x24
    1960:	8d a1       	ldd	r24, Y+37	; 0x25
    1962:	9e a1       	ldd	r25, Y+38	; 0x26
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	3f ef       	ldi	r19, 0xFF	; 255
    1968:	4f e7       	ldi	r20, 0x7F	; 127
    196a:	57 e4       	ldi	r21, 0x47	; 71
    196c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1970:	18 16       	cp	r1, r24
    1972:	4c f5       	brge	.+82     	; 0x19c6 <LCD_voidSendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1974:	6f a1       	ldd	r22, Y+39	; 0x27
    1976:	78 a5       	ldd	r23, Y+40	; 0x28
    1978:	89 a5       	ldd	r24, Y+41	; 0x29
    197a:	9a a5       	ldd	r25, Y+42	; 0x2a
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e2       	ldi	r20, 0x20	; 32
    1982:	51 e4       	ldi	r21, 0x41	; 65
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9a a3       	std	Y+34, r25	; 0x22
    199a:	89 a3       	std	Y+33, r24	; 0x21
    199c:	0f c0       	rjmp	.+30     	; 0x19bc <LCD_voidSendCommand+0x1e2>
    199e:	88 ec       	ldi	r24, 0xC8	; 200
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	98 a3       	std	Y+32, r25	; 0x20
    19a4:	8f 8f       	std	Y+31, r24	; 0x1f
    19a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19a8:	98 a1       	ldd	r25, Y+32	; 0x20
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <LCD_voidSendCommand+0x1d0>
    19ae:	98 a3       	std	Y+32, r25	; 0x20
    19b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b2:	89 a1       	ldd	r24, Y+33	; 0x21
    19b4:	9a a1       	ldd	r25, Y+34	; 0x22
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	9a a3       	std	Y+34, r25	; 0x22
    19ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19bc:	89 a1       	ldd	r24, Y+33	; 0x21
    19be:	9a a1       	ldd	r25, Y+34	; 0x22
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	69 f7       	brne	.-38     	; 0x199e <LCD_voidSendCommand+0x1c4>
    19c4:	14 c0       	rjmp	.+40     	; 0x19ee <LCD_voidSendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c6:	6b a1       	ldd	r22, Y+35	; 0x23
    19c8:	7c a1       	ldd	r23, Y+36	; 0x24
    19ca:	8d a1       	ldd	r24, Y+37	; 0x25
    19cc:	9e a1       	ldd	r25, Y+38	; 0x26
    19ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	9a a3       	std	Y+34, r25	; 0x22
    19d8:	89 a3       	std	Y+33, r24	; 0x21
    19da:	89 a1       	ldd	r24, Y+33	; 0x21
    19dc:	9a a1       	ldd	r25, Y+34	; 0x22
    19de:	9e 8f       	std	Y+30, r25	; 0x1e
    19e0:	8d 8f       	std	Y+29, r24	; 0x1d
    19e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <LCD_voidSendCommand+0x20c>
    19ea:	9e 8f       	std	Y+30, r25	; 0x1e
    19ec:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
	
		DIO_voidSetPortValue(PORT_DATA, Copy_u8Command << 4);
    19ee:	89 ad       	ldd	r24, Y+57	; 0x39
    19f0:	98 2f       	mov	r25, r24
    19f2:	92 95       	swap	r25
    19f4:	90 7f       	andi	r25, 0xF0	; 240
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	69 2f       	mov	r22, r25
    19fa:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPortValue>
	
		DIO_voidSetPinValue(EN, HIGH);
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	62 e0       	ldi	r22, 0x02	; 2
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 e8       	ldi	r26, 0x80	; 128
    1a0e:	bf e3       	ldi	r27, 0x3F	; 63
    1a10:	89 8f       	std	Y+25, r24	; 0x19
    1a12:	9a 8f       	std	Y+26, r25	; 0x1a
    1a14:	ab 8f       	std	Y+27, r26	; 0x1b
    1a16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a ef       	ldi	r20, 0xFA	; 250
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8d 8b       	std	Y+21, r24	; 0x15
    1a32:	9e 8b       	std	Y+22, r25	; 0x16
    1a34:	af 8b       	std	Y+23, r26	; 0x17
    1a36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a38:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <LCD_voidSendCommand+0x280>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9c 8b       	std	Y+20, r25	; 0x14
    1a56:	8b 8b       	std	Y+19, r24	; 0x13
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <LCD_voidSendCommand+0x2fe>
	else if (__tmp > 65535)
    1a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a60:	98 8d       	ldd	r25, Y+24	; 0x18
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <LCD_voidSendCommand+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	69 8d       	ldd	r22, Y+25	; 0x19
    1a74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9c 8b       	std	Y+20, r25	; 0x14
    1a98:	8b 8b       	std	Y+19, r24	; 0x13
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <LCD_voidSendCommand+0x2e0>
    1a9c:	88 ec       	ldi	r24, 0xC8	; 200
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9a 8b       	std	Y+18, r25	; 0x12
    1aa2:	89 8b       	std	Y+17, r24	; 0x11
    1aa4:	89 89       	ldd	r24, Y+17	; 0x11
    1aa6:	9a 89       	ldd	r25, Y+18	; 0x12
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <LCD_voidSendCommand+0x2ce>
    1aac:	9a 8b       	std	Y+18, r25	; 0x12
    1aae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	9c 8b       	std	Y+20, r25	; 0x14
    1ab8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8b 89       	ldd	r24, Y+19	; 0x13
    1abc:	9c 89       	ldd	r25, Y+20	; 0x14
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <LCD_voidSendCommand+0x2c2>
    1ac2:	14 c0       	rjmp	.+40     	; 0x1aec <LCD_voidSendCommand+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aca:	98 8d       	ldd	r25, Y+24	; 0x18
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9c 8b       	std	Y+20, r25	; 0x14
    1ad6:	8b 8b       	std	Y+19, r24	; 0x13
    1ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ada:	9c 89       	ldd	r25, Y+20	; 0x14
    1adc:	98 8b       	std	Y+16, r25	; 0x10
    1ade:	8f 87       	std	Y+15, r24	; 0x0f
    1ae0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae2:	98 89       	ldd	r25, Y+16	; 0x10
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_voidSendCommand+0x30a>
    1ae8:	98 8b       	std	Y+16, r25	; 0x10
    1aea:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	
		DIO_voidSetPinValue(EN, LOW);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	62 e0       	ldi	r22, 0x02	; 2
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a0 e8       	ldi	r26, 0x80	; 128
    1afc:	bf e3       	ldi	r27, 0x3F	; 63
    1afe:	8b 87       	std	Y+11, r24	; 0x0b
    1b00:	9c 87       	std	Y+12, r25	; 0x0c
    1b02:	ad 87       	std	Y+13, r26	; 0x0d
    1b04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a ef       	ldi	r20, 0xFA	; 250
    1b14:	54 e4       	ldi	r21, 0x44	; 68
    1b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8f 83       	std	Y+7, r24	; 0x07
    1b20:	98 87       	std	Y+8, r25	; 0x08
    1b22:	a9 87       	std	Y+9, r26	; 0x09
    1b24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b26:	6f 81       	ldd	r22, Y+7	; 0x07
    1b28:	78 85       	ldd	r23, Y+8	; 0x08
    1b2a:	89 85       	ldd	r24, Y+9	; 0x09
    1b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	5f e3       	ldi	r21, 0x3F	; 63
    1b36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b3a:	88 23       	and	r24, r24
    1b3c:	2c f4       	brge	.+10     	; 0x1b48 <LCD_voidSendCommand+0x36e>
		__ticks = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	3f c0       	rjmp	.+126    	; 0x1bc6 <LCD_voidSendCommand+0x3ec>
	else if (__tmp > 65535)
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	3f ef       	ldi	r19, 0xFF	; 255
    1b54:	4f e7       	ldi	r20, 0x7F	; 127
    1b56:	57 e4       	ldi	r21, 0x47	; 71
    1b58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b5c:	18 16       	cp	r1, r24
    1b5e:	4c f5       	brge	.+82     	; 0x1bb2 <LCD_voidSendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e2       	ldi	r20, 0x20	; 32
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <LCD_voidSendCommand+0x3ce>
    1b8a:	88 ec       	ldi	r24, 0xC8	; 200
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9c 83       	std	Y+4, r25	; 0x04
    1b90:	8b 83       	std	Y+3, r24	; 0x03
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_voidSendCommand+0x3bc>
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <LCD_voidSendCommand+0x3b0>
    1bb0:	14 c0       	rjmp	.+40     	; 0x1bda <LCD_voidSendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	9a 83       	std	Y+2, r25	; 0x02
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <LCD_voidSendCommand+0x3f8>
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
		
	}	
	
	else{   asm("NOP");  }

}
    1bda:	e9 96       	adiw	r28, 0x39	; 57
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	08 95       	ret

00001bec <LCD_voidInit>:



void LCD_voidInit(void){
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	e8 97       	sbiw	r28, 0x38	; 56
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61

	/* set port data as output */
	DIO_voidSetPortDirection(PORT_DATA, 0xFF);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	6f ef       	ldi	r22, 0xFF	; 255
    1c04:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPortDirection>
		
	/* set RS, RW, EN pins  as output */
	DIO_voidSetPinDirection(RS, OUTPUT);
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(RW, OUTPUT);
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	61 e0       	ldi	r22, 0x01	; 1
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(EN, OUTPUT);
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
		
	/* Init data port & EN by zero */
	DIO_voidSetPortValue(PORT_DATA, LOW);
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_voidSetPortValue>
	DIO_voidSetPinValue(EN, LOW);
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	62 e0       	ldi	r22, 0x02	; 2
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_voidSetPinValue>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	a0 e2       	ldi	r26, 0x20	; 32
    1c3e:	b2 e4       	ldi	r27, 0x42	; 66
    1c40:	8d ab       	std	Y+53, r24	; 0x35
    1c42:	9e ab       	std	Y+54, r25	; 0x36
    1c44:	af ab       	std	Y+55, r26	; 0x37
    1c46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c48:	6d a9       	ldd	r22, Y+53	; 0x35
    1c4a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c4c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c4e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a ef       	ldi	r20, 0xFA	; 250
    1c56:	54 e4       	ldi	r21, 0x44	; 68
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	89 ab       	std	Y+49, r24	; 0x31
    1c62:	9a ab       	std	Y+50, r25	; 0x32
    1c64:	ab ab       	std	Y+51, r26	; 0x33
    1c66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c68:	69 a9       	ldd	r22, Y+49	; 0x31
    1c6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e8       	ldi	r20, 0x80	; 128
    1c76:	5f e3       	ldi	r21, 0x3F	; 63
    1c78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7c:	88 23       	and	r24, r24
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <LCD_voidInit+0x9e>
		__ticks = 1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	98 ab       	std	Y+48, r25	; 0x30
    1c86:	8f a7       	std	Y+47, r24	; 0x2f
    1c88:	3f c0       	rjmp	.+126    	; 0x1d08 <LCD_voidInit+0x11c>
	else if (__tmp > 65535)
    1c8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c90:	9c a9       	ldd	r25, Y+52	; 0x34
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	3f ef       	ldi	r19, 0xFF	; 255
    1c96:	4f e7       	ldi	r20, 0x7F	; 127
    1c98:	57 e4       	ldi	r21, 0x47	; 71
    1c9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	4c f5       	brge	.+82     	; 0x1cf4 <LCD_voidInit+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ca4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ca6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca8:	98 ad       	ldd	r25, Y+56	; 0x38
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e2       	ldi	r20, 0x20	; 32
    1cb0:	51 e4       	ldi	r21, 0x41	; 65
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	bc 01       	movw	r22, r24
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	98 ab       	std	Y+48, r25	; 0x30
    1cc8:	8f a7       	std	Y+47, r24	; 0x2f
    1cca:	0f c0       	rjmp	.+30     	; 0x1cea <LCD_voidInit+0xfe>
    1ccc:	88 ec       	ldi	r24, 0xC8	; 200
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9e a7       	std	Y+46, r25	; 0x2e
    1cd2:	8d a7       	std	Y+45, r24	; 0x2d
    1cd4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cd6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <LCD_voidInit+0xec>
    1cdc:	9e a7       	std	Y+46, r25	; 0x2e
    1cde:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ce2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	98 ab       	std	Y+48, r25	; 0x30
    1ce8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cec:	98 a9       	ldd	r25, Y+48	; 0x30
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	69 f7       	brne	.-38     	; 0x1ccc <LCD_voidInit+0xe0>
    1cf2:	14 c0       	rjmp	.+40     	; 0x1d1c <LCD_voidInit+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf4:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf6:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cfa:	9c a9       	ldd	r25, Y+52	; 0x34
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	98 ab       	std	Y+48, r25	; 0x30
    1d06:	8f a7       	std	Y+47, r24	; 0x2f
    1d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d0c:	9c a7       	std	Y+44, r25	; 0x2c
    1d0e:	8b a7       	std	Y+43, r24	; 0x2b
    1d10:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d12:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_voidInit+0x128>
    1d18:	9c a7       	std	Y+44, r25	; 0x2c
    1d1a:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_voidSendCommand(DISPLAY_CLEAR);
		_delay_ms(2);
		
	#elif LCD_MODE == MODE_4_BIT
		
		LCD_voidSendCommand(0x33);
    1d1c:	83 e3       	ldi	r24, 0x33	; 51
    1d1e:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_voidSendCommand>
		LCD_voidSendCommand(0x32);
    1d22:	82 e3       	ldi	r24, 0x32	; 50
    1d24:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_voidSendCommand>
		LCD_voidSendCommand(0x28);
    1d28:	88 e2       	ldi	r24, 0x28	; 40
    1d2a:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_voidSendCommand>
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a0 e8       	ldi	r26, 0x80	; 128
    1d34:	bf e3       	ldi	r27, 0x3F	; 63
    1d36:	8f a3       	std	Y+39, r24	; 0x27
    1d38:	98 a7       	std	Y+40, r25	; 0x28
    1d3a:	a9 a7       	std	Y+41, r26	; 0x29
    1d3c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d40:	78 a5       	ldd	r23, Y+40	; 0x28
    1d42:	89 a5       	ldd	r24, Y+41	; 0x29
    1d44:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	4a ef       	ldi	r20, 0xFA	; 250
    1d4c:	54 e4       	ldi	r21, 0x44	; 68
    1d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	8b a3       	std	Y+35, r24	; 0x23
    1d58:	9c a3       	std	Y+36, r25	; 0x24
    1d5a:	ad a3       	std	Y+37, r26	; 0x25
    1d5c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d60:	7c a1       	ldd	r23, Y+36	; 0x24
    1d62:	8d a1       	ldd	r24, Y+37	; 0x25
    1d64:	9e a1       	ldd	r25, Y+38	; 0x26
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e8       	ldi	r20, 0x80	; 128
    1d6c:	5f e3       	ldi	r21, 0x3F	; 63
    1d6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d72:	88 23       	and	r24, r24
    1d74:	2c f4       	brge	.+10     	; 0x1d80 <LCD_voidInit+0x194>
		__ticks = 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9a a3       	std	Y+34, r25	; 0x22
    1d7c:	89 a3       	std	Y+33, r24	; 0x21
    1d7e:	3f c0       	rjmp	.+126    	; 0x1dfe <LCD_voidInit+0x212>
	else if (__tmp > 65535)
    1d80:	6b a1       	ldd	r22, Y+35	; 0x23
    1d82:	7c a1       	ldd	r23, Y+36	; 0x24
    1d84:	8d a1       	ldd	r24, Y+37	; 0x25
    1d86:	9e a1       	ldd	r25, Y+38	; 0x26
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	3f ef       	ldi	r19, 0xFF	; 255
    1d8c:	4f e7       	ldi	r20, 0x7F	; 127
    1d8e:	57 e4       	ldi	r21, 0x47	; 71
    1d90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d94:	18 16       	cp	r1, r24
    1d96:	4c f5       	brge	.+82     	; 0x1dea <LCD_voidInit+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d98:	6f a1       	ldd	r22, Y+39	; 0x27
    1d9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e2       	ldi	r20, 0x20	; 32
    1da6:	51 e4       	ldi	r21, 0x41	; 65
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	9a a3       	std	Y+34, r25	; 0x22
    1dbe:	89 a3       	std	Y+33, r24	; 0x21
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <LCD_voidInit+0x1f4>
    1dc2:	88 ec       	ldi	r24, 0xC8	; 200
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	98 a3       	std	Y+32, r25	; 0x20
    1dc8:	8f 8f       	std	Y+31, r24	; 0x1f
    1dca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dcc:	98 a1       	ldd	r25, Y+32	; 0x20
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_voidInit+0x1e2>
    1dd2:	98 a3       	std	Y+32, r25	; 0x20
    1dd4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1dd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	9a a3       	std	Y+34, r25	; 0x22
    1dde:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	89 a1       	ldd	r24, Y+33	; 0x21
    1de2:	9a a1       	ldd	r25, Y+34	; 0x22
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	69 f7       	brne	.-38     	; 0x1dc2 <LCD_voidInit+0x1d6>
    1de8:	14 c0       	rjmp	.+40     	; 0x1e12 <LCD_voidInit+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	6b a1       	ldd	r22, Y+35	; 0x23
    1dec:	7c a1       	ldd	r23, Y+36	; 0x24
    1dee:	8d a1       	ldd	r24, Y+37	; 0x25
    1df0:	9e a1       	ldd	r25, Y+38	; 0x26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9a a3       	std	Y+34, r25	; 0x22
    1dfc:	89 a3       	std	Y+33, r24	; 0x21
    1dfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1e00:	9a a1       	ldd	r25, Y+34	; 0x22
    1e02:	9e 8f       	std	Y+30, r25	; 0x1e
    1e04:	8d 8f       	std	Y+29, r24	; 0x1d
    1e06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_voidInit+0x21e>
    1e0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e10:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		
		LCD_voidSendCommand(DISPLAY_ON_OFF);
    1e12:	8e e0       	ldi	r24, 0x0E	; 14
    1e14:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_voidSendCommand>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a0 e8       	ldi	r26, 0x80	; 128
    1e1e:	bf e3       	ldi	r27, 0x3F	; 63
    1e20:	89 8f       	std	Y+25, r24	; 0x19
    1e22:	9a 8f       	std	Y+26, r25	; 0x1a
    1e24:	ab 8f       	std	Y+27, r26	; 0x1b
    1e26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	69 8d       	ldd	r22, Y+25	; 0x19
    1e2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a ef       	ldi	r20, 0xFA	; 250
    1e36:	54 e4       	ldi	r21, 0x44	; 68
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	8d 8b       	std	Y+21, r24	; 0x15
    1e42:	9e 8b       	std	Y+22, r25	; 0x16
    1e44:	af 8b       	std	Y+23, r26	; 0x17
    1e46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e48:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <LCD_voidInit+0x27e>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9c 8b       	std	Y+20, r25	; 0x14
    1e66:	8b 8b       	std	Y+19, r24	; 0x13
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <LCD_voidInit+0x2fc>
	else if (__tmp > 65535)
    1e6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e70:	98 8d       	ldd	r25, Y+24	; 0x18
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <LCD_voidInit+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	69 8d       	ldd	r22, Y+25	; 0x19
    1e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9c 8b       	std	Y+20, r25	; 0x14
    1ea8:	8b 8b       	std	Y+19, r24	; 0x13
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <LCD_voidInit+0x2de>
    1eac:	88 ec       	ldi	r24, 0xC8	; 200
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9a 8b       	std	Y+18, r25	; 0x12
    1eb2:	89 8b       	std	Y+17, r24	; 0x11
    1eb4:	89 89       	ldd	r24, Y+17	; 0x11
    1eb6:	9a 89       	ldd	r25, Y+18	; 0x12
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <LCD_voidInit+0x2cc>
    1ebc:	9a 8b       	std	Y+18, r25	; 0x12
    1ebe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9c 8b       	std	Y+20, r25	; 0x14
    1ec8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <LCD_voidInit+0x2c0>
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <LCD_voidInit+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eda:	98 8d       	ldd	r25, Y+24	; 0x18
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9c 8b       	std	Y+20, r25	; 0x14
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
    1ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eea:	9c 89       	ldd	r25, Y+20	; 0x14
    1eec:	98 8b       	std	Y+16, r25	; 0x10
    1eee:	8f 87       	std	Y+15, r24	; 0x0f
    1ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef2:	98 89       	ldd	r25, Y+16	; 0x10
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD_voidInit+0x308>
    1ef8:	98 8b       	std	Y+16, r25	; 0x10
    1efa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		
		LCD_voidSendCommand(DISPLAY_CLEAR);
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_voidSendCommand>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e0       	ldi	r26, 0x00	; 0
    1f08:	b0 e4       	ldi	r27, 0x40	; 64
    1f0a:	8b 87       	std	Y+11, r24	; 0x0b
    1f0c:	9c 87       	std	Y+12, r25	; 0x0c
    1f0e:	ad 87       	std	Y+13, r26	; 0x0d
    1f10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a ef       	ldi	r20, 0xFA	; 250
    1f20:	54 e4       	ldi	r21, 0x44	; 68
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8f 83       	std	Y+7, r24	; 0x07
    1f2c:	98 87       	std	Y+8, r25	; 0x08
    1f2e:	a9 87       	std	Y+9, r26	; 0x09
    1f30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f32:	6f 81       	ldd	r22, Y+7	; 0x07
    1f34:	78 85       	ldd	r23, Y+8	; 0x08
    1f36:	89 85       	ldd	r24, Y+9	; 0x09
    1f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <LCD_voidInit+0x368>
		__ticks = 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9e 83       	std	Y+6, r25	; 0x06
    1f50:	8d 83       	std	Y+5, r24	; 0x05
    1f52:	3f c0       	rjmp	.+126    	; 0x1fd2 <LCD_voidInit+0x3e6>
	else if (__tmp > 65535)
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	4c f5       	brge	.+82     	; 0x1fbe <LCD_voidInit+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	8d 83       	std	Y+5, r24	; 0x05
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <LCD_voidInit+0x3c8>
    1f96:	88 ec       	ldi	r24, 0xC8	; 200
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_voidInit+0x3b6>
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	9e 83       	std	Y+6, r25	; 0x06
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <LCD_voidInit+0x3aa>
    1fbc:	14 c0       	rjmp	.+40     	; 0x1fe6 <LCD_voidInit+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc0:	78 85       	ldd	r23, Y+8	; 0x08
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9e 83       	std	Y+6, r25	; 0x06
    1fd0:	8d 83       	std	Y+5, r24	; 0x05
    1fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_voidInit+0x3f2>
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		
		LCD_voidSendCommand(0x06);
    1fe6:	86 e0       	ldi	r24, 0x06	; 6
    1fe8:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_voidSendCommand>
		
	#else 
		#erroe("You Chosed Wrong LCD Mode")
	#endif
}
    1fec:	e8 96       	adiw	r28, 0x38	; 56
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <LCD_voidClearScreen>:



void LCD_voidClearScreen(void){
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	2e 97       	sbiw	r28, 0x0e	; 14
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61

	LCD_voidSendCommand(DISPLAY_CLEAR);
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_voidSendCommand>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e0       	ldi	r26, 0x00	; 0
    201e:	b0 e4       	ldi	r27, 0x40	; 64
    2020:	8b 87       	std	Y+11, r24	; 0x0b
    2022:	9c 87       	std	Y+12, r25	; 0x0c
    2024:	ad 87       	std	Y+13, r26	; 0x0d
    2026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	6b 85       	ldd	r22, Y+11	; 0x0b
    202a:	7c 85       	ldd	r23, Y+12	; 0x0c
    202c:	8d 85       	ldd	r24, Y+13	; 0x0d
    202e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a ef       	ldi	r20, 0xFA	; 250
    2036:	54 e4       	ldi	r21, 0x44	; 68
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8f 83       	std	Y+7, r24	; 0x07
    2042:	98 87       	std	Y+8, r25	; 0x08
    2044:	a9 87       	std	Y+9, r26	; 0x09
    2046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2048:	6f 81       	ldd	r22, Y+7	; 0x07
    204a:	78 85       	ldd	r23, Y+8	; 0x08
    204c:	89 85       	ldd	r24, Y+9	; 0x09
    204e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	6b 85       	ldd	r22, Y+11	; 0x0b
    2084:	7c 85       	ldd	r23, Y+12	; 0x0c
    2086:	8d 85       	ldd	r24, Y+13	; 0x0d
    2088:	9e 85       	ldd	r25, Y+14	; 0x0e
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <LCD_voidClearScreen+0xcc>
    20ac:	88 ec       	ldi	r24, 0xC8	; 200
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9c 83       	std	Y+4, r25	; 0x04
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_voidClearScreen+0xba>
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <LCD_voidClearScreen+0xae>
    20d2:	14 c0       	rjmp	.+40     	; 0x20fc <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_voidClearScreen+0xf6>
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    20fc:	2e 96       	adiw	r28, 0x0e	; 14
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <LCD_voidWriteString>:



void LCD_voidWriteString(uint8 *Copy_u8Ptr){
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <LCD_voidWriteString+0x6>
    2114:	0f 92       	push	r0
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	9b 83       	std	Y+3, r25	; 0x03
    211c:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8 Local_u8Counter = 0;
    211e:	19 82       	std	Y+1, r1	; 0x01
    2120:	0e c0       	rjmp	.+28     	; 0x213e <LCD_voidWriteString+0x30>

	while(Copy_u8Ptr[Local_u8Counter] != 0){
	
		LCD_voidWriteData(Copy_u8Ptr[Local_u8Counter]);
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	9b 81       	ldd	r25, Y+3	; 0x03
    212c:	fc 01       	movw	r30, r24
    212e:	e2 0f       	add	r30, r18
    2130:	f3 1f       	adc	r31, r19
    2132:	80 81       	ld	r24, Z
    2134:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
		Local_u8Counter++;
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	8f 5f       	subi	r24, 0xFF	; 255
    213c:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(uint8 *Copy_u8Ptr){
	
	uint8 Local_u8Counter = 0;

	while(Copy_u8Ptr[Local_u8Counter] != 0){
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	fc 01       	movw	r30, r24
    214a:	e2 0f       	add	r30, r18
    214c:	f3 1f       	adc	r31, r19
    214e:	80 81       	ld	r24, Z
    2150:	88 23       	and	r24, r24
    2152:	39 f7       	brne	.-50     	; 0x2122 <LCD_voidWriteString+0x14>
		LCD_voidWriteData(Copy_u8Ptr[Local_u8Counter]);
		Local_u8Counter++;
	
	}

}
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <LCD_voidSetPosition>:



void LCD_voidSetPosition(uint8 Copy_u8Row, uint8 Copy_u8Col){
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	00 d0       	rcall	.+0      	; 0x2166 <LCD_voidSetPosition+0x6>
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	6a 83       	std	Y+2, r22	; 0x02

	if(0 == Copy_u8Row){
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	88 23       	and	r24, r24
    2172:	29 f4       	brne	.+10     	; 0x217e <LCD_voidSetPosition+0x1e>

		/* set ddram */
		LCD_voidSendCommand(128 + Copy_u8Col);
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	80 58       	subi	r24, 0x80	; 128
    2178:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_voidSendCommand>
    217c:	09 c0       	rjmp	.+18     	; 0x2190 <LCD_voidSetPosition+0x30>
	}

	else if(1 == Copy_u8Row){
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	29 f4       	brne	.+10     	; 0x218e <LCD_voidSetPosition+0x2e>

		/* set ddram */
		LCD_voidSendCommand(128 + 64 + Copy_u8Col);
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	80 54       	subi	r24, 0x40	; 64
    2188:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_voidSendCommand>
    218c:	01 c0       	rjmp	.+2      	; 0x2190 <LCD_voidSetPosition+0x30>
	}

	else{  asm("NOP"); }
    218e:	00 00       	nop

}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <LCD_voidDisplayLoop>:



void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, uint8 *Copy_u8Ptr){
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	a1 97       	sbiw	r28, 0x21	; 33
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	8e 8f       	std	Y+30, r24	; 0x1e
    21b0:	6f 8f       	std	Y+31, r22	; 0x1f
    21b2:	59 a3       	std	Y+33, r21	; 0x21
    21b4:	48 a3       	std	Y+32, r20	; 0x20

	for(uint8 i=0; i<15; i++){
    21b6:	1d 8e       	std	Y+29, r1	; 0x1d
    21b8:	f9 c0       	rjmp	.+498    	; 0x23ac <LCD_voidDisplayLoop+0x212>

		LCD_voidSetPosition(Copy_u8Row, i);
    21ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21bc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    21be:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_voidSetPosition>

		LCD_voidWriteString(Copy_u8Ptr);
    21c2:	88 a1       	ldd	r24, Y+32	; 0x20
    21c4:	99 a1       	ldd	r25, Y+33	; 0x21
    21c6:	0e 94 87 10 	call	0x210e	; 0x210e <LCD_voidWriteString>
		_delay_ms(Copy_u8Speed);
    21ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21cc:	88 2f       	mov	r24, r24
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e0       	ldi	r26, 0x00	; 0
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	bc 01       	movw	r22, r24
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	89 8f       	std	Y+25, r24	; 0x19
    21e2:	9a 8f       	std	Y+26, r25	; 0x1a
    21e4:	ab 8f       	std	Y+27, r26	; 0x1b
    21e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e8:	69 8d       	ldd	r22, Y+25	; 0x19
    21ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	4a ef       	ldi	r20, 0xFA	; 250
    21f6:	54 e4       	ldi	r21, 0x44	; 68
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8d 8b       	std	Y+21, r24	; 0x15
    2202:	9e 8b       	std	Y+22, r25	; 0x16
    2204:	af 8b       	std	Y+23, r26	; 0x17
    2206:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2208:	6d 89       	ldd	r22, Y+21	; 0x15
    220a:	7e 89       	ldd	r23, Y+22	; 0x16
    220c:	8f 89       	ldd	r24, Y+23	; 0x17
    220e:	98 8d       	ldd	r25, Y+24	; 0x18
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e8       	ldi	r20, 0x80	; 128
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221c:	88 23       	and	r24, r24
    221e:	2c f4       	brge	.+10     	; 0x222a <LCD_voidDisplayLoop+0x90>
		__ticks = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c 8b       	std	Y+20, r25	; 0x14
    2226:	8b 8b       	std	Y+19, r24	; 0x13
    2228:	3f c0       	rjmp	.+126    	; 0x22a8 <LCD_voidDisplayLoop+0x10e>
	else if (__tmp > 65535)
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	3f ef       	ldi	r19, 0xFF	; 255
    2236:	4f e7       	ldi	r20, 0x7F	; 127
    2238:	57 e4       	ldi	r21, 0x47	; 71
    223a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223e:	18 16       	cp	r1, r24
    2240:	4c f5       	brge	.+82     	; 0x2294 <LCD_voidDisplayLoop+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2242:	69 8d       	ldd	r22, Y+25	; 0x19
    2244:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2246:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2248:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	51 e4       	ldi	r21, 0x41	; 65
    2252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9c 8b       	std	Y+20, r25	; 0x14
    2268:	8b 8b       	std	Y+19, r24	; 0x13
    226a:	0f c0       	rjmp	.+30     	; 0x228a <LCD_voidDisplayLoop+0xf0>
    226c:	88 ec       	ldi	r24, 0xC8	; 200
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	9a 8b       	std	Y+18, r25	; 0x12
    2272:	89 8b       	std	Y+17, r24	; 0x11
    2274:	89 89       	ldd	r24, Y+17	; 0x11
    2276:	9a 89       	ldd	r25, Y+18	; 0x12
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_voidDisplayLoop+0xde>
    227c:	9a 8b       	std	Y+18, r25	; 0x12
    227e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2280:	8b 89       	ldd	r24, Y+19	; 0x13
    2282:	9c 89       	ldd	r25, Y+20	; 0x14
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	9c 8b       	std	Y+20, r25	; 0x14
    2288:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228a:	8b 89       	ldd	r24, Y+19	; 0x13
    228c:	9c 89       	ldd	r25, Y+20	; 0x14
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	69 f7       	brne	.-38     	; 0x226c <LCD_voidDisplayLoop+0xd2>
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <LCD_voidDisplayLoop+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	6d 89       	ldd	r22, Y+21	; 0x15
    2296:	7e 89       	ldd	r23, Y+22	; 0x16
    2298:	8f 89       	ldd	r24, Y+23	; 0x17
    229a:	98 8d       	ldd	r25, Y+24	; 0x18
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9c 8b       	std	Y+20, r25	; 0x14
    22a6:	8b 8b       	std	Y+19, r24	; 0x13
    22a8:	8b 89       	ldd	r24, Y+19	; 0x13
    22aa:	9c 89       	ldd	r25, Y+20	; 0x14
    22ac:	98 8b       	std	Y+16, r25	; 0x10
    22ae:	8f 87       	std	Y+15, r24	; 0x0f
    22b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b2:	98 89       	ldd	r25, Y+16	; 0x10
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_voidDisplayLoop+0x11a>
    22b8:	98 8b       	std	Y+16, r25	; 0x10
    22ba:	8f 87       	std	Y+15, r24	; 0x0f

		LCD_voidSendCommand(DISPLAY_CLEAR);
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_voidSendCommand>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 e0       	ldi	r26, 0x00	; 0
    22c8:	b0 e4       	ldi	r27, 0x40	; 64
    22ca:	8b 87       	std	Y+11, r24	; 0x0b
    22cc:	9c 87       	std	Y+12, r25	; 0x0c
    22ce:	ad 87       	std	Y+13, r26	; 0x0d
    22d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a ef       	ldi	r20, 0xFA	; 250
    22e0:	54 e4       	ldi	r21, 0x44	; 68
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8f 83       	std	Y+7, r24	; 0x07
    22ec:	98 87       	std	Y+8, r25	; 0x08
    22ee:	a9 87       	std	Y+9, r26	; 0x09
    22f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f2:	6f 81       	ldd	r22, Y+7	; 0x07
    22f4:	78 85       	ldd	r23, Y+8	; 0x08
    22f6:	89 85       	ldd	r24, Y+9	; 0x09
    22f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <LCD_voidDisplayLoop+0x17a>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <LCD_voidDisplayLoop+0x1f8>
	else if (__tmp > 65535)
    2314:	6f 81       	ldd	r22, Y+7	; 0x07
    2316:	78 85       	ldd	r23, Y+8	; 0x08
    2318:	89 85       	ldd	r24, Y+9	; 0x09
    231a:	9a 85       	ldd	r25, Y+10	; 0x0a
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	4c f5       	brge	.+82     	; 0x237e <LCD_voidDisplayLoop+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	6b 85       	ldd	r22, Y+11	; 0x0b
    232e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2330:	8d 85       	ldd	r24, Y+13	; 0x0d
    2332:	9e 85       	ldd	r25, Y+14	; 0x0e
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <LCD_voidDisplayLoop+0x1da>
    2356:	88 ec       	ldi	r24, 0xC8	; 200
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9c 83       	std	Y+4, r25	; 0x04
    235c:	8b 83       	std	Y+3, r24	; 0x03
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <LCD_voidDisplayLoop+0x1c8>
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f7       	brne	.-38     	; 0x2356 <LCD_voidDisplayLoop+0x1bc>
    237c:	14 c0       	rjmp	.+40     	; 0x23a6 <LCD_voidDisplayLoop+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	8d 81       	ldd	r24, Y+5	; 0x05
    2394:	9e 81       	ldd	r25, Y+6	; 0x06
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <LCD_voidDisplayLoop+0x204>
    23a2:	9a 83       	std	Y+2, r25	; 0x02
    23a4:	89 83       	std	Y+1, r24	; 0x01



void LCD_voidDisplayLoop(uint8 Copy_u8Row, uint8 Copy_u8Speed, uint8 *Copy_u8Ptr){

	for(uint8 i=0; i<15; i++){
    23a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23a8:	8f 5f       	subi	r24, 0xFF	; 255
    23aa:	8d 8f       	std	Y+29, r24	; 0x1d
    23ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ae:	8f 30       	cpi	r24, 0x0F	; 15
    23b0:	08 f4       	brcc	.+2      	; 0x23b4 <LCD_voidDisplayLoop+0x21a>
    23b2:	03 cf       	rjmp	.-506    	; 0x21ba <LCD_voidDisplayLoop+0x20>

		LCD_voidSendCommand(DISPLAY_CLEAR);
		_delay_ms(2);

	}
}
    23b4:	a1 96       	adiw	r28, 0x21	; 33
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <LCD_voidSetCGRAMAdres>:


void LCD_voidSetCGRAMAdres(void){
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSendCommand(64);
    23ce:	80 e4       	ldi	r24, 0x40	; 64
    23d0:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_voidSendCommand>
	LCD_voidWriteData(0b00000011);
    23d4:	83 e0       	ldi	r24, 0x03	; 3
    23d6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000011);
    23da:	83 e0       	ldi	r24, 0x03	; 3
    23dc:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000011);
    23f2:	83 e0       	ldi	r24, 0x03	; 3
    23f4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000101);
    23f8:	85 e0       	ldi	r24, 0x05	; 5
    23fa:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00001001);
    23fe:	89 e0       	ldi	r24, 0x09	; 9
    2400:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>

	LCD_voidWriteData(0b00011000);
    2404:	88 e1       	ldi	r24, 0x18	; 24
    2406:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00011000);
    240a:	88 e1       	ldi	r24, 0x18	; 24
    240c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2410:	80 e1       	ldi	r24, 0x10	; 16
    2412:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2416:	80 e1       	ldi	r24, 0x10	; 16
    2418:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    241c:	80 e1       	ldi	r24, 0x10	; 16
    241e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00011000);
    2422:	88 e1       	ldi	r24, 0x18	; 24
    2424:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010100);
    2428:	84 e1       	ldi	r24, 0x14	; 20
    242a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010010);
    242e:	82 e1       	ldi	r24, 0x12	; 18
    2430:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>

	LCD_voidWriteData(0b00000001);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000010);
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    2452:	84 e0       	ldi	r24, 0x04	; 4
    2454:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    2458:	84 e0       	ldi	r24, 0x04	; 4
    245a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00001100);
    245e:	8c e0       	ldi	r24, 0x0C	; 12
    2460:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>

	LCD_voidWriteData(0b00010000);
    2464:	80 e1       	ldi	r24, 0x10	; 16
    2466:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    246a:	80 e1       	ldi	r24, 0x10	; 16
    246c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2470:	80 e1       	ldi	r24, 0x10	; 16
    2472:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2476:	80 e1       	ldi	r24, 0x10	; 16
    2478:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00001000);
    247c:	88 e0       	ldi	r24, 0x08	; 8
    247e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    2482:	84 e0       	ldi	r24, 0x04	; 4
    2484:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    2488:	84 e0       	ldi	r24, 0x04	; 4
    248a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000110);
    248e:	86 e0       	ldi	r24, 0x06	; 6
    2490:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>

	LCD_voidWriteData(0b00011111);
    2494:	8f e1       	ldi	r24, 0x1F	; 31
    2496:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>

	LCD_voidWriteData(0b00000001);
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000001);
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00011111);
    24ee:	8f e1       	ldi	r24, 0x1F	; 31
    24f0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>

	LCD_voidWriteData(0b00010000);
    24f4:	80 e1       	ldi	r24, 0x10	; 16
    24f6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010010);
    24fa:	82 e1       	ldi	r24, 0x12	; 18
    24fc:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2500:	80 e1       	ldi	r24, 0x10	; 16
    2502:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00010000);
    2506:	80 e1       	ldi	r24, 0x10	; 16
    2508:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00001000);
    250c:	88 e0       	ldi	r24, 0x08	; 8
    250e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000100);
    2512:	84 e0       	ldi	r24, 0x04	; 4
    2514:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000010);
    2518:	82 e0       	ldi	r24, 0x02	; 2
    251a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>

	LCD_voidWriteData(0b00000001);
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
	LCD_voidWriteData(0b00000000);
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
}
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <LCD_voidWriteNumber>:


void LCD_voidWriteNumber(uint8 Copy_u8Value){
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	0f 92       	push	r0
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	89 83       	std	Y+1, r24	; 0x01


	LCD_voidReverceNumber(Copy_u8Value);
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	0e 94 ba 12 	call	0x2574	; 0x2574 <LCD_voidReverceNumber>

}
    256c:	0f 90       	pop	r0
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <LCD_voidReverceNumber>:



void LCD_voidReverceNumber(uint8 Copy_u8Value){
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	00 d0       	rcall	.+0      	; 0x257a <LCD_voidReverceNumber+0x6>
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Number = 0;
    2580:	19 82       	std	Y+1, r1	; 0x01

	if(0 == Copy_u8Value){
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	88 23       	and	r24, r24
    2586:	01 f5       	brne	.+64     	; 0x25c8 <LCD_voidReverceNumber+0x54>

		LCD_voidWriteData('0');
    2588:	80 e3       	ldi	r24, 0x30	; 48
    258a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
    258e:	22 c0       	rjmp	.+68     	; 0x25d4 <LCD_voidReverceNumber+0x60>

	else{

		while(Copy_u8Value > 0){

			Local_u8Number = (Local_u8Number * 10) + (Copy_u8Value % 10);
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	88 2f       	mov	r24, r24
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9c 01       	movw	r18, r24
    2598:	22 0f       	add	r18, r18
    259a:	33 1f       	adc	r19, r19
    259c:	c9 01       	movw	r24, r18
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	82 0f       	add	r24, r18
    25a8:	93 1f       	adc	r25, r19
    25aa:	28 2f       	mov	r18, r24
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	9a e0       	ldi	r25, 0x0A	; 10
    25b0:	69 2f       	mov	r22, r25
    25b2:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__udivmodqi4>
    25b6:	89 2f       	mov	r24, r25
    25b8:	82 0f       	add	r24, r18
    25ba:	89 83       	std	Y+1, r24	; 0x01
			Copy_u8Value = (Copy_u8Value / 10);
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9a e0       	ldi	r25, 0x0A	; 10
    25c0:	69 2f       	mov	r22, r25
    25c2:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__udivmodqi4>
    25c6:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidWriteData('0');
	}

	else{

		while(Copy_u8Value > 0){
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	88 23       	and	r24, r24
    25cc:	09 f7       	brne	.-62     	; 0x2590 <LCD_voidReverceNumber+0x1c>
			Local_u8Number = (Local_u8Number * 10) + (Copy_u8Value % 10);
			Copy_u8Value = (Copy_u8Value / 10);

		}

		LCD_voidDetachNumber(Local_u8Number);
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	0e 94 ef 12 	call	0x25de	; 0x25de <LCD_voidDetachNumber>
	}

}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <LCD_voidDetachNumber>:



void LCD_voidDetachNumber(uint8 Copy_u8Value){
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <LCD_voidDetachNumber+0x6>
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Number = 0;
    25ea:	19 82       	std	Y+1, r1	; 0x01
    25ec:	11 c0       	rjmp	.+34     	; 0x2610 <LCD_voidDetachNumber+0x32>

	while(Copy_u8Value > 0){

		Local_u8Number = (Copy_u8Value % 10);
    25ee:	8a 81       	ldd	r24, Y+2	; 0x02
    25f0:	9a e0       	ldi	r25, 0x0A	; 10
    25f2:	69 2f       	mov	r22, r25
    25f4:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__udivmodqi4>
    25f8:	89 2f       	mov	r24, r25
    25fa:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteData(Local_u8Number + 48);
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	80 5d       	subi	r24, 0xD0	; 208
    2600:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
		Copy_u8Value = (Copy_u8Value / 10);
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9a e0       	ldi	r25, 0x0A	; 10
    2608:	69 2f       	mov	r22, r25
    260a:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__udivmodqi4>
    260e:	8a 83       	std	Y+2, r24	; 0x02

void LCD_voidDetachNumber(uint8 Copy_u8Value){

	uint8 Local_u8Number = 0;

	while(Copy_u8Value > 0){
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	88 23       	and	r24, r24
    2614:	61 f7       	brne	.-40     	; 0x25ee <LCD_voidDetachNumber+0x10>
		Local_u8Number = (Copy_u8Value % 10);
		LCD_voidWriteData(Local_u8Number + 48);
		Copy_u8Value = (Copy_u8Value / 10);
	}

}
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <SPI_voidInitMaster>:
static void (*SPI_CallBack)(void) = NULL;

	
/******************* SPI master initializing function  *******************/

void  SPI_voidInitMaster(void){
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	0f 92       	push	r0
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
	SPCR = 0x53;
	SPSR = 0x00;

	*/

	uint8 Local_u8Help = 0;
    262a:	19 82       	std	Y+1, r1	; 0x01

	/* SPI Enable */
	SET_BIT(Local_u8Help, SPE);
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	80 64       	ori	r24, 0x40	; 64
    2630:	89 83       	std	Y+1, r24	; 0x01

	/* SPI Master */
	SET_BIT(Local_u8Help, MSTR);
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	80 61       	ori	r24, 0x10	; 16
    2636:	89 83       	std	Y+1, r24	; 0x01

	/* SPI Data Order */
	#if DARA_ORDER == MSB

		/* The MSB of the data word is transmitted first */
		CLR_BIT(Local_u8Help, DORD);
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	8f 7d       	andi	r24, 0xDF	; 223
    263c:	89 83       	std	Y+1, r24	; 0x01

	/* SPI Clock Polarity */
	#if CLOCK_POLARITY == Rising_Falling

		 /* Rising - Falling ---> Leading Edge - Trailing Edge */
		CLR_BIT(Local_u8Help, CPOL);
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	87 7f       	andi	r24, 0xF7	; 247
    2642:	89 83       	std	Y+1, r24	; 0x01

	/* SPI Clock Phase  */
	#if CLOCK_PHASE == Sample_Setup

		/* Sample - Setup ---> Leading Edge - Trailing Edge */
		CLR_BIT(Local_u8Help, CPHA);
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	8b 7f       	andi	r24, 0xFB	; 251
    2648:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(SPSR, SPI2X);

	#elif CLOCK_RATE == NORMAL_SPEED_DIV_128

		/* Clock Rate --> Normal speed f/128 */
		SET_BIT(Local_u8Help, SPR0);
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	81 60       	ori	r24, 0x01	; 1
    264e:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_u8Help, SPR1);
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	82 60       	ori	r24, 0x02	; 2
    2654:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(SPSR, SPI2X);
    2656:	ae e2       	ldi	r26, 0x2E	; 46
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	ee e2       	ldi	r30, 0x2E	; 46
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	8e 7f       	andi	r24, 0xFE	; 254
    2662:	8c 93       	st	X, r24
		#error("You Chose Wrong SPI Clock Rate Option!")
	#endif


	/* Load direct  */
	SPCR = Local_u8Help;
    2664:	ed e2       	ldi	r30, 0x2D	; 45
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	80 83       	st	Z, r24

}
    266c:	0f 90       	pop	r0
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <SPI_voidInitSlave>:



/******************* SPI slave initializing function  *******************/

void  SPI_voidInitSlave(void){
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	0f 92       	push	r0
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62

	uint8 Local_u8Help = 0;
    267e:	19 82       	std	Y+1, r1	; 0x01

	/* SPI Enable */
	SET_BIT(Local_u8Help, SPE);
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	80 64       	ori	r24, 0x40	; 64
    2684:	89 83       	std	Y+1, r24	; 0x01

	/* SPI Slave */
	CLR_BIT(Local_u8Help, MSTR);
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	8f 7e       	andi	r24, 0xEF	; 239
    268a:	89 83       	std	Y+1, r24	; 0x01

	/* SPI Data Order */
	#if DARA_ORDER == MSB

		/* The MSB of the data word is transmitted first */
		CLR_BIT(Local_u8Help, DORD);
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	8f 7d       	andi	r24, 0xDF	; 223
    2690:	89 83       	std	Y+1, r24	; 0x01

	/* SPI Clock Polarity */
	#if CLOCK_POLARITY == Rising_Falling

		 /* Rising - Falling ---> Leading Edge - Trailing Edge */
		CLR_BIT(Local_u8Help, CPOL);
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	87 7f       	andi	r24, 0xF7	; 247
    2696:	89 83       	std	Y+1, r24	; 0x01

	/* SPI Clock Phase  */
	#if CLOCK_PHASE == Sample_Setup

		/* Sample - Setup ---> Leading Edge - Trailing Edge */
		CLR_BIT(Local_u8Help, CPHA);
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	8b 7f       	andi	r24, 0xFB	; 251
    269c:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error("You Chose Wrong SPI Clock Phase Option!")
	#endif

	SPCR = Local_u8Help;
    269e:	ed e2       	ldi	r30, 0x2D	; 45
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	80 83       	st	Z, r24

}
    26a6:	0f 90       	pop	r0
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <SPI_voidSendChar>:



/******************* Polling send char function *******************/

void SPI_voidSendChar(uint8 Copy_u8Data){
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	0f 92       	push	r0
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	89 83       	std	Y+1, r24	; 0x01

	/* Load data in data register */
	SPDR = Copy_u8Data;
    26ba:	ef e2       	ldi	r30, 0x2F	; 47
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	80 83       	st	Z, r24

	/* Wait till transmit is complete */
	while(0 == (GET_BIT(SPSR, SPIF)));
    26c2:	ee e2       	ldi	r30, 0x2E	; 46
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	88 23       	and	r24, r24
    26ca:	dc f7       	brge	.-10     	; 0x26c2 <SPI_voidSendChar+0x14>

	/* Clear SPI interrupt flag */
	SET_BIT(SPSR, SPIF);
    26cc:	ae e2       	ldi	r26, 0x2E	; 46
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	ee e2       	ldi	r30, 0x2E	; 46
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	80 68       	ori	r24, 0x80	; 128
    26d8:	8c 93       	st	X, r24

}
    26da:	0f 90       	pop	r0
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <SPI_u8ReceiveChar>:



/******************* Polling receive char function *******************/

uint8 SPI_u8ReceiveChar(void){
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62

	/* Wait till receive is complete */
	while(0 == (GET_BIT(SPSR, SPIF)));
    26ea:	ee e2       	ldi	r30, 0x2E	; 46
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	88 23       	and	r24, r24
    26f2:	dc f7       	brge	.-10     	; 0x26ea <SPI_u8ReceiveChar+0x8>

	/* Clear SPI interrupt flag */
	SET_BIT(SPSR, SPIF);
    26f4:	ae e2       	ldi	r26, 0x2E	; 46
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	ee e2       	ldi	r30, 0x2E	; 46
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	80 68       	ori	r24, 0x80	; 128
    2700:	8c 93       	st	X, r24

	/* Return data */
	return SPDR;
    2702:	ef e2       	ldi	r30, 0x2F	; 47
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z

}
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <SPI_voidTransmitString>:



/******************* Polling transmit string function *******************/

void SPI_voidTransmitString(uint8 *Copy_u8Data){
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	00 d0       	rcall	.+0      	; 0x2714 <SPI_voidTransmitString+0x6>
    2714:	0f 92       	push	r0
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	9b 83       	std	Y+3, r25	; 0x03
    271c:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8Counter = 0;
    271e:	19 82       	std	Y+1, r1	; 0x01
    2720:	1b c0       	rjmp	.+54     	; 0x2758 <SPI_voidTransmitString+0x4a>

	/* Verify that the data is not equal to Null */
	while('\0' != Copy_u8Data[Local_u8Counter]){

		/* Load data in data register */
		SPDR = Copy_u8Data[Local_u8Counter];
    2722:	af e2       	ldi	r26, 0x2F	; 47
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	fc 01       	movw	r30, r24
    2732:	e2 0f       	add	r30, r18
    2734:	f3 1f       	adc	r31, r19
    2736:	80 81       	ld	r24, Z
    2738:	8c 93       	st	X, r24

		/* Wait till transmit is complete */
		while(0 == (GET_BIT(SPSR, SPIF)));
    273a:	ee e2       	ldi	r30, 0x2E	; 46
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	88 23       	and	r24, r24
    2742:	dc f7       	brge	.-10     	; 0x273a <SPI_voidTransmitString+0x2c>

		/* Clear SPI interrupt flag */
		SET_BIT(SPSR, SPIF);
    2744:	ae e2       	ldi	r26, 0x2E	; 46
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	ee e2       	ldi	r30, 0x2E	; 46
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	80 68       	ori	r24, 0x80	; 128
    2750:	8c 93       	st	X, r24

		Local_u8Counter ++;
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	8f 5f       	subi	r24, 0xFF	; 255
    2756:	89 83       	std	Y+1, r24	; 0x01
void SPI_voidTransmitString(uint8 *Copy_u8Data){

	uint8 Local_u8Counter = 0;

	/* Verify that the data is not equal to Null */
	while('\0' != Copy_u8Data[Local_u8Counter]){
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	fc 01       	movw	r30, r24
    2764:	e2 0f       	add	r30, r18
    2766:	f3 1f       	adc	r31, r19
    2768:	80 81       	ld	r24, Z
    276a:	88 23       	and	r24, r24
    276c:	d1 f6       	brne	.-76     	; 0x2722 <SPI_voidTransmitString+0x14>
		/* Clear SPI interrupt flag */
		SET_BIT(SPSR, SPIF);

		Local_u8Counter ++;
	}
}
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <SPI_u8ReceiveString>:



/******************* Polling receive string function *******************/

uint8 SPI_u8ReceiveString(void){
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	00 d0       	rcall	.+0      	; 0x2780 <SPI_u8ReceiveString+0x6>
    2780:	0f 92       	push	r0
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62

	uint16 Local_u16TimeOut = 0;
    2786:	1b 82       	std	Y+3, r1	; 0x03
    2788:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8ReceivedData = 0;
    278a:	19 82       	std	Y+1, r1	; 0x01
    278c:	0e c0       	rjmp	.+28     	; 0x27aa <SPI_u8ReceiveString+0x30>

	/* Wait till receive is complete */
	while(0 == (GET_BIT(SPSR, SPIF))){

		Local_u16TimeOut ++;
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	9b 81       	ldd	r25, Y+3	; 0x03
    2792:	01 96       	adiw	r24, 0x01	; 1
    2794:	9b 83       	std	Y+3, r25	; 0x03
    2796:	8a 83       	std	Y+2, r24	; 0x02

		if(10000 == Local_u16TimeOut){
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	9b 81       	ldd	r25, Y+3	; 0x03
    279c:	27 e2       	ldi	r18, 0x27	; 39
    279e:	80 31       	cpi	r24, 0x10	; 16
    27a0:	92 07       	cpc	r25, r18
    27a2:	19 f4       	brne	.+6      	; 0x27aa <SPI_u8ReceiveString+0x30>

			Local_u8ReceivedData = 255;
    27a4:	8f ef       	ldi	r24, 0xFF	; 255
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	05 c0       	rjmp	.+10     	; 0x27b4 <SPI_u8ReceiveString+0x3a>

	uint16 Local_u16TimeOut = 0;
	uint8 Local_u8ReceivedData = 0;

	/* Wait till receive is complete */
	while(0 == (GET_BIT(SPSR, SPIF))){
    27aa:	ee e2       	ldi	r30, 0x2E	; 46
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	88 23       	and	r24, r24
    27b2:	6c f7       	brge	.-38     	; 0x278e <SPI_u8ReceiveString+0x14>
			Local_u8ReceivedData = 255;
			break;
		}
	}

	if(0 == Local_u8ReceivedData){
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	88 23       	and	r24, r24
    27b8:	21 f4       	brne	.+8      	; 0x27c2 <SPI_u8ReceiveString+0x48>

		Local_u8ReceivedData = SPDR;
    27ba:	ef e2       	ldi	r30, 0x2F	; 47
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	89 83       	std	Y+1, r24	; 0x01
	}


	/* Clear SPI interrupt flag */
	SET_BIT(SPSR, SPIF);
    27c2:	ae e2       	ldi	r26, 0x2E	; 46
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	ee e2       	ldi	r30, 0x2E	; 46
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	80 68       	ori	r24, 0x80	; 128
    27ce:	8c 93       	st	X, r24

	/* Return data  */
	return Local_u8ReceivedData;
    27d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <SPI_voidSetCallBack>:


/************************* SPI callback function **********************/

void SPI_voidSetCallBack(void(*Local_ptr)(void)){
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <SPI_voidSetCallBack+0x6>
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01

	SPI_CallBack = Local_ptr;
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	9a 81       	ldd	r25, Y+2	; 0x02
    27f0:	90 93 69 01 	sts	0x0169, r25
    27f4:	80 93 68 01 	sts	0x0168, r24

}
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <SPI_voidEnableInterrupt>:



/******************* SPI enable interrupt function *******************/

void SPI_voidEnableInterrupt(void){
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SPCR, SPIE);
    280a:	ad e2       	ldi	r26, 0x2D	; 45
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	ed e2       	ldi	r30, 0x2D	; 45
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	80 68       	ori	r24, 0x80	; 128
    2816:	8c 93       	st	X, r24

}
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <SPI_voidDisableInterrupt>:



/******************* SPI disable interrupt function *******************/

void SPI_voidDisableInterrupt(void){
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SPCR, SPIE);
    2826:	ad e2       	ldi	r26, 0x2D	; 45
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	ed e2       	ldi	r30, 0x2D	; 45
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	8f 77       	andi	r24, 0x7F	; 127
    2832:	8c 93       	st	X, r24

}
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <__vector_12>:



/************************* SPI ISR Function *************************/

ISR( SPI_STC ){
    283a:	1f 92       	push	r1
    283c:	0f 92       	push	r0
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	0f 92       	push	r0
    2842:	11 24       	eor	r1, r1
    2844:	2f 93       	push	r18
    2846:	3f 93       	push	r19
    2848:	4f 93       	push	r20
    284a:	5f 93       	push	r21
    284c:	6f 93       	push	r22
    284e:	7f 93       	push	r23
    2850:	8f 93       	push	r24
    2852:	9f 93       	push	r25
    2854:	af 93       	push	r26
    2856:	bf 93       	push	r27
    2858:	ef 93       	push	r30
    285a:	ff 93       	push	r31
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62

	if(SPI_CallBack != NULL){
    2864:	80 91 68 01 	lds	r24, 0x0168
    2868:	90 91 69 01 	lds	r25, 0x0169
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	29 f0       	breq	.+10     	; 0x287a <__vector_12+0x40>

		SPI_CallBack();
    2870:	e0 91 68 01 	lds	r30, 0x0168
    2874:	f0 91 69 01 	lds	r31, 0x0169
    2878:	09 95       	icall
	}

	else{ /* Return error */ }
}
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	ff 91       	pop	r31
    2880:	ef 91       	pop	r30
    2882:	bf 91       	pop	r27
    2884:	af 91       	pop	r26
    2886:	9f 91       	pop	r25
    2888:	8f 91       	pop	r24
    288a:	7f 91       	pop	r23
    288c:	6f 91       	pop	r22
    288e:	5f 91       	pop	r21
    2890:	4f 91       	pop	r20
    2892:	3f 91       	pop	r19
    2894:	2f 91       	pop	r18
    2896:	0f 90       	pop	r0
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	0f 90       	pop	r0
    289c:	1f 90       	pop	r1
    289e:	18 95       	reti

000028a0 <SPI_u8SendReceiveSynch>:



/******************* SPI send receive synchronous function *******************/

uint8 SPI_u8SendReceiveSynch(uint8 Copy_u8DataTransmit){
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <SPI_u8SendReceiveSynch+0x6>
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	89 83       	std	Y+1, r24	; 0x01

	asm("NOP");
    28ac:	00 00       	nop

}
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <SPI_voidSendReceiveSynch>:



/******************* SPI send receive synchronous function *******************/

void SPI_voidSendReceiveSynch(uint8 Copy_u8DataTransmit, uint8 *Copy_u8DataReceive){
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	00 d0       	rcall	.+0      	; 0x28be <SPI_voidSendReceiveSynch+0x6>
    28be:	0f 92       	push	r0
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	7b 83       	std	Y+3, r23	; 0x03
    28c8:	6a 83       	std	Y+2, r22	; 0x02

	asm("NOP");
    28ca:	00 00       	nop

}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <SPI_voidSendReceiveASynch>:



/******************* SPI send receive asynchronous function *******************/

void SPI_voidSendReceiveASynch(uint8 Copy_u8DataTransmit, void(*CallBack)(uint8)){
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	00 d0       	rcall	.+0      	; 0x28de <SPI_voidSendReceiveASynch+0x6>
    28de:	0f 92       	push	r0
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	7b 83       	std	Y+3, r23	; 0x03
    28e8:	6a 83       	std	Y+2, r22	; 0x02

	asm("NOP");
    28ea:	00 00       	nop

}
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <main>:
#include "SPI_interface.h"
#include "LCD_interface.h"
#include <avr/delay.h>


void main(void){
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	2f 97       	sbiw	r28, 0x0f	; 15
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK (PB7) --> Input
	 ********************************************/

	DIO_voidSetPinDirection(PORT_B, PIN4, INPUT );
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	64 e0       	ldi	r22, 0x04	; 4
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B, PIN5, INPUT );
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	65 e0       	ldi	r22, 0x05	; 5
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B, PIN6, OUTPUT);
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	66 e0       	ldi	r22, 0x06	; 6
    2924:	41 e0       	ldi	r20, 0x01	; 1
    2926:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_B, PIN7, INPUT );
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	67 e0       	ldi	r22, 0x07	; 7
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_voidSetPinDirection>


	/* SPI Enable as slave */
	SPI_voidInitSlave();
    2934:	0e 94 3a 13 	call	0x2674	; 0x2674 <SPI_voidInitSlave>

	LCD_voidInit();
    2938:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <LCD_voidInit>

	uint8 Local_u8DataReceived = 0;
    293c:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_voidClearScreen();
    293e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_voidClearScreen>
	LCD_voidSetPosition(0, 1);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	61 e0       	ldi	r22, 0x01	; 1
    2946:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_voidSetPosition>



	while(1){

		Local_u8DataReceived = SPI_u8ReceiveChar();
    294a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <SPI_u8ReceiveChar>
    294e:	8f 87       	std	Y+15, r24	; 0x0f
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	a0 ea       	ldi	r26, 0xA0	; 160
    2956:	b1 e4       	ldi	r27, 0x41	; 65
    2958:	8b 87       	std	Y+11, r24	; 0x0b
    295a:	9c 87       	std	Y+12, r25	; 0x0c
    295c:	ad 87       	std	Y+13, r26	; 0x0d
    295e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	6b 85       	ldd	r22, Y+11	; 0x0b
    2962:	7c 85       	ldd	r23, Y+12	; 0x0c
    2964:	8d 85       	ldd	r24, Y+13	; 0x0d
    2966:	9e 85       	ldd	r25, Y+14	; 0x0e
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a ef       	ldi	r20, 0xFA	; 250
    296e:	54 e4       	ldi	r21, 0x44	; 68
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8f 83       	std	Y+7, r24	; 0x07
    297a:	98 87       	std	Y+8, r25	; 0x08
    297c:	a9 87       	std	Y+9, r26	; 0x09
    297e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2980:	6f 81       	ldd	r22, Y+7	; 0x07
    2982:	78 85       	ldd	r23, Y+8	; 0x08
    2984:	89 85       	ldd	r24, Y+9	; 0x09
    2986:	9a 85       	ldd	r25, Y+10	; 0x0a
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e8       	ldi	r20, 0x80	; 128
    298e:	5f e3       	ldi	r21, 0x3F	; 63
    2990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2994:	88 23       	and	r24, r24
    2996:	2c f4       	brge	.+10     	; 0x29a2 <main+0xaa>
		__ticks = 1;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9e 83       	std	Y+6, r25	; 0x06
    299e:	8d 83       	std	Y+5, r24	; 0x05
    29a0:	3f c0       	rjmp	.+126    	; 0x2a20 <main+0x128>
	else if (__tmp > 65535)
    29a2:	6f 81       	ldd	r22, Y+7	; 0x07
    29a4:	78 85       	ldd	r23, Y+8	; 0x08
    29a6:	89 85       	ldd	r24, Y+9	; 0x09
    29a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	4c f5       	brge	.+82     	; 0x2a0c <main+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    29bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29be:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e2       	ldi	r20, 0x20	; 32
    29c8:	51 e4       	ldi	r21, 0x41	; 65
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	8d 83       	std	Y+5, r24	; 0x05
    29e2:	0f c0       	rjmp	.+30     	; 0x2a02 <main+0x10a>
    29e4:	88 ec       	ldi	r24, 0xC8	; 200
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	8b 83       	std	Y+3, r24	; 0x03
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	9c 81       	ldd	r25, Y+4	; 0x04
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <main+0xf8>
    29f4:	9c 83       	std	Y+4, r25	; 0x04
    29f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <main+0xec>
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <main+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0e:	78 85       	ldd	r23, Y+8	; 0x08
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9e 83       	std	Y+6, r25	; 0x06
    2a1e:	8d 83       	std	Y+5, r24	; 0x05
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	9e 81       	ldd	r25, Y+6	; 0x06
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <main+0x134>
    2a30:	9a 83       	std	Y+2, r25	; 0x02
    2a32:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);

		LCD_voidWriteData(Local_u8DataReceived);
    2a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a36:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidWriteData>
    2a3a:	87 cf       	rjmp	.-242    	; 0x294a <main+0x52>

00002a3c <__udivmodqi4>:
    2a3c:	99 1b       	sub	r25, r25
    2a3e:	79 e0       	ldi	r23, 0x09	; 9
    2a40:	04 c0       	rjmp	.+8      	; 0x2a4a <__udivmodqi4_ep>

00002a42 <__udivmodqi4_loop>:
    2a42:	99 1f       	adc	r25, r25
    2a44:	96 17       	cp	r25, r22
    2a46:	08 f0       	brcs	.+2      	; 0x2a4a <__udivmodqi4_ep>
    2a48:	96 1b       	sub	r25, r22

00002a4a <__udivmodqi4_ep>:
    2a4a:	88 1f       	adc	r24, r24
    2a4c:	7a 95       	dec	r23
    2a4e:	c9 f7       	brne	.-14     	; 0x2a42 <__udivmodqi4_loop>
    2a50:	80 95       	com	r24
    2a52:	08 95       	ret

00002a54 <__prologue_saves__>:
    2a54:	2f 92       	push	r2
    2a56:	3f 92       	push	r3
    2a58:	4f 92       	push	r4
    2a5a:	5f 92       	push	r5
    2a5c:	6f 92       	push	r6
    2a5e:	7f 92       	push	r7
    2a60:	8f 92       	push	r8
    2a62:	9f 92       	push	r9
    2a64:	af 92       	push	r10
    2a66:	bf 92       	push	r11
    2a68:	cf 92       	push	r12
    2a6a:	df 92       	push	r13
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	ca 1b       	sub	r28, r26
    2a7e:	db 0b       	sbc	r29, r27
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	09 94       	ijmp

00002a8c <__epilogue_restores__>:
    2a8c:	2a 88       	ldd	r2, Y+18	; 0x12
    2a8e:	39 88       	ldd	r3, Y+17	; 0x11
    2a90:	48 88       	ldd	r4, Y+16	; 0x10
    2a92:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a94:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a96:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a98:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a9e:	b9 84       	ldd	r11, Y+9	; 0x09
    2aa0:	c8 84       	ldd	r12, Y+8	; 0x08
    2aa2:	df 80       	ldd	r13, Y+7	; 0x07
    2aa4:	ee 80       	ldd	r14, Y+6	; 0x06
    2aa6:	fd 80       	ldd	r15, Y+5	; 0x05
    2aa8:	0c 81       	ldd	r16, Y+4	; 0x04
    2aaa:	1b 81       	ldd	r17, Y+3	; 0x03
    2aac:	aa 81       	ldd	r26, Y+2	; 0x02
    2aae:	b9 81       	ldd	r27, Y+1	; 0x01
    2ab0:	ce 0f       	add	r28, r30
    2ab2:	d1 1d       	adc	r29, r1
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	ed 01       	movw	r28, r26
    2ac0:	08 95       	ret

00002ac2 <_exit>:
    2ac2:	f8 94       	cli

00002ac4 <__stop_program>:
    2ac4:	ff cf       	rjmp	.-2      	; 0x2ac4 <__stop_program>
